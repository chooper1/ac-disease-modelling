else{
rec<-rexp(1,
rate=distribuzioni$tasso.recuperare.nonaccuta)
caso<-rbind(caso,c(oggi,doo,NA,NA,doo+rec,infettatore[i]))
}
}
}
}
if(dim(caso)[1]>0) names(caso)<-c('doi','doo','doa','dod','dor','infector')
return(caso)
}
# for a given day, split the data into preclinical clinical and subclinical
# and call the nuove.infezioni() to generate the infections of the day
infezione_oggi<-function(oggi,casi,lambda,para.infezione,infettivita,omega.gt){
rownames(casi)<-seq(1,nrow(casi))
names(casi)<-c('doi','doo','doa','dod','dor','infector')
pgio<-nuove.infezioni(oggi,0,
infetti=rpois(1,
para.infezione$tasso.di.immigrazione.infetto),
para.infezione)
precli<-casi[!is.na(casi$doo) & casi$doi>(oggi-21) & casi$doo > oggi,]
if(dim(precli)[1]>0){
lambda0<-omega.gt[ceiling(oggi-precli$doi)]*
lambda*infettivita$preclinica
npre=nuove.infezioni(oggi,infettatore=as.numeric(rownames(precli)),
infetti=rpois(length(lambda0),lambda0),
para.infezione)
} else npre<-data.frame()
clinic<-casi[!is.na(casi$doa) & casi$doi>(oggi-21) &
casi$doa <= oggi & casi$dor >= oggi,]
if(dim(clinic)[1]>0){
lambda0<-omega.gt[ceiling(oggi-clinic$doi)]*
lambda*infettivita$clinica
ncli=nuove.infezioni(oggi,infettatore=as.numeric(rownames(clinic)),
infetti=rpois(length(lambda0),lambda0),
para.infezione)
}else ncli<-data.frame()
subcli<-casi[is.na(casi$doo) & casi$doi>(oggi-21) & casi$dor >= oggi,]
if(dim(subcli)[1]>0){
lambda0<-omega.gt[ceiling(oggi-subcli$doi)]*
lambda*infettivita$subclinica
nsub=nuove.infezioni(oggi,infettatore=as.numeric(rownames(subcli)),
infetti=rpois(length(lambda0),lambda0),
para.infezione)
} else nsub<-data.frame()
pgio<-rbind(pgio,npre,ncli,nsub)
return(pgio)
}
# main function for the branching random walk
camminata.casuale<-function(base.R0, punto.di.cambia, i0,
para.infezione,infettivita,
poppolazione=5.5e5, giorni.totali=210){
controllo<-base.R0/base.R0[1]
Ro<-base.R0[1]/(1-(1-infettivita$subclinica)
* para.infezione$probabilita.subclinica)
casi<-nuove.infezioni(0,0,i0,para.infezione)
names(casi)<-c('doi','doo','doa','dod','dor','infector')
omega.gt<-pweibull(seq(1, 21, 1),
shape = para.infezione$tempo.di.generazione['forma'],
scale = para.infezione$tempo.di.generazione['scala'])
omega.gt<-omega.gt-c(0,omega.gt[-21])
omega.gt<-omega.gt/sum(omega.gt)
for(oggi in seq(1,giorni.totali)){
n0.casi<-nrow(casi)
nuovi.casi<-infezione_oggi(oggi,casi,(1-n0.casi/poppolazione)*
Ro*intervento(oggi,controllo,punto.di.cambia),
para.infezione,infettivita,omega.gt)
casi<-rbind(casi,nuovi.casi)
}
return(casi)
}
per_giorno<-function(casi, giorni.totali=210){
names(casi)<-c('doi','doo','doa','dod','dor','infector')
modello<-matrix(0,nrow=giorni.totali+1,ncol=8)
# infected (deltaSI)
modello[,1]<-hist(casi$doi,breaks = seq(-1,giorni.totali),
plot = FALSE)$count
# preclinical (deltaSP)
modello[,2]<-hist(casi$doi[!is.na(casi$doo)],breaks = seq(-1,giorni.totali),
plot = FALSE)$count
# subclinical (deltaSS)
modello[,3]<-hist(casi$doi[is.na(casi$doo)],breaks = seq(-1,giorni.totali),
plot = FALSE)$count
# clinical (deltaPC)
modello[,4]<-hist(casi$doo[!is.na(casi$doo) & casi$doo <= giorni.totali],
breaks = seq(-1,giorni.totali), plot = FALSE)$count
# admitted to hospital (deltaCH)
modello[,5]<-hist(casi$doa[!is.na(casi$doa) & casi$doa <= giorni.totali],
breaks = seq(-1,giorni.totali), plot = FALSE)$count
# dismissed from hospital (deltaHC)
modello[,6]<-hist(casi$dod[!is.na(casi$doa) & casi$dod <= giorni.totali],
breaks = seq(-1,giorni.totali), plot = FALSE)$count
# clinical recovered (deltaCR) collects both 'accute' and 'nonaccute'
modello[,7]<-hist(casi$dor[!is.na(casi$doo) & casi$dor <= giorni.totali],
breaks = seq(-1,giorni.totali), plot = FALSE)$count
# subclinical recovered (deltaSR)
modello[,8]<-hist(casi$dor[is.na(casi$doo) & casi$dor <= giorni.totali],
breaks = seq(-1,giorni.totali), plot = FALSE)$count
modello<-as.data.frame(modello)
names(modello)<-c('deltaSI','deltaSP','deltaSS','deltaPC',
'deltaCH','deltaHC','deltaCR','deltaSR')
return(modello)
}
branching.3ihr<-function(cases.per.day, total.days){
sir<-data.frame(C=cumsum(cases.per.day$deltaSI),
I=cumsum(cases.per.day$deltaSI-cases.per.day$deltaCR
- cases.per.day$deltaSR),
Is=cumsum(cases.per.day$deltaSS-cases.per.day$deltaSR),
Ip=cumsum(cases.per.day$deltaSP-cases.per.day$deltaPC),
Ic=cumsum(cases.per.day$deltaPC-cases.per.day$deltaCR),
H=cumsum(cases.per.day$deltaCH-cases.per.day$deltaHC),
R=cumsum(cases.per.day$deltaCR+cases.per.day$deltaSR))
return(sir)
}
facciamolo<-function(R0,changepoint,i0,
para.infezione,infettivita,
population.size=5.5e5, Days=210,
Runs=100,ymax=150){
time<-seq(0,Days)
plot(c(0,Days),c(0,ymax),col='blue',xlab='day',
ylab='count',type='n',xlim=c(0,Days),ylim=c(0,ymax))
oi1<-rep(0,Days)
oc1<-rep(0,Days)
os1<-rep(0,Days)
op1<-rep(0,Days)
oh1<-rep(0,Days)
or1<-rep(0,Days)
for(i in 1:Runs){
cases<-camminata.casuale(base.R0=R0,
punto.di.cambia=changepoint, i0=i0,
para.infezione=para.infezione,
infettivita=infettivita,
poppolazione=population.size, giorni.totali=Days)
cases.per.day<-per_giorno(cases, giorni.totali=Days)
risultato<-branching.3ihr(cases.per.day, total.days=Days)
lines(time,risultato$C,col='pink')
lines(time,risultato$Ip,col='green')
lines(time,risultato$Ic,col='blue1')
lines(time,risultato$Is,col='grey')
lines(time,risultato$H,col='red')
oc1<-oc1+risultato$C
op1<-op1+risultato$Ip
oi1<-oi1+risultato$Ic
os1<-os1+risultato$Is
oh1<-oh1+risultato$H
or1<-or1+risultato$Rs
}
or1<-(oc1-or1-os1)/Runs
oi1<-oi1/Runs
oc1<-oc1/Runs
os1<-os1/Runs
oh1<-oh1/Runs
op1<-op1/Runs
lines(time,oc1,col='magenta',lwd=2)
lines(time,op1,col='green4',lwd=2)
lines(time,oi1,col='blue4',lwd=2)
lines(time,os1,col='grey4',lwd=2)
lines(time,oh1,col='red',lwd=2)
#lines(1:length(nl0),nl0,col='brown')
#points(1:length(nl0),nl0)
#lines(1:length(nl0),active0,)
#points(1:length(nl0),active0,col='brown')
lines(time,or1)
}
#=================================================================
#
cases<-camminata.casuale(base.R0=c(3.6,0.5,1.6,0.5),
punto.di.cambia=c(1,15,60,120), i0=4,
para.infezione,infettivita,
poppolazione=5.5e5, giorni.totali=210)
cases.per.day<-per_giorno(cases, giorni.totali=210)
branching.3ihr(cases.per.day, total.days=210)
png(filename='terranova0.png',width=800,height=640)
facciamolo(R0=c(4.6,0.5,1.6,0.5),changepoint=c(1,15,60,120),i0=4,
para.infezione,infettivita,
population.size=5.5e5, Days=210,
Runs=100,ymax=150)
legend(120,120,c('cumulative','preclinical','clinical','subclinical','hospitalised','reported'),lty=1,lwd=2,col=c('magenta','green4','blue4','grey4','red','black'))
dev.off()
png(filename='terranova0.png',width=800,height=640)
View(cases)
facciamolo(R0=c(4.6,0.5,1.6,0.5),changepoint=c(1,15,60,120),i0=4,
para.infezione,infettivita,
population.size=5.5e5, Days=210,
Runs=100,ymax=150)
cases
View(cases.per.day)
branching.3ihr(cases.per.day, total.days=210)
facciamolo(R0=c(4.6,0.5,1.6,0.5),changepoint=c(1,15,60,120),i0=4,
para.infezione,infettivita,
population.size=5.5e5, Days=210,
Runs=100,ymax=150)
R0=c(4.6,0.5,1.6,0.5)
changepoint=c(1,15,60,120)
i0=4
population.size=5.5e5
Days=210
Runs=100
ymax=150
time<-seq(0,Days)
time
plot(c(0,Days),c(0,ymax),col='blue',xlab='day',
ylab='count',type='n',xlim=c(0,Days),ylim=c(0,ymax))
plot(c(0,Days),c(0,ymax),col='blue',xlab='day',
ylab='count',type='n',xlim=c(0,Days),ylim=c(0,ymax))
c(0, days)
c(0, Days)
c(0, ymax)
plot(c(0, Days), c(0, ymax))
plot(c(1, 2, 3, 4, 5), c(3, 4, 5, 6, 7))
plot(c(1, 2, 3, 4, 5), c(3, 4, 5, 6, 7), type="p")
library("deSolve")
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("fit_datasets_F.R")
rhs_SEIR=function(t, y, par, fit, N, phi){
with(as.list(c(y, par, fit)), {
if(t>=phi$times[1]){
newdata=data.frame(times=as.numeric(t))
phi=as.numeric(predict(fit, newdata=newdata))
}
else{
phi=mean(phi$ratios)
}
dS=-(S/N)*(beta_l*L+beta_1*I_1+beta_2*I_2)
dE=(S/N)*(beta_l*L+beta_1*I_1+beta_2*I_2)-mu_E*E
dL=mu_E*E-a*kappa*L
dI_1=(1-1/phi)*kappa*L-mu_2*I_1
#dI_1=0.5*a*kappa*L-eta*I_1
dI_2=a*(1/phi)*kappa*L-mu_2*I_2
#dI_2=0.5*a*kappa*L-eta*I_2
dI_3=mu_2*I_1-eta*I_3
dI_4=mu_2*I_2-eta*I_4
dR_1=eta*I_3
dR_2=eta*rho*I_4
dF=eta*(1-rho)*I_4
list(c(dS, dE, dL, dI_1, dI_2, dI_3, dI_4, dR_1, dR_2, dF))
})
}
ssq_SEIR=function(par, region, active_cases, cases_F, cases_R, mu_CFR=0.01, phi, times, start, fit, S0, pop, N){
par=c(par[1], par[2], par[3], par[4], a=1,
kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, fit=fit, N=N, phi=phi)
I_2=ode_soln[,"I_2"]
I_4=ode_soln[,"I_4"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
ssq=sum((active_cases-(I_2+I_4)^2)+sum((cases_F-F_)^2)+sum((cases_R-R_2)^2))
return(ssq)
}
fit_to_SEIR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_CFR=0.01, pop){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
active_cases=cases_C-cases_R
S0=c(S=pop, E=0, L=0, I_1=0, I_2=active_cases[1], I_3=0, I_4=0, R_1=0, R_2=cases_R[1], F_=cases_F[1])
N=pop
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1, rho=0.8)
#ODE_fit=optim(par=par, fn=ssq_SEIR, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_CFR=mu_CFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, control=list(parscale=c(1,1, 1, 1, 1)))
ODE_fit=optim(par=par, fn=ssq_SEIR, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_CFR=mu_CFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, method="L-BFGS-B", lower=c(0, 0, 0, 0, 0), upper=c(1, 1, 1, 100, 1))
return(ODE_fit)
}
fit_to_SEIR(region=206, pop=10000000)
fit_to_SEIR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_CFR=0.01, pop){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
active_cases=cases_C-cases_R
S0=c(S=pop, E=0, L=0, I_1=0, I_2=active_cases[1], I_3=0, I_4=0, R_1=0, R_2=cases_R[1], F_=cases_F[1])
N=pop
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1, rho=0.8)
#ODE_fit=optim(par=par, fn=ssq_SEIR, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_CFR=mu_CFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, control=list(parscale=c(1,1, 1, 1, 1)))
ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_CFR=mu_CFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, method="L-BFGS-B", lower=c(0, 0, 0, 0, 0), upper=c(1, 1, 1, 100, 1))
return(ODE_fit)
}
fit_to_SEIR(region=206, pop=10000000)
library("zoo")
x=c(1, 3, 5, 3, 1)
rollmean(x, 3)
C_data=JHU_C_data
F_data=JHU_F_data
R_data=JHU_R_data
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
region=206
mu_CFR=0.01
pop=10000000
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
region_name=regions(C_data)[region]
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
cases_C
rollmean(cases_C, 5)
plot(c(1:length(cases_C)))
plot(c(1:length(cases_C)), cases_C)
plot(c(1:length(rollmean(cases_C))), rollmean(cases_C))
plot(c(1:length(rollmean(cases_C, 5))), rollmean(cases_C, 5))
plot(c(1:length(cases_F)), cases_F)
plot(c(1:length(rollmean(cases_F, 5))), rollmean(cases_F, 5))
plot(c(1:length(cases_R)), cases_R)
plot(c(1:length(rollmean(cases_R, 5))), rollmean(cases_R, 5))
plot(c(1:length(rollmean(cases_R, 6))), rollmean(cases_R, 6))
times
length(rollmean(cases_C, 5))
length(rollmean(times, 5))
length(times)
rollmean(times, 5)
fit_to_SEIR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_CFR=0.01, pop){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, 5)
times=rollmean(times, 5)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, 5)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
cases_R=rollmean(cases_R, 5)
active_cases=cases_C-cases_R
S0=c(S=pop, E=0, L=0, I_1=0, I_2=active_cases[1], I_3=0, I_4=0, R_1=0, R_2=cases_R[1], F_=cases_F[1])
N=pop
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1, rho=0.8)
#ODE_fit=optim(par=par, fn=ssq_SEIR, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_CFR=mu_CFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, control=list(parscale=c(1,1, 1, 1, 1)))
ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_CFR=mu_CFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, method="L-BFGS-B", lower=c(0, 0, 0, 0, 0), upper=c(1, 1, 1, 100, 1))
return(ODE_fit)
}
fit_to_SEIR(region=206, pop=10000000)
region=1
region_name=regions(C_data)[region]
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
plot(c(1:length(cases_R)), cases_R)
fit_to_SEIR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_CFR=0.01, pop){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, 5)
#times=rollmean(times, 5)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
# cases_F=rollmean(cases_F, 5)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
# cases_R=rollmean(cases_R, 5)
active_cases=cases_C-cases_R
S0=c(S=pop, E=0, L=0, I_1=0, I_2=active_cases[1], I_3=0, I_4=0, R_1=0, R_2=cases_R[1], F_=cases_F[1])
N=pop
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1, rho=0.8)
#ODE_fit=optim(par=par, fn=ssq_SEIR, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_CFR=mu_CFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, control=list(parscale=c(1,1, 1, 1, 1)))
ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_CFR=mu_CFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, method="L-BFGS-B", lower=c(0, 0, 0, 0, 0), upper=c(1, 1, 1, 100, 1))
return(ODE_fit)
}
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
plot(c(1:length(cases_C)), cases_C)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
plot(c(1:length(cases_F)), cases_F)
fit_to_SEIR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_CFR=0.01, pop){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
#cases_C=rollmean(cases_C, 5)
#times=rollmean(times, 5)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
# cases_F=rollmean(cases_F, 5)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
# cases_R=rollmean(cases_R, 5)
active_cases=cases_C-cases_R
S0=c(S=pop, E=0, L=0, I_1=0, I_2=active_cases[1], I_3=0, I_4=0, R_1=0, R_2=cases_R[1], F_=cases_F[1])
N=pop
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1, rho=0.8)
#ODE_fit=optim(par=par, fn=ssq_SEIR, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_CFR=mu_CFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, control=list(parscale=c(1,1, 1, 1, 1)))
ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_CFR=mu_CFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, method="L-BFGS-B", lower=c(0, 0, 0, 0, 0), upper=c(1, 1, 1, 100, 1))
return(ODE_fit)
}
fit_to_SEIR(region=1, pop=37000000)
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
phi
fit_tau_mu_CFR(1, JHU_C_data, JHU_F_data)
par=fit_tau_mu_CFR(1, JHU_C_data, JHU_F_data)
plot_shifted_scaled_cases(par, 1, JHU_C_data, JHU_F_data)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, 1)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .1)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .01)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, 1)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .1)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .01)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .05)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .01)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .06)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .08)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .1)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .5)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .05)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .04)
plot_cases_scaled(1, JHU_C_data, JHU_F_data, .03)
plot_cases_scaled(2, JHU_C_data, JHU_F_data, .03)
plot_cases_scaled(2, JHU_C_data, JHU_F_data, 1)
plot_cases_scaled(2, JHU_C_data, JHU_F_data, .1)
plot_cases_scaled(2, JHU_C_data, JHU_F_data, .01)
plot_cases_scaled(3, JHU_C_data, JHU_F_data, .01)
plot_cases_scaled(3, JHU_C_data, JHU_F_data, 1)
plot_cases_scaled(3, JHU_C_data, JHU_F_data, .1)
plot_cases_scaled(42, JHU_C_data, JHU_F_data, .1)
