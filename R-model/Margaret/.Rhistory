param
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1, a=1, rho=0.8)
par=c(beta_l=par[1], beta_1=par[2], beta_2=par[3], a=par[4], rho=par[5],
kappa=1/6, eta=1/12)
par
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1, a=1, rho=0.8)
par=c(par[1], par[2], par[3], par[4], par[5],
kappa=1/6, eta=1/12)
par
library("deSolve")
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("fit_datasets_F.R")
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
with(as.list(c(y, par)), {
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
dI_1=a*(1-1/phi[which(phi$times==t), 2])*kappa*L-eta*I_1
dI_2=a*(1/phi[which(phi$times==t), 2])*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ssq_SEIR=function(par, region, C_data, F_data, R_data, mu_CFR=1){
par=c(par[1], par[2], par[3], par[4], par[5],
kappa=1/6, eta=1/12)
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
phi$times=phi$times-tau
times=phi$times
start=times[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_R=as.integer(R_data[5:nrow(R_data), region])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
active_cases=cases_C-cases_R
pop=971395
S0=c(S=pop, L=0, I_1=(1-1/phi[1, 2])*active_cases[1], I_2=active_cases[1], R_1=(1-1/phi[1, 2])*cases_R[1], R_2=cases_R[1], F_=cases_F[1])
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
I_2=ode_soln[,"I_2"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
ssq=sum((active_cases-R_2)^2)+sum((cases_F-F_)^2)+sum((cases_R-R_2)^2)
return(ssq)
}
fit_to_SEIR=function(region, C_data, F_data, R_data, mu_CFR=1){
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1, a=1, rho=0.8)
fit=optim(par=par, fn=ssq_SEIR, region=region, C_data=C_data, F_data=F_data, R_data=R_data, mu_CFR=mu_CFR, control=list(parscale=c(1,1, 1, 1, 1)))
return(fit)
}
fit_to_SEIR(42, JHU_C_data, JHU_F_data, JHU_R_data, 0.005)
par
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1, a=1, rho=0.8)
par=c(par[1], par[2], par[3], par[4], par[5],
kappa=1/6, eta=1/12)
par
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
F_data=JHU_F_data
region=42
C_data=JHU_C_data
R_data=JHU_R_data
mu_CFR=0.005
par=c(par[1], par[2], par[3], par[4], par[5],
kappa=1/6, eta=1/12)
par
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
phi$times=phi$times-tau
times=phi$times
start=times[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_R=as.integer(R_data[5:nrow(R_data), region])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
active_cases=cases_C-cases_R
pop=971395
S0=c(S=pop, L=0, I_1=(1-1/phi[1, 2])*active_cases[1], I_2=active_cases[1], R_1=(1-1/phi[1, 2])*cases_R[1], R_2=cases_R[1], F_=cases_F[1])
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
ode_soln
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
with(as.list(c(y, par)), {
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
#dI_1=a*(1-1/phi[which(phi$times==t), 2])*kappa*L-eta*I_1
dI_1=0.5*a*kappa*L-eta*I_1
#dI_2=a*(1/phi[which(phi$times==t), 2])*kappa*L-eta*I_2
dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
ode_soln
phi
(1-1/phi[which(phi$times==t), 2])
[which(phi$times==t), 2]
which(phi$times==t), 2
which(phi$times==t)
t=118
which(phi$times==t)
(1-1/phi[which(phi$times==t), 2])
lm(phi$ratios~phi$times)
lm(phi$ratios~poly(phi$times, 4, raw=TRUE))
times
times2=seq(times[1], times[length(times)], 0.1)
fit=lm(phi$ratios~poly(phi$times, 4, raw=TRUE))
plot(times2, predict(fit, data.frame(x=times2)))
plot(phi$times, phi$ratios)
lines(times2, predict(fit, data.frame(x=times2)))
lines(times2, predict(fit, data.frame(phi$times=times2)))
lines(times2, predict(fit, data.frame(phi$times)))
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
fit
newdata=data.frame(times=times2)
predict(fit, newdata = newdata)
newY=predict(fit, newdata = newdata)
plot(times2, newY)
newdata=data.frame(times=100)
newY=predict(fit, newdata = newdata)
plot(times2, newY)
plot(100, newY)
newdata=data.frame(times=100.5)
newY=predict(fit, newdata = newdata)
plot(100.5, newY)
newY
predict(fit, 100)
predict(fit, c(100)
s;ld
predict(fit, c(100)
s
predict(fit, c(100))
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
#dI_1=a*(1-1/phi[which(phi$times==t), 2])*kappa*L-eta*I_1
dI_1=0.5*a*kappa*L-eta*I_1
#dI_2=a*(1/phi[which(phi$times==t), 2])*kappa*L-eta*I_2
dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
with(as.list(c(y, par)), {
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
#dI_1=a*(1-1/phi[which(phi$times==t), 2])*kappa*L-eta*I_1
dI_1=0.5*a*kappa*L-eta*I_1
#dI_2=a*(1/phi[which(phi$times==t), 2])*kappa*L-eta*I_2
dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
with(as.list(c(y, par, phi)), {
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
#dI_1=a*(1-1/phi[which(phi$times==t), 2])*kappa*L-eta*I_1
dI_1=0.5*a*kappa*L-eta*I_1
#dI_2=a*(1/phi[which(phi$times==t), 2])*kappa*L-eta*I_2
dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
ode_soln
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
with(as.list(c(y, par, phi)), {
phi=phi[which(phi$times==t), 2]
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
#dI_1=a*(1-1/phi[which(phi$times==t), 2])*kappa*L-eta*I_1
dI_1=0.5*a*kappa*L-eta*I_1
#dI_2=a*(1/phi[which(phi$times==t), 2])*kappa*L-eta*I_2
dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
ode_soln
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
with(as.list(c(y, par, phi)), {
phi=phi[which(phi$times==t), 2]
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
dI_1=a*(1-1/phi)*kappa*L-eta*I_1
#dI_1=0.5*a*kappa*L-eta*I_1
dI_2=a*(1/phi)*kappa*L-eta*I_2
#dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
ode_soln
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
with(as.list(c(y, par, phi)), {
phi=phi[which(phi$times==t), 2]
print(phi)
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
dI_1=a*(1-1/phi)*kappa*L-eta*I_1
#dI_1=0.5*a*kappa*L-eta*I_1
dI_2=a*(1/phi)*kappa*L-eta*I_2
#dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
phi
length(phi)
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
with(as.list(c(y, par, phi)), {
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
newdata=data.frame(time=t)
phi=predict(fit, newdata=newdata)
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
dI_1=a*(1-1/phi)*kappa*L-eta*I_1
#dI_1=0.5*a*kappa*L-eta*I_1
dI_2=a*(1/phi)*kappa*L-eta*I_2
#dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
with(as.list(c(y, par, phi)), {
print(t)
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
dI_1=a*(1-1/phi)*kappa*L-eta*I_1
#dI_1=0.5*a*kappa*L-eta*I_1
dI_2=a*(1/phi)*kappa*L-eta*I_2
#dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
with(as.list(c(y, par, phi)), {
print(t)
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
#dI_1=a*(1-1/phi)*kappa*L-eta*I_1
dI_1=0.5*a*kappa*L-eta*I_1
#dI_2=a*(1/phi)*kappa*L-eta*I_2
dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
with(as.list(c(y, par, phi)), {
print(length(t))
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
#dI_1=a*(1-1/phi)*kappa*L-eta*I_1
dI_1=0.5*a*kappa*L-eta*I_1
#dI_2=a*(1/phi)*kappa*L-eta*I_2
dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, fit){
with(as.list(c(y, par, fit)), {
newdata=data.frame(time=t)
phi=predict(fit, newdata=newdata)
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
dI_1=a*(1-1/phi)*kappa*L-eta*I_1
#dI_1=0.5*a*kappa*L-eta*I_1
dI_2=a*(1/phi)*kappa*L-eta*I_2
#dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, fit=fit)
fit
newdata
predict(fit, newdata=newdata)
predict(fit, newdata=newdata)[1]
predict(fit, newdata=newdata)*2
as.numeric(predict(fit, newdata=newdata))
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, fit){
with(as.list(c(y, par, fit)), {
newdata=data.frame(time=t)
phi=as.numeric(predict(fit, newdata=newdata))
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
dI_1=a*(1-1/phi)*kappa*L-eta*I_1
#dI_1=0.5*a*kappa*L-eta*I_1
dI_2=a*(1/phi)*kappa*L-eta*I_2
#dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, fit=fit)
newdata=data.frame(time=t)
phi=as.numeric(predict(fit, newdata=newdata))
t
newdata=data.frame(time=as.numeric(t))
phi=as.numeric(predict(fit, newdata=newdata))
newdata=data.frame(time=100.5)
phi=as.numeric(predict(fit, newdata=newdata))
newdata=data.frame(times=100)
newY=predict(fit, newdata = newdata)
newY
newdata=data.frame(times=as.numeric(t))
phi=as.numeric(predict(fit, newdata=newdata))
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, fit){
with(as.list(c(y, par, fit)), {
newdata=data.frame(times=as.numeric(t))
phi=as.numeric(predict(fit, newdata=newdata))
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
dI_1=a*(1-1/phi)*kappa*L-eta*I_1
#dI_1=0.5*a*kappa*L-eta*I_1
dI_2=a*(1/phi)*kappa*L-eta*I_2
#dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, fit=fit)
ode_soln
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, fit){
with(as.list(c(y, par, fit)), {
newdata=data.frame(times=as.numeric(t))
phi=as.numeric(predict(fit, newdata=newdata))
print(phi)
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
dI_1=a*(1-1/phi)*kappa*L-eta*I_1
#dI_1=0.5*a*kappa*L-eta*I_1
dI_2=a*(1/phi)*kappa*L-eta*I_2
#dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, fit=fit)
phi
phi
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
phi
library("deSolve")
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("fit_datasets_F.R")
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, fit){
with(as.list(c(y, par, fit)), {
newdata=data.frame(times=as.numeric(t))
phi=as.numeric(predict(fit, newdata=newdata))
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
dI_1=a*(1-1/phi)*kappa*L-eta*I_1
#dI_1=0.5*a*kappa*L-eta*I_1
dI_2=a*(1/phi)*kappa*L-eta*I_2
#dI_2=0.5*a*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
ssq_SEIR=function(par, region, C_data, F_data, R_data, mu_CFR=0.01){
par=c(par[1], par[2], par[3], par[4], par[5],
kappa=1/6, eta=1/12)
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
phi$times=phi$times-tau
times=phi$times
start=times[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_R=as.integer(R_data[5:nrow(R_data), region])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
active_cases=cases_C-cases_R
pop=971395
S0=c(S=pop, L=0, I_1=(1-1/phi[1, 2])*active_cases[1], I_2=active_cases[1], R_1=(1-1/phi[1, 2])*cases_R[1], R_2=cases_R[1], F_=cases_F[1])
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
I_2=ode_soln[,"I_2"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
ssq=sum((active_cases-R_2)^2)+sum((cases_F-F_)^2)+sum((cases_R-R_2)^2)
return(ssq)
}
fit_to_SEIR=function(region, C_data, F_data, R_data, mu_CFR=1){
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1, a=1, rho=0.8)
fit=optim(par=par, fn=ssq_SEIR, region=region, C_data=C_data, F_data=F_data, R_data=R_data, mu_CFR=mu_CFR, control=list(parscale=c(1,1, 1, 1, 1)))
return(fit)
}
fit_to_SEIR(42, JHU_C_data, JHU_F_data, JHU_R_data, mu_CFR=0.005)
ssq_SEIR=function(par, region, C_data, F_data, R_data, mu_CFR=0.01){
par=c(par[1], par[2], par[3], par[4], par[5],
kappa=1/6, eta=1/12)
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
phi$times=phi$times-tau
times=phi$times
start=times[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_R=as.integer(R_data[5:nrow(R_data), region])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
active_cases=cases_C-cases_R
pop=971395
S0=c(S=pop, L=0, I_1=(1-1/phi[1, 2])*active_cases[1], I_2=active_cases[1], R_1=(1-1/phi[1, 2])*cases_R[1], R_2=cases_R[1], F_=cases_F[1])
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, fit=fit)
I_2=ode_soln[,"I_2"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
ssq=sum((active_cases-R_2)^2)+sum((cases_F-F_)^2)+sum((cases_R-R_2)^2)
return(ssq)
}
fit_to_SEIR(42, JHU_C_data, JHU_F_data, JHU_R_data, mu_CFR=0.005)
par=c(beta_l=-111.480497, beta_1=-165.376313, beta_2=-162.459019, a=400.047045, rho01.31707)
par=c(beta_l=-111.480497, beta_1=-165.376313, beta_2=-162.459019, a=400.047045, rho=1.31707)
par=c(par[1], par[2], par[3], par[4], par[5],
kappa=1/6, eta=1/12)
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, fit=fit)
ode_soln
