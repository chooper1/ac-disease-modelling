cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(c(which(cases_C>0, arr.ind=TRUE), intervention))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
par=c(beta=0.38, mu_E=1/4, mu=1/5, p_pre_0=0.5, p_post=0.5)
ode_fit=optim(par=par, fn=ssq_SEIIAR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, pop=pop, mu_CFR=mu_CFR)
fit_par=ode_fit$par
return(fit_par)
}
fit_to_SEIIAR(117, pop=66990000, intervention=56)
ssq_SEIIAR=function(par, region, cases_C, cases_F, mu_IFR=0.01, phi, times, start, fit, pop, mu_CFR){
p_pre_0=par[4]
p_post_0=par[5]
names=c("beta", "mu_E", "mu", "p_pre_0", "p_post_0", "rho")
par=c(par[1], par[2], par[3], par[4], par[5], rho=1-mu_CFR)
names(par)=names
N=pop
S0=c(S=N, E=N*p_pre_0/2, I_1=N*p_pre_0/2, I_2=N*p_post_0/2, A=N*p_post_0/2, R_1=0, F_=cases_F[1], R_2=0)
print(S0)
ode_soln=ode(y=S0, times, func=rhs_SEIIAR, par=par, fit=fit, N=N, phi=phi)
I_2=ode_soln[,"I_2"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F"]
total_cases=I_2+R_2+F_
ssq=sum(sqrt((cases_C-(total_cases))^2))/mean(cases_C)+sum(sqrt((cases_F-F_)^2))/mean(cases_F)
return(ssq)
}
fit_to_SEIIAR(117, pop=66990000, intervention=56)
ssq_SEIIAR=function(par, region, cases_C, cases_F, mu_IFR=0.01, phi, times, start, fit, pop, mu_CFR){
p_pre_0=par[4]
p_post_0=par[5]
names=c("beta", "mu_E", "mu", "p_pre_0", "p_post_0", "rho")
par=c(par[1], par[2], par[3], par[4], par[5], rho=1-mu_CFR)
names(par)=names
N=pop
names=c("S", "E", "I_1", "I_2", "A", "R_1", "F_", "R_2")
S0=c(S=N, E=N*p_pre_0/2, I_1=N*p_pre_0/2, I_2=N*p_post_0/2, A=N*p_post_0/2, R_1=0, F_=cases_F[1], R_2=0)
names(S0)=names
print(S0)
ode_soln=ode(y=S0, times, func=rhs_SEIIAR, par=par, fit=fit, N=N, phi=phi)
I_2=ode_soln[,"I_2"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F"]
total_cases=I_2+R_2+F_
ssq=sum(sqrt((cases_C-(total_cases))^2))/mean(cases_C)+sum(sqrt((cases_F-F_)^2))/mean(cases_F)
return(ssq)
}
fit_to_SEIIAR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, pop, intervention=1){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
fit=lm(ratios~poly(times, 6, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(c(which(cases_C>0, arr.ind=TRUE), intervention))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
par=c(beta=0.38, mu_E=1/4, mu=1/5, p_pre_0=0.001, p_post=0.001)
ode_fit=optim(par=par, fn=ssq_SEIIAR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, pop=pop, mu_CFR=mu_CFR)
fit_par=ode_fit$par
return(fit_par)
}
fit_to_SEIIAR(117, pop=66990000, intervention=56)
ssq_SEIIAR=function(par, region, cases_C, cases_F, mu_IFR=0.01, phi, times, start, fit, pop, mu_CFR){
p_pre_0=par[4]
p_post_0=par[5]
names=c("beta", "mu_E", "mu", "p_pre_0", "p_post_0", "rho")
par=c(par[1], par[2], par[3], par[4], par[5], rho=1-mu_CFR)
names(par)=names
N=pop
names=c("S", "E", "I_1", "I_2", "A", "R_1", "F_", "R_2")
S0=c(S=N, E=N*p_pre_0/2, I_1=N*p_pre_0/2, I_2=N*p_post_0/2, A=N*p_post_0/2, R_1=0, F_=cases_F[1], R_2=0)
names(S0)=names
print(S0)
ode_soln=ode(y=S0, times, func=rhs_SEIIAR, par=par, fit=fit, N=N, phi=phi)
I_2=ode_soln[,"I_2"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
total_cases=I_2+R_2+F_
ssq=sum(sqrt((cases_C-(total_cases))^2))/mean(cases_C)+sum(sqrt((cases_F-F_)^2))/mean(cases_F)
return(ssq)
}
fit_to_SEIIAR(117, pop=66990000, intervention=56)
#returns the "underreporting ratio" vs time
phi_vs_time=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
par_C=c(r=2, p=1, alpha=1, K=10^floor(log10(cases_C[length(cases_C)])))
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
#use the fit instead of the data?
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=((1/mu_CFR)*F_df$y)/C_df$cases_C
df=data.frame(times, ratios)
return(df$ratios[length(df$ratios)])
}
phi_vs_time(countries_acadia)
#returns the "underreporting ratio" vs time
phi_vs_time=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
par_C=c(r=2, p=1, alpha=1, K=10^floor(log10(cases_C[length(cases_C)])))
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
#use the fit instead of the data?
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=((1/mu_CFR)*F_df$y)/C_df$cases_C
df=data.frame(times, ratios)
#return(df)
print(df$ratios[length(df$ratios)])
}
for(x in countries_acadia){phi_vs_time(countries_acadia)}
phi_vs_time(36)
#returns the "underreporting ratio" vs time
phi_vs_time=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
par_C=c(r=2, p=1, alpha=1, K=10^floor(log10(cases_C[length(cases_C)])))
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
#use the fit instead of the data?
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=((1/mu_CFR)*F_df$y)/C_df$cases_C
df=data.frame(times, ratios)
#return(df)
return(df$ratios[length(df$ratios)])
}
for(x in countries_acadia){print(phi_vs_time(x))}
#returns the "underreporting ratio" vs time
phi_vs_time=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
regions=regions(C_data)
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
par_C=c(r=2, p=1, alpha=1, K=10^floor(log10(cases_C[length(cases_C)])))
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
#use the fit instead of the data?
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=((1/mu_CFR)*F_df$y)/C_df$cases_C
df=data.frame(times, ratios)
#return(df)
print(regions[region])
return(df$ratios[length(df$ratios)])
}
for(x in countries_acadia){print(phi_vs_time(x))}
phi_vs_time(42)
View(JHU_F_data)
#returns the "underreporting ratio" vs time
phi_vs_time=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
regions=regions(C_data)
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
#par_C=c(r=2, p=1, alpha=1, K=10^floor(log10(cases_C[length(cases_C)])))
par_C=c(r=2, p=1, alpha=1, K=5000)
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
#use the fit instead of the data?
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=((1/mu_CFR)*F_df$y)/C_df$cases_C
df=data.frame(times, ratios)
#return(df)
print(regions[region])
return(df$ratios[length(df$ratios)])
}
phi_vs_time(42)
View(JHU_C_data)
#returns the "underreporting ratio" vs time
phi_vs_time=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
regions=regions(C_data)
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
print(10^floor(log10(cases_C[length(cases_C)])))
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
#par_C=c(r=2, p=1, alpha=1, K=10^floor(log10(cases_C[length(cases_C)])))
par_C=c(r=2, p=1, alpha=1, K=5000)
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
#use the fit instead of the data?
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=((1/mu_CFR)*F_df$y)/C_df$cases_C
df=data.frame(times, ratios)
#return(df)
print(regions[region])
return(df$ratios[length(df$ratios)])
}
phi_vs_time(42)
#returns the "underreporting ratio" vs time
phi_vs_time=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
regions=regions(C_data)
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
#par_C=c(r=2, p=1, alpha=1, K=10^floor(log10(cases_C[length(cases_C)])))
par_C=c(r=2, p=1, alpha=1, K=1000)
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
#use the fit instead of the data?
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=((1/mu_CFR)*F_df$y)/C_df$cases_C
df=data.frame(times, ratios)
#return(df)
print(regions[region])
return(df$ratios[length(df$ratios)])
}
phi_vs_time(42)
View(JHU_C_data)
#returns the "underreporting ratio" vs time
phi_vs_time=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
regions=regions(C_data)
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
#par_C=c(r=2, p=1, alpha=1, K=10^floor(log10(cases_C[length(cases_C)])))
par_C=c(r=2, p=1, alpha=1, K=107.1)
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
#use the fit instead of the data?
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=((1/mu_CFR)*F_df$y)/C_df$cases_C
df=data.frame(times, ratios)
#return(df)
print(regions[region])
return(df$ratios[length(df$ratios)])
}
phi_vs_time(42)
phi_vs_time(42)
#plots the shifted and scaled fitted curves to see how good the tau and mu_CFR fit is
#par is returned from fit_tau_mu_CFR
plot_shifted_scaled_cases=function(region, par=NULL, C_data=JHU_C_data, F_data=JHU_F_data){
if(is.null(par)==TRUE){
par=fit_tau_mu_CFR(region, C_data, F_data)
}
regions=regions(C_data)
tau=par[1]
factor=par[2]
#fits parameters to generate values for F
F_parest=fit_param_F(region, F_data)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#shift times for cumulative cases by tau
times_C=c(1:length(cases_C))+tau
#C_df=data.frame(times_C, cases_C)
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
#generates values for F from fit
F_df=generate_F(times_C, init, start, F_parest)
#generates values for C from fit
#par_C=c(r=2, p=1, alpha=1, K=10^floor(log10(cases_C[length(cases_C)])))
par_C=c(r=1, p=1, alpha=1, K=cases_C[length(cases_C)]/10)
C_df=generate_C(par_C, cases_C, times_C)
plot=ggplot(data=C_df, aes(x=times, y=cases_C*factor, color="red"))+geom_line()+geom_line(data=F_df, aes(x=times, y=y, color="green"))+geom_line()+theme(legend.position="none")+labs(title=regions[region])
print(plot)
}
plot_shifted_scaled_cases(42)
plot_shifted_scaled_cases(117)
#returns the "underreporting ratio" vs time
phi_vs_time=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01, final_size_guess=5000){
regions=regions(C_data)
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
#par_C=c(r=2, p=1, alpha=1, K=10^floor(log10(cases_C[length(cases_C)])))
par_C=c(r=1, p=1, alpha=1, K=final_size_guess)
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
#use the fit instead of the data?
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=((1/mu_CFR)*F_df$y)/C_df$cases_C
df=data.frame(times, ratios)
#return(df)
print(regions[region])
return(df$ratios[length(df$ratios)])
}
#plots the shifted and scaled fitted curves to see how good the tau and mu_CFR fit is
#par is returned from fit_tau_mu_CFR
plot_shifted_scaled_cases=function(region, par=NULL, C_data=JHU_C_data, F_data=JHU_F_data, final_size_guess=5000){
if(is.null(par)==TRUE){
par=fit_tau_mu_CFR(region, C_data, F_data)
}
regions=regions(C_data)
tau=par[1]
factor=par[2]
#fits parameters to generate values for F
F_parest=fit_param_F(region, F_data)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#shift times for cumulative cases by tau
times_C=c(1:length(cases_C))+tau
#C_df=data.frame(times_C, cases_C)
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
#generates values for F from fit
F_df=generate_F(times_C, init, start, F_parest)
#generates values for C from fit
#par_C=c(r=2, p=1, alpha=1, K=10^floor(log10(cases_C[length(cases_C)])))
#par_C=c(r=1, p=1, alpha=1, K=cases_C[length(cases_C)]/10)
par_C=c(r=1, p=1, alpha=1, K=final_size_guess)
C_df=generate_C(par_C, cases_C, times_C)
plot=ggplot(data=C_df, aes(x=times, y=cases_C*factor, color="red"))+geom_line()+geom_line(data=F_df, aes(x=times, y=y, color="green"))+geom_line()+theme(legend.position="none")+labs(title=regions[region])
print(plot)
}
plot_shifted_scaled_cases(122)
View(JHU_C_data)
phi_vs_time(122)
plot_shifted_scaled_cases(62)
plot_shifted_scaled_cases(62, final_size_guess = 3000)
plot_shifted_scaled_cases(62, final_size_guess = 300)
plot_shifted_scaled_cases(62, final_size_guess = 30)
plot_shifted_scaled_cases(138)
plot_shifted_scaled_cases(138, final_size_guess = 200000)
phi_vs_time(138, final_size_guess = 200000)
#returns average phi for a country
average_phi=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, final_size_guess=5000){
regions=regions(C_data)
df=phi_vs_time(region, C_data, F_data, mu_IFR, final_size_guess = final_size_guess)
average=mean(df$ratios)
print(regions[region])
return(average)
}
average_phi(138, final_size_guess = 200000)
#returns the "underreporting ratio" vs time
phi_vs_time=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01, final_size_guess=5000){
regions=regions(C_data)
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
#par_C=c(r=2, p=1, alpha=1, K=10^floor(log10(cases_C[length(cases_C)])))
par_C=c(r=1, p=1, alpha=1, K=final_size_guess)
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
#use the fit instead of the data?
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=((1/mu_CFR)*F_df$y)/C_df$cases_C
df=data.frame(times, ratios)
return(df)
print(regions[region])
# return(df$ratios[length(df$ratios)])
}
average_phi(138, final_size_guess = 200000)
plot_shifted_scaled_cases(143)
plot_shifted_scaled_cases(143, final_size_guess = 10000)
plot_shifted_scaled_cases(145)
phi_vs_time(145)
phi_vs_time(202)
plot_shifted_scaled_cases(202)
plot_shifted_scaled_cases(202, final_size_guess = 300000)
plot_shifted_scaled_cases(202, final_size_guess = 200000)
phi_vs_time(202, final_size_guess = 200000)
average_phi(202, final_size_guess = 200000)
plot_shifted_scaled_cases(224, final_size_guess = 200000)
phi_vs_time(224, final_size_guess = 200000)
average_phi(224, final_size_guess = 200000)
