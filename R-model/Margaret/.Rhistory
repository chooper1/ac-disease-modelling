tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
# regions_R=regions(R_data)
#index_R=which(regions_R==region_name, arr.ind=TRUE)
#cases_R=as.integer(R_data[5:nrow(R_data), index_R])
#cases_R=cases_R[!is.na(cases_R)]
#cases_R=c(cases_R[start:length(cases_R)])
#cases_R=rollmean(cases_R, roll_size)
#active_cases=cases_C-(cases_R+cases_F)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=cases_C[1], I_3=0, I_4=0, R_1=0, R_2=0, F_=cases_F[1])
N=pop
if(beta_type=="different"){
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1)
}
else if(beta_type=="equal"){
par=c(beta=0.38)
} else if(beta_type=="time-dep"){
#par=c(beta_b=0.38, beta_a=0.38, rho=0.55)
par=c(beta_b=0.38, beta_a=0.38)
}
#scale on parameters is different depending on how many pars there are - fix this!
#ODE_fit=optim(par=par, fn=ssq_SEIR, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, control=list(parscale=c(1,1, 1, 1, 1)))
ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, beta_type=beta_type, intervention=intervention, mu_CFR=mu_CFR, method="L-BFGS-B", lower=c(0, 0), upper=c(1, 1))
fit_par=ODE_fit$par
return(fit_par)
}
#compartment is "A" (active cases), "F" (deaths), or "R" (recovered)
#fit_param is output from fit_to_SEIR. If no parameters are passed, fit_to_SEIR will run
plot_SEIR_fit=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_IFR=0.01, pop, beta_type="time-dep",fit_par=NULL, compartment, roll_size=1, intervention=NULL){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type, roll_size=roll_size, intervention=intervention)
}
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
C_df=data.frame(times, cases_C)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
F_df=data.frame(times, cases_F)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
cases_R=rollmean(cases_R, roll_size)
#  R_df=data.frame(times, cases_R)
# active_cases=cases_C-(cases_R+cases_F)
#active_cases_df=data.frame(times, active_cases)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=cases_C[1], I_3=0, I_4=0, R_1=0, R_2=0, F_=cases_F[1])
N=pop
if(beta_type=="different"){
names=c("beta_l", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(fit_par[1], fit_par[2], fit_par[3], rho=1-mu_CFR, a=1,
kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names
} else if(beta_type=="equal"){
names=c("beta", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(fit_par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names
} else if(beta_type=="time-dep"){
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(fit_par[1], fit_par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names  }
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=fit_par, fit=fit, N=N, phi=phi, beta_type=beta_type, intervention=intervention)
I_2=ode_soln[,"I_2"]
I_4=ode_soln[,"I_4"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
sim_cases_C=I_2+I_4+R_2+F_
sim_C_df=data.frame(times, sim_cases_C)
sim_F_df=data.frame(times, F_)
sim_R_df=data.frame(times, R_2)
if(compartment=="C"){
plot=ggplot(data=C_df, aes(x=times, y=cases_C))+geom_point()+geom_line(data=sim_C_df, aes(x=times, y=sim_cases_C))+labs(title=region_name)
print(plot)
}
else if(compartment=="F"){
plot=ggplot(data=F_df, aes(x=times, y=cases_F))+geom_point()+geom_line(data=sim_F_df, aes(x=times, y=F_))+labs(title=region_name)
print(plot)
}
else if(compartment=="R"){
plot=ggplot(data=R_df, aes(x=times, y=cases_R))+geom_point()+geom_line(data=sim_R_df, aes(x=times, y=R_2))+labs(title=region_name)
print(plot)
}
}
R0=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, fit_par=NULL, beta_type="time-dep", intervention=NULL){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type, roll_size=roll_size, intervention=intervention)
}
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
phi=phi$ratios[1]
if(beta_type=="different"){
names=c("beta_l", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2", "phi")
fit_par=c(fit_par[1], fit_par[2], fit_par[3], rho=1-mu_CFR, a=1,
kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5, phi=phi)
names(fit_par)=names
} else if(beta_type=="equal"){
names=c("beta_l", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2", "phi")
fit_par=c(fit_par[1], fit_par[1], fit_par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5, phi=phi)
names(fit_par)=names
} else if(beta_type=="time-dep"){
names=c("beta_l", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2", "phi")
fit_par=c(fit_par[1], fit_par[1], fit_par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5, phi=phi)
names(fit_par)=names  }
with(as.list(fit_par), {
R0=beta_l/kappa+beta_2/(phi*mu_2)+(1-1/phi)*beta_1/(mu_2+eta)
list(R0)
})
}
#intervention is the number of the day when interventions started, starting from the beginning of the data in the datasets
fit_to_SEIR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_IFR=0.01, pop, beta_type="time-dep", roll_size=1, intervention=NULL){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
# regions_R=regions(R_data)
#index_R=which(regions_R==region_name, arr.ind=TRUE)
#cases_R=as.integer(R_data[5:nrow(R_data), index_R])
#cases_R=cases_R[!is.na(cases_R)]
#cases_R=c(cases_R[start:length(cases_R)])
#cases_R=rollmean(cases_R, roll_size)
#active_cases=cases_C-(cases_R+cases_F)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=cases_C[1], I_3=0, I_4=0, R_1=0, R_2=0, F_=cases_F[1])
N=pop
if(beta_type=="different"){
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1)
}
else if(beta_type=="equal"){
par=c(beta=0.38)
} else if(beta_type=="time-dep"){
#par=c(beta_b=0.38, beta_a=0.38, rho=0.55)
par=c(beta_b=0.38, beta_a=0.38)
}
#scale on parameters is different depending on how many pars there are - fix this!
#ODE_fit=optim(par=par, fn=ssq_SEIR, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, control=list(parscale=c(1,1, 1, 1, 1)))
# ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, beta_type=beta_type, intervention=intervention, mu_CFR=mu_CFR, method="L-BFGS-B", lower=c(0, 0), upper=c(1, 1))
ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, beta_type=beta_type, intervention=intervention, mu_CFR=mu_CFR, method="L-BFGS-B")
fit_par=ODE_fit$par
return(fit_par)
}
fit_France=fit_to_SEIR(region=117, pop=66990000, intervention=56)
fit_France
plot_SEIR_fit(region=117, pop=66990000, fit_par=fit_France, compartment="C", intervention=56)
plot_SEIR_fit(region=117, pop=66990000, fit_par=fit_France, compartment="F", intervention=56)
fit_Austria=fit_to_SEIR(region=17, pop=8859000, intervention=56)
#intervention is the number of the day when interventions started, starting from the beginning of the data in the datasets
fit_to_SEIR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_IFR=0.01, pop, beta_type="time-dep", roll_size=1, intervention=NULL){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
# regions_R=regions(R_data)
#index_R=which(regions_R==region_name, arr.ind=TRUE)
#cases_R=as.integer(R_data[5:nrow(R_data), index_R])
#cases_R=cases_R[!is.na(cases_R)]
#cases_R=c(cases_R[start:length(cases_R)])
#cases_R=rollmean(cases_R, roll_size)
#active_cases=cases_C-(cases_R+cases_F)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=cases_C[1], I_3=0, I_4=0, R_1=0, R_2=0, F_=cases_F[1])
N=pop
if(beta_type=="different"){
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1)
}
else if(beta_type=="equal"){
par=c(beta=0.38)
} else if(beta_type=="time-dep"){
#par=c(beta_b=0.38, beta_a=0.38, rho=0.55)
par=c(beta_b=0.38, beta_a=0.38)
}
#scale on parameters is different depending on how many pars there are - fix this!
#ODE_fit=optim(par=par, fn=ssq_SEIR, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, control=list(parscale=c(1,1, 1, 1, 1)))
# ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, beta_type=beta_type, intervention=intervention, mu_CFR=mu_CFR, method="L-BFGS-B", lower=c(0, 0), upper=c(1, 1))
ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, beta_type=beta_type, intervention=intervention, mu_CFR=mu_CFR)
fit_par=ODE_fit$par
return(fit_par)
}
fit_Austria=fit_to_SEIR(region=17, pop=8859000, intervention=56)
fit_Austria
plot_SEIR_fit(region=117, pop=66990000, fit_par=fit_Austria, compartment="C", intervention=56)
fit_Austria=fit_to_SEIR(region=17, pop=8859000, intervention=55)
fit_Austria
plot_SEIR_fit(region=17, pop=66990000, fit_par=fit_Austria, compartment="C", intervention=56)
plot_SEIR_fit(region=17, pop=66990000, fit_par=fit_Austria, compartment="F", intervention=56)
fit_France2=fit_to_SEIR(region=117, pop=66990000, intervention=56)
fit_France2
fit_France
plot_SEIR_fit(region=117, pop=66990000, fit_par=fit_France, compartment="C", intervention=56)
plot_SEIR_fit(region=117, pop=66990000, fit_par=fit_France, compartment="F", intervention=56)
fit_Austria2=c(beta_b=1.54031253, beta_a=0.08905769)
plot_SEIR_fit(region=17, pop=66990000, fit_par=fit_Austria2, compartment="C", intervention=56)
plot_SEIR_fit(region=17, pop=66990000, fit_par=fit_Austria2, compartment="F", intervention=56)
plot_SEIR_fit(region=17, pop=66990000, fit_par=fit_Austria, compartment="C", intervention=55)
plot_SEIR_fit(region=17, pop=66990000, fit_par=fit_Austria, compartment="F", intervention=55)
fit_Austria
R0(region=17, fit_par=fit_Austria, intervention=55)
R0=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, fit_par=NULL, beta_type="time-dep", intervention=NULL){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type, roll_size=roll_size, intervention=intervention)
}
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
mu_CFR=tau_mu_CFR[2]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
phi=phi$ratios[1]
if(beta_type=="different"){
names=c("beta_l", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2", "phi")
fit_par=c(fit_par[1], fit_par[2], fit_par[3], rho=1-mu_CFR, a=1,
kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5, phi=phi)
names(fit_par)=names
} else if(beta_type=="equal"){
names=c("beta_l", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2", "phi")
fit_par=c(fit_par[1], fit_par[1], fit_par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5, phi=phi)
names(fit_par)=names
} else if(beta_type=="time-dep"){
names=c("beta_l", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2", "phi")
fit_par=c(fit_par[1], fit_par[1], fit_par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5, phi=phi)
names(fit_par)=names  }
with(as.list(fit_par), {
R0=beta_l/kappa+beta_2/(phi*mu_2)+(1-1/phi)*beta_1/(mu_2+eta)
list(R0)
})
}
R0(region=17, fit_par=fit_Austria, intervention=55)
R0(region=117, fit_par=fit_France, intervention=56)
df=data.frame(NULL)
df
c1=c(1, 2)
c2=c(3, 4)
df2=data.frame(c1, c2)
df=cbind(df, df2)
df
total_infected_multiple_regions=function(C_data, F_data, mu_CFR=0.01){
#removes columns for countries with no cases
few_cases=c()
for(x in seq(1, ncol(data))){
cases=as.integer(data[5:nrow(data), x])
cases=cases[!is.na(cases)]
if(cases[length(cases)]<=10){
few_cases=append(few_cases, x)
}
}
data=subset(data, select=-c(few_cases))
#generates labels
regions=regions(data)
totals=c()
for(x in seq(1, ncol(C_data))){
print(x)
total=total_infected(region=x, C_data=C_data, F_data=F_data, mu_CFR=mu_CFR)
totals=append(totals, total)
print(total)
}
return(totals)
}
total_infected_multiple_regions(JHU_C_data, JHU_F_data)
ncol(JHU_C_data)
total_infected_multiple_regions=function(C_data, F_data, mu_CFR=0.01){
#removes columns for countries with no cases
few_cases=c()
for(x in seq(1, ncol(C_data))){
cases=as.integer(C_data[5:nrow(C_data), x])
cases=cases[!is.na(cases)]
if(cases[length(cases)]<=10){
few_cases=append(few_cases, x)
}
}
C_data=subset(C_data, select=-c(few_cases))
F_data=subset(F_data, select=-c(few_cases))
#generates labels
regions=regions(C_data)
totals=c()
for(x in seq(1, ncol(C_data))){
print(x)
total=total_infected(region=x, C_data=C_data, F_data=F_data, mu_CFR=mu_CFR)
totals=append(totals, total)
print(total)
}
return(totals)
}
total_infected_multiple_regions(JHU_C_data, JHU_F_data)
totals=total_infected_multiple_regions(JHU_C_data, JHU_F_data)
fit_tau_mu_CFR(5, JHU_C_data, JHU_F_data)
plot_cases_scaled(5, JHU_C_data, JHU_F_data, factor=1)
plot_cases_scaled(5, JHU_C_data, JHU_F_data)
total_infected_multiple_regions=function(C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
#removes columns for countries with no cases
few_cases=c()
for(x in seq(1, ncol(C_data))){
cases=as.integer(C_data[5:nrow(C_data), x])
cases=cases[!is.na(cases)]
if(cases[length(cases)]<=10){
few_cases=append(few_cases, x)
}
}
C_data=subset(C_data, select=-c(few_cases))
F_data=subset(F_data, select=-c(few_cases))
#generates labels
regions=regions(C_data)
totals=c()
for(x in seq(1, ncol(C_data))){
print(x)
total=total_infected(region=x, C_data=C_data, F_data=F_data, mu_CFR=mu_CFR)
totals=append(totals, total)
print(total)
}
return(totals)
}
total_infected(1)
#returns an estimate for total number of people infected in a region to date, accounting for underreporting
total_infected=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
regions=regions(C_data)
df=phi_vs_time(region, C_data, F_data, mu_CFR=mu_CFR)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
pre_start_cases=cases_C[start-1]
cases_C=c(cases_C[start:length(cases_C)])
new_cases=c(cases_C[1])
for(x in c(2:length(cases_C))){
new_case=cases_C[x]-cases_C[x-1]
new_cases=append(new_cases, new_case)
}
true_new_cases=new_cases*df$ratios
total_cases=sum(true_new_cases)+pre_start_cases
return(total_cases)
}
total_infected(1)
#returns an estimate for total number of people infected in a region to date, accounting for underreporting
total_infected=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
regions=regions(C_data)
df=phi_vs_time(region, C_data, F_data, mu_CFR=mu_CFR)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
pre_start_cases=cases_C[start-1]
cases_C=c(cases_C[start:length(cases_C)])
new_cases=c(cases_C[1])
for(x in c(2:length(cases_C))){
new_case=cases_C[x]-cases_C[x-1]
new_cases=append(new_cases, new_case)
}
true_new_cases=new_cases*df$ratios
total_cases=sum(true_new_cases)+pre_start_cases
print(regions[region])
return(total_cases)
}
total_infected(1)
total_infected(2)
total_infected(3)
total_infected(4)
total_infected(5)
#returns an estimate for total number of people infected in a region to date, accounting for underreporting
total_infected=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
regions=regions(C_data)
df=phi_vs_time(region, C_data, F_data, mu_CFR=mu_CFR)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
pre_start_cases=cases_C[start-1]
cases_C=c(cases_C[start:length(cases_C)])
new_cases=c(cases_C[1])
for(x in c(2:length(cases_C))){
new_case=cases_C[x]-cases_C[x-1]
new_cases=append(new_cases, new_case)
}
true_new_cases=new_cases*df$ratios
total_cases=sum(true_new_cases)+pre_start_cases
print(regions[region])
print(total_cases)
return(total_cases)
}
for(x in c(6:10)){}
for(x in c(6:10)){
total_infected(x)
}
plot_cases_scaled(7, JHU_C_data, JHU_F_data)
for(x in c(1:4)){}
#plots the shifted and scaled fitted curves to see how good the tau and mu_CFR fit is
#par is returned from fit_tau_mu_CFR
plot_shifted_scaled_cases=function(par=NULL, region, C_data=JHU_C_data, F_data=JHU_F_data){
if(is.null(par)==TRUE){
par=fit_tau_mu_CFR(region, C_data, F_data)
}
regions=regions(C_data)
tau=par[1]
factor=par[2]
#fits parameters to generate values for F
F_parest=fit_param_F(region, F_data)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#shift times for cumulative cases by tau
times_C=c(1:length(cases_C))+tau
#C_df=data.frame(times_C, cases_C)
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
#generates values for F from fit
F_df=generate_F(times_C, init, start, F_parest)
#generates values for C from fit
par_C=c(r=2, p=1, alpha=1, K=5000)
C_df=generate_C(par_C, cases_C, times_C)
plot=ggplot(data=C_df, aes(x=times, y=cases_C*factor, color="red"))+geom_line()+geom_line(data=F_df, aes(x=times, y=y, color="green"))+geom_line()+theme(legend.position="none")+labs(title=regions[region])
print(plot)
}
for(x in c(1:4)){
plot_shifted_scaled_cases(region=x)
}
plot_shifted_scaled_cases(6)
plot_shifted_scaled_cases(region=6)
plot_shifted_scaled_cases(region=7)
plot_cases_scaled(region=7, C_data=JHU_C_data, F_data=JHU_F_data)
plot_shifted_scaled_cases(region=8)
total_infected(8)
#returns an estimate for total number of people infected in a region to date, accounting for underreporting
total_infected=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
regions=regions(C_data)
df=phi_vs_time(region, C_data, F_data, mu_CFR=mu_CFR)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
pre_start_cases=cases_C[start-1]
cases_C=c(cases_C[start:length(cases_C)])
new_cases=c(cases_C[1])
for(x in c(2:length(cases_C))){
new_case=cases_C[x]-cases_C[x-1]
new_cases=append(new_cases, new_case)
}
true_new_cases=new_cases*df$ratios
total_cases=sum(true_new_cases)+pre_start_cases
print(regions[region])
return(total_cases)
}
plot_shifted_scaled_cases(region=9)
total_infected(9)
plot_shifted_scaled_cases(region=10)
total_infected(10)
plot_shifted_scaled_cases(region=11)
plot_shifted_scaled_cases(region=12)
total_infected(12)
