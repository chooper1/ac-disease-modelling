# for a given day, split the data into preclinical clinical and subclinical
# and call the nuove.infezioni() to generate the infections of the day
infezione_oggi<-function(oggi,casi,lambda,para.infezione,infettivita,omega.gt){
rownames(casi)<-seq(1,nrow(casi))
names(casi)<-c('doi','doo','doa','dod','dor','infector')
pgio<-nuove.infezioni(oggi,0,
infetti=rpois(1,
para.infezione$tasso.di.immigrazione.infetto),
para.infezione)
precli<-casi[!is.na(casi$doo) & casi$doi>(oggi-21) & casi$doo > oggi,]
if(dim(precli)[1]>0){
lambda0<-omega.gt[ceiling(oggi-precli$doi)]*
lambda*infettivita$preclinica
npre=nuove.infezioni(oggi,infettatore=as.numeric(rownames(precli)),
infetti=rpois(length(lambda0),lambda0),
para.infezione)
} else npre<-data.frame()
clinic<-casi[!is.na(casi$doa) & casi$doi>(oggi-21) &
casi$doa <= oggi & casi$dor >= oggi,]
if(dim(clinic)[1]>0){
lambda0<-omega.gt[ceiling(oggi-clinic$doi)]*
lambda*infettivita$clinica
ncli=nuove.infezioni(oggi,infettatore=as.numeric(rownames(clinic)),
infetti=rpois(length(lambda0),lambda0),
para.infezione)
}else ncli<-data.frame()
subcli<-casi[is.na(casi$doo) & casi$doi>(oggi-21) & casi$dor >= oggi,]
if(dim(subcli)[1]>0){
lambda0<-omega.gt[ceiling(oggi-subcli$doi)]*
lambda*infettivita$subclinica
nsub=nuove.infezioni(oggi,infettatore=as.numeric(rownames(subcli)),
infetti=rpois(length(lambda0),lambda0),
para.infezione)
} else nsub<-data.frame()
pgio<-rbind(pgio,npre,ncli,nsub)
return(pgio)
}
# main function for the branching random walk
camminata.casuale<-function(base.R0, punto.di.cambia, i0,
para.infezione,infettivita,
poppolazione=5.5e5, giorni.totali=210){
controllo<-base.R0/base.R0[1]
Ro<-base.R0[1]/(1-(1-infettivita$subclinica)
* para.infezione$probabilita.subclinica)
casi<-nuove.infezioni(0,0,i0,para.infezione)
names(casi)<-c('doi','doo','doa','dod','dor','infector')
omega.gt<-pweibull(seq(1, 21, 1),
shape = para.infezione$tempo.di.generazione['forma'],
scale = para.infezione$tempo.di.generazione['scala'])
omega.gt<-omega.gt-c(0,omega.gt[-21])
omega.gt<-omega.gt/sum(omega.gt)
for(oggi in seq(1,giorni.totali)){
n0.casi<-nrow(casi)
nuovi.casi<-infezione_oggi(oggi,casi,(1-n0.casi/poppolazione)*
Ro*intervento(oggi,controllo,punto.di.cambia),
para.infezione,infettivita,omega.gt)
casi<-rbind(casi,nuovi.casi)
}
return(casi)
}
per_giorno<-function(casi, giorni.totali=210){
names(casi)<-c('doi','doo','doa','dod','dor','infector')
modello<-matrix(0,nrow=giorni.totali+1,ncol=8)
# infected (deltaSI)
modello[,1]<-hist(casi$doi,breaks = seq(-1,giorni.totali),
plot = FALSE)$count
# preclinical (deltaSP)
modello[,2]<-hist(casi$doi[!is.na(casi$doo)],breaks = seq(-1,giorni.totali),
plot = FALSE)$count
# subclinical (deltaSS)
modello[,3]<-hist(casi$doi[is.na(casi$doo)],breaks = seq(-1,giorni.totali),
plot = FALSE)$count
# clinical (deltaPC)
modello[,4]<-hist(casi$doo[!is.na(casi$doo) & casi$doo <= giorni.totali],
breaks = seq(-1,giorni.totali), plot = FALSE)$count
# admitted to hospital (deltaCH)
modello[,5]<-hist(casi$doa[!is.na(casi$doa) & casi$doa <= giorni.totali],
breaks = seq(-1,giorni.totali), plot = FALSE)$count
# dismissed from hospital (deltaHC)
modello[,6]<-hist(casi$dod[!is.na(casi$doa) & casi$dod <= giorni.totali],
breaks = seq(-1,giorni.totali), plot = FALSE)$count
# clinical recovered (deltaCR) collects both 'accute' and 'nonaccute'
modello[,7]<-hist(casi$dor[!is.na(casi$doo) & casi$dor <= giorni.totali],
breaks = seq(-1,giorni.totali), plot = FALSE)$count
# subclinical recovered (deltaSR)
modello[,8]<-hist(casi$dor[is.na(casi$doo) & casi$dor <= giorni.totali],
breaks = seq(-1,giorni.totali), plot = FALSE)$count
modello<-as.data.frame(modello)
names(modello)<-c('deltaSI','deltaSP','deltaSS','deltaPC',
'deltaCH','deltaHC','deltaCR','deltaSR')
return(modello)
}
branching.3ihr<-function(cases.per.day, total.days){
sir<-data.frame(C=cumsum(cases.per.day$deltaSI),
I=cumsum(cases.per.day$deltaSI-cases.per.day$deltaCR
- cases.per.day$deltaSR),
Is=cumsum(cases.per.day$deltaSS-cases.per.day$deltaSR),
Ip=cumsum(cases.per.day$deltaSP-cases.per.day$deltaPC),
Ic=cumsum(cases.per.day$deltaPC-cases.per.day$deltaCR),
H=cumsum(cases.per.day$deltaCH-cases.per.day$deltaHC),
R=cumsum(cases.per.day$deltaCR+cases.per.day$deltaSR))
return(sir)
}
facciamolo<-function(R0,changepoint,i0,
para.infezione,infettivita,
population.size=5.5e5, Days=210,
Runs=100,ymax=150){
time<-seq(0,Days)
plot(c(0,Days),c(0,ymax),col='blue',xlab='day',
ylab='count',type='n',xlim=c(0,Days),ylim=c(0,ymax))
oi1<-rep(0,Days)
oc1<-rep(0,Days)
os1<-rep(0,Days)
op1<-rep(0,Days)
oh1<-rep(0,Days)
or1<-rep(0,Days)
for(i in 1:Runs){
cases<-camminata.casuale(base.R0=R0,
punto.di.cambia=changepoint, i0=i0,
para.infezione=para.infezione,
infettivita=infettivita,
poppolazione=population.size, giorni.totali=Days)
cases.per.day<-per_giorno(cases, giorni.totali=Days)
risultato<-branching.3ihr(cases.per.day, total.days=Days)
lines(time,risultato$C,col='pink')
lines(time,risultato$Ip,col='green')
lines(time,risultato$Ic,col='blue1')
lines(time,risultato$Is,col='grey')
lines(time,risultato$H,col='red')
oc1<-oc1+risultato$C
op1<-op1+risultato$Ip
oi1<-oi1+risultato$Ic
os1<-os1+risultato$Is
oh1<-oh1+risultato$H
or1<-or1+risultato$Rs
}
or1<-(oc1-or1-os1)/Runs
oi1<-oi1/Runs
oc1<-oc1/Runs
os1<-os1/Runs
oh1<-oh1/Runs
op1<-op1/Runs
lines(time,oc1,col='magenta',lwd=2)
lines(time,op1,col='green4',lwd=2)
lines(time,oi1,col='blue4',lwd=2)
lines(time,os1,col='grey4',lwd=2)
lines(time,oh1,col='red',lwd=2)
#lines(1:length(nl0),nl0,col='brown')
#points(1:length(nl0),nl0)
#lines(1:length(nl0),active0,)
#points(1:length(nl0),active0,col='brown')
lines(time,or1)
}
#=================================================================
#
cases<-camminata.casuale(base.R0=c(3.6,0.5,1.6,0.5),
punto.di.cambia=c(1,15,60,120), i0=4,
para.infezione,infettivita,
poppolazione=5.5e5, giorni.totali=210)
cases.per.day<-per_giorno(cases, giorni.totali=210)
branching.3ihr(cases.per.day, total.days=210)
png(filename='terranova0.png',width=800,height=640)
facciamolo(R0=c(4.6,0.5,1.6,0.5),changepoint=c(1,15,60,120),i0=4,
para.infezione,infettivita,
population.size=5.5e5, Days=210,
Runs=100,ymax=150)
legend(120,120,c('cumulative','preclinical','clinical','subclinical','hospitalised','reported'),lty=1,lwd=2,col=c('magenta','green4','blue4','grey4','red','black'))
dev.off()
png(filename='terranova0.png',width=800,height=640)
View(cases)
facciamolo(R0=c(4.6,0.5,1.6,0.5),changepoint=c(1,15,60,120),i0=4,
para.infezione,infettivita,
population.size=5.5e5, Days=210,
Runs=100,ymax=150)
cases
View(cases.per.day)
branching.3ihr(cases.per.day, total.days=210)
facciamolo(R0=c(4.6,0.5,1.6,0.5),changepoint=c(1,15,60,120),i0=4,
para.infezione,infettivita,
population.size=5.5e5, Days=210,
Runs=100,ymax=150)
R0=c(4.6,0.5,1.6,0.5)
changepoint=c(1,15,60,120)
i0=4
population.size=5.5e5
Days=210
Runs=100
ymax=150
time<-seq(0,Days)
time
plot(c(0,Days),c(0,ymax),col='blue',xlab='day',
ylab='count',type='n',xlim=c(0,Days),ylim=c(0,ymax))
plot(c(0,Days),c(0,ymax),col='blue',xlab='day',
ylab='count',type='n',xlim=c(0,Days),ylim=c(0,ymax))
c(0, days)
c(0, Days)
c(0, ymax)
plot(c(0, Days), c(0, ymax))
plot(c(1, 2, 3, 4, 5), c(3, 4, 5, 6, 7))
plot(c(1, 2, 3, 4, 5), c(3, 4, 5, 6, 7), type="p")
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting_F.R")
#read data from JHU
JHU_F_data <- read.csv("JHU_data/time_series_covid19_deaths_global.csv")
JHU_F_data<-t(JHU_F_data)
JHU_C_data<-read.csv("JHU_data/time_series_covid19_confirmed_global.csv")
JHU_C_data<-t(JHU_C_data)
#generates a vector of region labels for the estimates (JHU data)
regions=function(data){
regions=c()
for(x in seq(1, ncol(data))){
#combines label from first and second row (region and country)
regions=append(regions, paste(data[1, x], data[2, x]))
}
return(regions)
}
#fits r_tilde, p, alpha, and K_tilde for a given region
fit_param_F=function(region, data){
#format case data for a given region
cases=as.integer(data[5:nrow(data), region])
cases=cases[!is.na(cases)]
#discards data for days before initial outbreak
start=min(which(cases>0, arr.ind=TRUE))
cases=c(cases[start:length(cases)])
#starting guess for parameters
par=c(r_tilde=2, p=1, alpha=1, K_tilde=cases[length(cases)])
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10^floor(log10(cases[length(cases)])))))
parest=fit$par
return(parest)
}
fit_multiple_F=function(data){
#removes columns for countries with no cases
few_cases=c()
for(x in seq(1, ncol(data))){
cases=as.integer(data[5:nrow(data), x])
cases=cases[!is.na(cases)]
if(cases[length(cases)]<=10){
few_cases=append(few_cases, x)
}
}
data=subset(data, select=-c(few_cases))
#generates labels
regions=regions(data)
#performs the fit for the first element in the dataframe (assumption: the dataframe has at least 2 columns)
paramdf=data.frame(fit_param_F(1, data))
colnames(paramdf)=c(regions[1])
#performs the fit for the rest of the regions, adds results to the dataframe
#if all the data were working, the loop would be for seq(2, ncol(data))
for(x in seq(2, ncol(data))){
print(x)
p=data.frame(fit_param_F(x, data))
colnames(p)=c(regions[x])
paramdf=cbind(paramdf, p)
print(p)
}
return(paramdf)
}
fit_tau_mu_CFR=function(region, C_data, F_data){
#estimates paramters for fatality data (discarding days before outbreak)
F_parest=fit_param_F(region, F_data)
#F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
#format case data for a given region
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
#format fatality data for a given region
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#use this if just fitting tau
#par=c(tau=20)
# fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, method="Brent", lower=-30, upper=30)
#for fitting tau and mu_CFR
par=c(tau=20, mu_CFR=0.05)
fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, control=list(parscale=c(1,.5)))
parest=fit$par
return(parest)
}
#plots the unfitted case data scaled down to visualize the curves in comparison to one another
plot_cases_scaled=function(region, C_data, F_data, factor=0.05){
regions=regions(C_data)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
times=c(1:length(cases_C))
C_df=data.frame(times, cases_C)
F_df=data.frame(times, cases_F)
plot=ggplot(data=C_df, aes(x=times, y=cases_C*factor, color="green"))+geom_line()+geom_line(data=F_df, aes(x=times, y=cases_F, color="red"))+theme(legend.position="none")+labs(title=regions[region])
print(plot)
}
#plots the shifted and scaled fitted curves to see how good the tau and mu_CFR fit is
#par is returned from fit_tau_mu_CFR
plot_shifted_scaled_cases=function(par, region, C_data, F_data){
regions=regions(C_data)
tau=par[1]
factor=par[2]
#fits parameters to generate values for F
F_parest=fit_param_F(region, F_data)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#shift times for cumulative cases by tau
times_C=c(1:length(cases_C))+tau
#C_df=data.frame(times_C, cases_C)
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
#generates values for F from fit
F_df=generate_F(times_C, init, start, F_parest)
#generates values for C from fit
par_C=c(r=2, p=1, alpha=1, K=5000)
C_df=generate_C(par_C, cases_C, times_C)
plot=ggplot(data=C_df, aes(x=times, y=cases_C*factor, color="red"))+geom_line()+geom_line(data=F_df, aes(x=times, y=y, color="green"))+geom_line()+theme(legend.position="none")+labs(title=regions[region])
print(plot)
}
#for this function, factor is the estimate for mu_CFR returned from fit_tau_mu_CFR, and mu_CFR is a sequence of guesses for the true mu_CFR
#function plots the proportion of cases reported vs. actual mu_CFR
plot_underreporting_vs_mu_CFR=function(factor, mu_CFR, region, C_data, F_data){
regions=regions(C_data)
ratios=c()
for(x in mu_CFR){
ratio=x/factor
ratios=append(ratios, ratio)
}
df=data.frame(mu_CFR, ratios)
#print(ratios[1])
#print(ratios[length(ratios)])
plot=ggplot(data=df, aes(x=mu_CFR, y=ratios))+geom_line()+ labs(title=regions[region])
print(plot)
}
#returns the "underreporting ratio" vs time
#If no mu_CFR is specified, it just returns the ratio between the case and fatality curves
phi_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
par_C=c(r=2, p=1, alpha=1, K=5000)
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=((1/mu_CFR)*F_df$y)/C_df$cases_C
df=data.frame(times, ratios)
return(df)
}
#plots the ratios calculated in ratios_vs_time()
plot_phi_vs_time=function(region, C_data, F_data, mu_CFR=1){
regions=regions(C_data)
df=phi_vs_time(region, C_data, F_data, mu_CFR=mu_CFR)
plot=ggplot(data=df, aes(x=times, y=ratios))+geom_line()+labs(title=regions[region])+theme(legend.position="none")
print(plot)
}
plot_phi_vs_time(42, JHU_C_data, JHU_F_data, 0.005)
phi=phi_vs_time(206, JHU_C_data, JHU_F_data, 0.005)
View(phi)
par=fit_tau_mu_CFR(206, JHU_C_data, JHU_F_data)
par
phi$times=phi$times-par[1]
phi
cases_C=as.integer(JHU_C_data[5:nrow(JHU_C_data), 206])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(JHU_F_data[5:nrow(JHU_F_data), 206])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
min(which(cases_C>0, arr.ind=TRUE))
min(which(cases_F>0, arr.ind=TRUE))
View(JHU_F_data)
cases_F[1]
cases_F[49]
cases_F[50]
phi$times
phi$times[1]
library("ggplot2")
#set this to your working directory
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
#source file
source("SEIAR_Teismann.R")
#read in parameter values
paramset<-read.csv("params_Teismann.csv")
#initial states
S0<-c(S=1000, E=0, B=0, A=0, I_p=20, I_m=0, J=0, H=0, F=0, Q_m=0, Q_J=0, R=0)
#choose parameter set
param=paramset[1, 2:17]
#control reproduction number, when control measures are in place
Rc=with(param, (mu_E/(mu_E+kappa))*((beta_p/(mu_1+kappa))+(phi*mu_1+beta_m)/((mu_1+kappa)*(mu_2+lambda))+((1-phi)*mu_1*beta_A)/((mu_1+kappa)*(mu_A+lambda))))
Rc
#final time for SSA
tf<-60
#output times for ODE solver
times<-seq(0, tf, by=0.01)
res_ode<-ode(y=S0, times, func=rhs, param)
res_ode
res_ode[,"I_m"]
a=c(1, 2, -3)
a^2
phi
phi[1]
phi[1,]
phi[,1]
phi["50"]
phi[1, 1]
phi[1, 2]
phi[50, 2]
t=51
which(phi$times=t, arr.ind=TRUE)
which(phi$times==t, arr.ind=TRUE)
which(phi$times==t)
source("fit_datasets_F.R")
phi[1, 2]
library("deSolve")
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("fit_datasets_F.R")
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
dI_1=a*(1-1/phi[which(phi$times==t), 2])*kappa*L-eta*I_1
dI_2=a*(1/phi[which(phi$times==t), 2])*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
}
ssq_SEIR=function(par, region, C_data, F_data, R_data, mu_CFR=1){
par=c(beta_l=par[1], beta_1=par[2], beta_2=par[3], a=par[4], rho=par[5])
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
phi$times=phi$times-tau
times=phi$times
start=times[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_R=as.integer(R_data[5:nrow(R_data), region])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
active_cases=cases_C-cases_R
pop=971395
s0=c(S=pop, L=0, I_1=(1-1/phi[1, 2])*active_cases[1], I_2=active_cases[1], R_1=(1-1/phi[1, 2])*cases_R[1], R_2=cases_R[1], F_=cases_F[1])
ode_soln=ode(y=S0, times, func=rhs_SEIR, par)
I_2=ode_soln[,"I_2"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
ssq=sum((active_cases-R_2)^2)+sum((cases_F-F_)^2)+sum((cases_R-R_2)^2)
return(ssq)
}
fit_to_SEIR=function(region, C_data, F_data, R_data, mu_CFR=1){
par=c(beta_L=0.1, beta_1=0.1, beta_2=0.1, a=1, rho=0.8)
fit=optim(par=par, fn=ssq_SEIR, region=region, C_data=C_data, F_data=F_data, R_data=R_data, mu_CFR=mu_CFR, control=list(parscale=c(1,1, 1, 1, 1)))
}
fit_to_SEIR(42, JHU_C_data, JHU_F_data, JHU_R_data, mu_CFR=0.005)
#need to find a better way to find phi(t)
rhs_SEIR=function(t, y, par, phi){
with(as.list(c(y, par)), {
dS=-(1/(S+L+I_1+I_2+R_1+R_2))*S*(beta_l*L+beta_1*I_1+beta_2*I_2)
dL=(1/(S+L+I_1+I_2+R_1+R_2))*S-a*kappa*L
dI_1=a*(1-1/phi[which(phi$times==t), 2])*kappa*L-eta*I_1
dI_2=a*(1/phi[which(phi$times==t), 2])*kappa*L-eta*I_2
dR_1=eta*I_1
dR_2=eta*I_2
dF=eta*(1-rho)*I_2
list(c(dS, dL, dI_1, dI_2, dR_1, dR_2, dF))
})
}
fit_to_SEIR(42, JHU_C_data, JHU_F_data, JHU_R_data, mu_CFR=0.005)
ssq_SEIR=function(par, region, C_data, F_data, R_data, mu_CFR=1){
par=c(beta_l=par[1], beta_1=par[2], beta_2=par[3], a=par[4], rho=par[5])
phi=phi_vs_time(region, C_data, F_data, mu_CFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
phi$times=phi$times-tau
times=phi$times
start=times[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_R=as.integer(R_data[5:nrow(R_data), region])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
active_cases=cases_C-cases_R
pop=971395
s0=c(S=pop, L=0, I_1=(1-1/phi[1, 2])*active_cases[1], I_2=active_cases[1], R_1=(1-1/phi[1, 2])*cases_R[1], R_2=cases_R[1], F_=cases_F[1])
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, phi=phi)
I_2=ode_soln[,"I_2"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
ssq=sum((active_cases-R_2)^2)+sum((cases_F-F_)^2)+sum((cases_R-R_2)^2)
return(ssq)
}
fit_to_SEIR(42, JHU_C_data, JHU_F_data, JHU_R_data, mu_CFR=0.005)
