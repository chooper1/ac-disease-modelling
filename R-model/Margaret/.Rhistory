return(ssqr)
}
#starting guess for parameters
par=c(r=1.94, p=0.45)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
seq(1.5, 3.5, 1)
a=seq(1.5, 3.5, 1)
a=append(a, 1, after=0)
a
b=c(rep(0, 4))
b
df=data.frame(a, c)
df=data.frame(a, b)
df
df=df[-1,]
df
times=c(seq(1.5, 20.5, 1))
cases_F=NScases
start=5
init=1
F_parest=c(2.645, 1.674, 1, 1268)
#cases_F has already had zero entries stripped, start reminds us of how many zero entries there were before
#times are the times at which we want to generate our curve, so times-tau
generate_F=function(times, init, start, F_parest){
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
y=c()
times2=c()
for(x in times){
if(x<start){
y=append(y, 0)
}
else{
times2=append(times2, x)
}
}
times2=times2-start+1
times2=append(times2, 1, after=0)
F_out=ode(y=init, times=times2, func=F_rate, parms=F_parest)
F_df=data.frame(F_out)
colnames(F_df)=c("t", "pred_F")
F_df=F_df[-1,]
y=c(y, F_df$pred_F)
new_df=data.frame(times, y)
return(new_df)
}
generate_F(times, init, start, F_parest)
#load libraries
library(deSolve)
generate_F(times, init, start, F_parest)
#define the ODE
F_rate=function(t, F_, par){
#parameters (alpha and K set)
r_tilde=par[1]
p=par[2]
alpha=par[3]
K_tilde=par[4]
#F is total fatalities
dF_=r_tilde*F_^p*(1-(F_/K_tilde)^alpha)
return(list(dF_))
}
generate_F(times, init, start, F_parest)
#cases_F has already had zero entries stripped, start reminds us of how many zero entries there were before
#times are the times at which we want to generate our curve, so times-tau
generate_F=function(times, init, start, F_parest){
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
y=c()
times2=c()
for(x in times){
if(x<start){
y=append(y, 0)
}
else{
times2=append(times2, x)
}
}
times2=times2-start+1
times2=append(times2, 1, after=0)
F_out=ode(y=init, times=times2, func=F_rate, parms=F_parest)
F_df=data.frame(F_out)
colnames(F_df)=c("t", "pred_F")
print(F_df[-1,])
F_df=F_df[-1,]
y=c(y, F_df$pred_F)
new_df=data.frame(times, y)
return(new_df)
}
#define the ODE
F_rate=function(t, F_, par){
#parameters (alpha and K set)
r_tilde=par[1]
p=par[2]
alpha=par[3]
K_tilde=par[4]
#F is total fatalities
dF_=r_tilde*F_^p*(1-(F_/K_tilde)^alpha)
return(list(dF_))
}
#cases_F has already had zero entries stripped, start reminds us of how many zero entries there were before
#times are the times at which we want to generate our curve, so times-tau
generate_F=function(times, init, start, F_parest){
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
y=c()
times2=c()
for(x in times){
if(x<start){
y=append(y, 0)
}
else{
times2=append(times2, x)
}
}
times2=times2-start+1
times2=append(times2, 1, after=0)
F_out=ode(y=init, times=times2, func=F_rate, parms=F_parest)
F_df=data.frame(F_out)
colnames(F_df)=c("t", "pred_F")
print(F_df[-1,])
F_df=F_df[-1,]
y=c(y, F_df$pred_F)
new_df=data.frame(times, y)
return(new_df)
}
generate_F(times, init, start, F_parest)
#cases_F has already had zero entries stripped, start reminds us of how many zero entries there were before
#times are the times at which we want to generate our curve, so times-tau
generate_F=function(times, init, start, F_parest){
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
y=c()
times2=c()
for(x in times){
if(x<start){
y=append(y, 0)
}
else{
times2=append(times2, x)
}
}
times2=times2-start+1
times2=append(times2, 1, after=0)
F_out=ode(y=init, times=times2, func=F_rate, parms=F_parest)
F_df=data.frame(F_out)
colnames(F_df)=c("t", "pred_F")
print(F_df[1,])
F_df=F_df[-1,]
y=c(y, F_df$pred_F)
new_df=data.frame(times, y)
return(new_df)
}
generate_F(times, init, start, F_parest)
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting_F.R")
#read data from JHU
JHU_F_data <- read.csv("JHU_data/time_series_covid19_deaths_global.csv")
JHU_F_data<-t(JHU_F_data)
JHU_C_data<-read.csv("JHU_data/time_series_covid19_confirmed_global.csv")
JHU_C_data<-t(JHU_C_data)
#format case data for a given region
cases=as.integer(JHU_F_data[5:nrow(JHU_F_data), 99])
cases=cases[!is.na(cases)]
#discards data for days before initial outbreak
start=min(which(cases>0, arr.ind=TRUE))
cases=c(cases[start:length(cases)])
#starting guess for parameters
par=c(r_tilde=2, p=1, alpha=1, K_tilde=cases[length(cases)])
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10)))
parest=fit$par
init=c(cases[1])
t=c(1:length(cases))
df=data.frame(t, cases)
times1=seq(min(t), max(t))
out1=ode(y=init, times=times1, func=F_rate, parms=parest)
outdf1=data.frame(out1)
colnames(outdf1)=c("t", "pred")
times2=seq(min(t)+.5, max(t)+.5, 1)
out2=ode(y=init, times=times2, func=F_rate, parms=parest)
outdf2=data.frame(out2)
colnames(outdf2)=c("t", "pred")
plot=ggplot(data=outdf1, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=outdf2, aes(x=t, y=pred, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
times2=seq(min(t)+5, max(t)+5, 1)
out2=ode(y=init, times=times2, func=F_rate, parms=parest)
outdf2=data.frame(out2)
colnames(outdf2)=c("t", "pred")
plot=ggplot(data=outdf1, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=outdf2, aes(x=t, y=pred, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
times2=seq(min(t), max(t), 1)
out2=ode(y=init, times=times2, func=F_rate, parms=parest)
outdf2=data.frame(out2)
colnames(outdf2)=c("t", "pred")
plot=ggplot(data=outdf1, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=outdf2, aes(x=t, y=pred, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
times2=seq(min(t)+7, max(t)+7, 1)
out2=ode(y=init, times=times2, func=F_rate, parms=parest)
outdf2=data.frame(out2)
colnames(outdf2)=c("t", "pred")
plot=ggplot(data=outdf1, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=outdf2, aes(x=t, y=pred, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
times2=c(1, seq(min(t)+7, max(t)+7, 1))
out2=ode(y=init, times=times2, func=F_rate, parms=parest)
outdf2=data.frame(out2)
colnames(outdf2)=c("t", "pred")
plot=ggplot(data=outdf1, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=outdf2, aes(x=t, y=pred, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
#format case data for a given region
cases=as.integer(JHU_F_data[5:nrow(JHU_F_data), 99])
cases=cases[!is.na(cases)]
#discards data for days before initial outbreak
start=min(which(cases>0, arr.ind=TRUE))
cases=c(cases[start:length(cases)])
f_gen=generate_F(times2, 1, 47, parest)
plot=ggplot(data=outdf1, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=outdf2, aes(x=t, y=pred, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
f_gen
#format case data for a given region
cases=as.integer(JHU_F_data[5:nrow(JHU_F_data), 99])
cases=cases[!is.na(cases)]
t=c(1:length(cases))
df=data.frame(t, cases)
f_gen=generate_F(times2, 1, 47, parest)
plot=ggplot(data=f_gen, aes(x=times, y=y, color="red"))+geom_line()+geom_point(data=f_gen, aes(x=times, y=y, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
plot=ggplot(data=f_gen, aes(x=times, y=y, color="red"))+geom_line()+geom_point(data=df, aes(x=t, y=cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
plot=ggplot(data=df, aes(x=t, y=cases, color="red"))+geom_line()+geom_point(data=f_gen, aes(x=times, y=y, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting_F.R")
#read data from JHU
JHU_F_data <- read.csv("JHU_data/time_series_covid19_deaths_global.csv")
JHU_F_data<-t(JHU_F_data)
JHU_C_data<-read.csv("JHU_data/time_series_covid19_confirmed_global.csv")
JHU_C_data<-t(JHU_C_data)
#generates a vector of region labels for the estimates (JHU data)
regions=function(data){
regions=c()
for(x in seq(1, ncol(data))){
#combines label from first and second row (region and country)
regions=append(regions, paste(data[1, x], data[2, x]))
}
return(regions)
}
#fits r, p, alpha, and K for a given region
fit_param_F=function(region, data){
#format case data for a given region
cases=as.integer(data[5:nrow(data), region])
cases=cases[!is.na(cases)]
#discards data for days before initial outbreak
start=min(which(cases>0, arr.ind=TRUE))
cases=c(cases[start:length(cases)])
#starting guess for parameters
par=c(r_tilde=2, p=1, alpha=1, K_tilde=cases[length(cases)])
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10)))
parest=fit$par
return(parest)
}
fit_multiple_F=function(data){
#removes columns for countries with no cases
few_cases=c()
for(x in seq(1, ncol(data))){
cases=as.integer(data[5:nrow(data), x])
cases=cases[!is.na(cases)]
if(cases[length(cases)]<=10){
few_cases=append(few_cases, x)
}
}
data=subset(data, select=-c(few_cases))
#generates labels
regions=regions(data)
#performs the fit for the first element in the dataframe (assumption: the dataframe has at least 2 columns)
paramdf=data.frame(fit_param_F(1, data))
colnames(paramdf)=c(regions[1])
#performs the fit for the rest of the regions, adds results to the dataframe
#if all the data were working, the loop would be for seq(2, ncol(data))
for(x in seq(2, ncol(data))){
print(x)
p=data.frame(fit_param_F(x, data))
colnames(p)=c(regions[x])
paramdf=cbind(paramdf, p)
print(p)
}
return(paramdf)
}
fit_tau_mu_CFR=function(region, C_data, F_data){
#estimates paramters for fatality data
F_parest=fit_param_F(region, F_data)
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
#format case data for a given region
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
# discards data for days before initial outbreak
start=min(which(cases_C>0, arr.ind=TRUE))
cases_C=c(cases_C[start:length(cases_C)])
#format fatality data for a given region
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#discards data for days before initial outbreak
start_F=min(which(cases_F>0, arr.ind=TRUE))
cases_F=c(cases_F[start_F:length(cases_F)])
init=c(cases_F[1])
F_out=ode(y=init, times=times_C, func=F_rate, parms=F_parest)
F_df=data.frame(F_out)
colnames(F_df)=c("t", "pred_F")
par=c(tau=20)
# par=c(tau=1, mu_CFR=0.005)
#use this if just fitting tau
fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, method="Brent", lower=0, upper=1)
#fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, control=list(parscale=c(1,.5)))
parest=fit$par
return(parest)
}
#plot=ggplot(data=cdf, aes(x=x, y=cases_C))+geom_point(data=cdf, aes(x=x, y=.0375*cases_C, color="red"))+geom_point(data=fdf, aes(x=x, y=cases_F, color="green"))
#print(plot)
fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
fit_tau_mu_CFR=function(region, C_data, F_data){
#estimates paramters for fatality data
F_parest=fit_param_F(region, F_data)
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
#format case data for a given region
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
#format fatality data for a given region
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
par=c(tau=20)
# par=c(tau=1, mu_CFR=0.005)
#use this if just fitting tau
fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, method="Brent", lower=0, upper=1)
#fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, control=list(parscale=c(1,.5)))
parest=fit$par
return(parest)
}
fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting_F.R")
#read data from JHU
JHU_F_data <- read.csv("JHU_data/time_series_covid19_deaths_global.csv")
JHU_F_data<-t(JHU_F_data)
JHU_C_data<-read.csv("JHU_data/time_series_covid19_confirmed_global.csv")
JHU_C_data<-t(JHU_C_data)
#generates a vector of region labels for the estimates (JHU data)
regions=function(data){
regions=c()
for(x in seq(1, ncol(data))){
#combines label from first and second row (region and country)
regions=append(regions, paste(data[1, x], data[2, x]))
}
return(regions)
}
#fits r, p, alpha, and K for a given region
fit_param_F=function(region, data){
#format case data for a given region
cases=as.integer(data[5:nrow(data), region])
cases=cases[!is.na(cases)]
#discards data for days before initial outbreak
start=min(which(cases>0, arr.ind=TRUE))
cases=c(cases[start:length(cases)])
#starting guess for parameters
par=c(r_tilde=2, p=1, alpha=1, K_tilde=cases[length(cases)])
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10)))
parest=fit$par
return(parest)
}
fit_multiple_F=function(data){
#removes columns for countries with no cases
few_cases=c()
for(x in seq(1, ncol(data))){
cases=as.integer(data[5:nrow(data), x])
cases=cases[!is.na(cases)]
if(cases[length(cases)]<=10){
few_cases=append(few_cases, x)
}
}
data=subset(data, select=-c(few_cases))
#generates labels
regions=regions(data)
#performs the fit for the first element in the dataframe (assumption: the dataframe has at least 2 columns)
paramdf=data.frame(fit_param_F(1, data))
colnames(paramdf)=c(regions[1])
#performs the fit for the rest of the regions, adds results to the dataframe
#if all the data were working, the loop would be for seq(2, ncol(data))
for(x in seq(2, ncol(data))){
print(x)
p=data.frame(fit_param_F(x, data))
colnames(p)=c(regions[x])
paramdf=cbind(paramdf, p)
print(p)
}
return(paramdf)
}
fit_tau_mu_CFR=function(region, C_data, F_data){
#estimates paramters for fatality data
F_parest=fit_param_F(region, F_data)
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
#format case data for a given region
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
#format fatality data for a given region
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
par=c(tau=20)
# par=c(tau=1, mu_CFR=0.005)
#use this if just fitting tau
fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, method="Brent", lower=0, upper=1)
#fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, control=list(parscale=c(1,.5)))
parest=fit$par
return(parest)
}
#plot=ggplot(data=cdf, aes(x=x, y=cases_C))+geom_point(data=cdf, aes(x=x, y=.0375*cases_C, color="red"))+geom_point(data=fdf, aes(x=x, y=cases_F, color="green"))
#print(plot)
fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
fit_tau_mu_CFR=function(region, C_data, F_data){
#estimates paramters for fatality data
F_parest=fit_param_F(region, F_data)
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
#format case data for a given region
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
#format fatality data for a given region
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
par=c(tau=20)
# par=c(tau=1, mu_CFR=0.005)
#use this if just fitting tau
fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, method="Brent", lower=-30, upper=30)
#fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, control=list(parscale=c(1,.5)))
parest=fit$par
return(parest)
}
fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
fit_tau_mu_CFR=function(region, C_data, F_data){
#estimates paramters for fatality data
F_parest=fit_param_F(region, F_data)
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
#format case data for a given region
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
#format fatality data for a given region
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
par=c(tau=20)
# par=c(tau=1, mu_CFR=0.005)
#use this if just fitting tau
fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, method="Brent", lower=-50, upper=50)
#fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, control=list(parscale=c(1,.5)))
parest=fit$par
return(parest)
}
fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
fit_tau_mu_CFR=function(region, C_data, F_data){
#estimates paramters for fatality data
F_parest=fit_param_F(region, F_data)
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
#format case data for a given region
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
#format fatality data for a given region
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
par=c(tau=20)
# par=c(tau=1, mu_CFR=0.005)
#use this if just fitting tau
fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, method="Brent", lower=-40, upper=40)
#fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, control=list(parscale=c(1,.5)))
parest=fit$par
return(parest)
}
fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
fit_tau_mu_CFR=function(region, C_data, F_data){
#estimates paramters for fatality data
F_parest=fit_param_F(region, F_data)
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
#format case data for a given region
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
#format fatality data for a given region
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
par=c(tau=20)
# par=c(tau=1, mu_CFR=0.005)
#use this if just fitting tau
fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, method="Brent", lower=-35, upper=35)
#fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, control=list(parscale=c(1,.5)))
parest=fit$par
return(parest)
}
fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
fit_tau_mu_CFR=function(region, C_data, F_data){
#estimates paramters for fatality data
F_parest=fit_param_F(region, F_data)
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
#format case data for a given region
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
#format fatality data for a given region
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
par=c(tau=20)
# par=c(tau=1, mu_CFR=0.005)
#use this if just fitting tau
fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, method="Brent", lower=-30, upper=30)
#fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, control=list(parscale=c(1,.5)))
parest=fit$par
return(parest)
}
fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
source("parameter_fitting_F.R")
fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
