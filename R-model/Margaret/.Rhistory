mu_IFR=0.01,
mu_IFR=0.01
pop=66990000
beta_type="time-dep"
intervention=56
roll_size=1
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
D_data
C_data=JHU_C_data
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
phi
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
cases_R=rollmean(cases_R, roll_size)
active_cases=cases_C-(cases_R+cases_F)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=active_cases[1], I_3=0, I_4=0, R_1=0, R_2=cases_R[1], F_=cases_F[1])
N=pop
#par=c(beta_b=0.38, beta_a=0.38, rho=0.55)
par=c(beta_b=0.38, beta_a=0.38)
par=c(par[1], par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, fit=fit, N=N, phi=phi, beta_type=beta_type, intervention=intervention)
par
rho=1-mu_CFR
rho
mu_CFR
rho=rho
rho
#par=c(beta_b=0.38, beta_a=0.38, rho=0.55)
par=c(beta_b=0.38, beta_a=0.38)
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
par
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, fit=fit, N=N, phi=phi, beta_type=beta_type, intervention=intervention)
ode_soln
ssq_SEIR=function(par, region, active_cases, cases_F, cases_R, mu_IFR=0.01, phi, times, start, fit, S0, pop, N, beta_type, intervention, mu_CFR){
if(beta_type=="different"){
names=c("beta_1", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], par[2], par[3], rho=1-mu_CFR, a=1,
kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
} else if(beta_type=="equal"){
names=c("beta", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
} else if(beta_type=="time-dep"){
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, fit=fit, N=N, phi=phi, beta_type=beta_type, intervention=intervention)
I_2=ode_soln[,"I_2"]
I_4=ode_soln[,"I_4"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
ssq=sum(sqrt((active_cases-(I_2+I_4))^2))/mean(active_cases)+sum(sqrt((cases_F-F_)^2))/mean(cases_F)+sum(sqrt((cases_R-R_2)^2))/mean(cases_R)
#ssq=sum(sqrt((active_cases-(I_2+I_4))^2))/mean(active_cases)
# ssq=sum(sqrt((active_cases-(I_2+I_4))^2))+sum(sqrt((cases_F-F_)^2))
#ssq=sum(sqrt((active_cases-(I_2+I_4))^2))+sum(sqrt((cases_F-F_)^2))+sum(sqrt((cases_R-R_2)^2))
return(ssq)
}
fit_par=fit_to_SEIR(region=117, pop=66990000, beta_type="time-dep", intervention=56)
fit_par
#compartment is "A" (active cases), "F" (deaths), or "R" (recovered)
#fit_param is output from fit_to_SEIR. If no parameters are passed, fit_to_SEIR will run
plot_SEIR_fit=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_IFR=0.01, pop, beta_type="different",fit_par=NULL, compartment, roll_size=1, intervention=NULL){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type, roll_size=roll_size, intervention=intervention)
}
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
C_df=data.frame(times, cases_C)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
F_df=data.frame(times, cases_F)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
cases_R=rollmean(cases_R, roll_size)
R_df=data.frame(times, cases_R)
active_cases=cases_C-(cases_R+cases_F)
active_cases_df=data.frame(times, active_cases)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=active_cases[1], I_3=0, I_4=0, R_1=0, R_2=cases_R[1], F_=cases_F[1])
N=pop
if(beta_type=="different"){
names=c("beta_1", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], par[2], par[3], rho=1-mu_CFR, a=1,
kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
} else if(beta_type=="equal"){
names=c("beta", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
} else if(beta_type=="time-dep"){
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=fit_par, fit=fit, N=N, phi=phi, beta_type=beta_type, intervention=intervention)
I_2=ode_soln[,"I_2"]
I_4=ode_soln[,"I_4"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
sim_cases_C=I_2+I_4
sim_C_df=data.frame(times, sim_cases_C)
sim_F_df=data.frame(times, F_)
sim_R_df=data.frame(times, R_2)
if(compartment=="A"){
plot=ggplot(data=active_cases_df, aes(x=times, y=active_cases))+geom_point()+geom_line(data=sim_C_df, aes(x=times, y=sim_cases_C))+labs(title=region_name)
print(plot)
}
else if(compartment=="F"){
plot=ggplot(data=F_df, aes(x=times, y=cases_F))+geom_point()+geom_line(data=sim_F_df, aes(x=times, y=F_))+labs(title=region_name)
print(plot)
}
else if(compartment=="R"){
plot=ggplot(data=R_df, aes(x=times, y=cases_R))+geom_point()+geom_line(data=sim_R_df, aes(x=times, y=R_2))+labs(title=region_name)
print(plot)
}
}
plot_SEIR_fit(region=117, pop=66990000, beta_type="time-dep", fit_par=fit_par, compartment="C", intervention=56)
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
C_df=data.frame(times, cases_C)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
F_df=data.frame(times, cases_F)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
cases_R=rollmean(cases_R, roll_size)
R_df=data.frame(times, cases_R)
active_cases=cases_C-(cases_R+cases_F)
active_cases_df=data.frame(times, active_cases)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=active_cases[1], I_3=0, I_4=0, R_1=0, R_2=cases_R[1], F_=cases_F[1])
N=pop
#compartment is "A" (active cases), "F" (deaths), or "R" (recovered)
#fit_param is output from fit_to_SEIR. If no parameters are passed, fit_to_SEIR will run
plot_SEIR_fit=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_IFR=0.01, pop, beta_type="different",fit_par=NULL, compartment, roll_size=1, intervention=NULL){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type, roll_size=roll_size, intervention=intervention)
}
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
C_df=data.frame(times, cases_C)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
F_df=data.frame(times, cases_F)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
cases_R=rollmean(cases_R, roll_size)
R_df=data.frame(times, cases_R)
active_cases=cases_C-(cases_R+cases_F)
active_cases_df=data.frame(times, active_cases)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=active_cases[1], I_3=0, I_4=0, R_1=0, R_2=cases_R[1], F_=cases_F[1])
N=pop
if(beta_type=="different"){
names=c("beta_1", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(par[1], par[2], par[3], rho=1-mu_CFR, a=1,
kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names
} else if(beta_type=="equal"){
names=c("beta", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names
} else if(beta_type=="time-dep"){
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(par[1], par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names  }
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=fit_par, fit=fit, N=N, phi=phi, beta_type=beta_type, intervention=intervention)
I_2=ode_soln[,"I_2"]
I_4=ode_soln[,"I_4"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
sim_cases_C=I_2+I_4
sim_C_df=data.frame(times, sim_cases_C)
sim_F_df=data.frame(times, F_)
sim_R_df=data.frame(times, R_2)
if(compartment=="A"){
plot=ggplot(data=active_cases_df, aes(x=times, y=active_cases))+geom_point()+geom_line(data=sim_C_df, aes(x=times, y=sim_cases_C))+labs(title=region_name)
print(plot)
}
else if(compartment=="F"){
plot=ggplot(data=F_df, aes(x=times, y=cases_F))+geom_point()+geom_line(data=sim_F_df, aes(x=times, y=F_))+labs(title=region_name)
print(plot)
}
else if(compartment=="R"){
plot=ggplot(data=R_df, aes(x=times, y=cases_R))+geom_point()+geom_line(data=sim_R_df, aes(x=times, y=R_2))+labs(title=region_name)
print(plot)
}
}
plot_SEIR_fit(region=117, pop=66990000, beta_type="time-dep", fit_par=fit_par, compartment="C", intervention=56)
plot_SEIR_fit(region=117, pop=66990000, beta_type="time-dep", fit_par=fit_par, compartment="F", intervention=56)
plot_SEIR_fit(region=117, pop=66990000, beta_type="time-dep", fit_par=fit_par, compartment="R", intervention=56)
fit_par
ssq_SEIR=function(par, region, cases_C, cases_F, cases_R, mu_IFR=0.01, phi, times, start, fit, S0, pop, N, beta_type, intervention, mu_CFR){
if(beta_type=="different"){
names=c("beta_1", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], par[2], par[3], rho=1-mu_CFR, a=1,
kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
} else if(beta_type=="equal"){
names=c("beta", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
} else if(beta_type=="time-dep"){
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, fit=fit, N=N, phi=phi, beta_type=beta_type, intervention=intervention)
I_2=ode_soln[,"I_2"]
I_4=ode_soln[,"I_4"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
total_cases=I_2+I_4+R_2+F_
#ssq=sum(sqrt((active_cases-(I_2+I_4))^2))/mean(active_cases)+sum(sqrt((cases_F-F_)^2))/mean(cases_F)+sum(sqrt((cases_R-R_2)^2))/mean(cases_R)
#ssq=sum(sqrt((active_cases-(I_2+I_4))^2))/mean(active_cases)
# ssq=sum(sqrt((active_cases-(I_2+I_4))^2))+sum(sqrt((cases_F-F_)^2))
ssq=sum(sqrt((active_cases-(total_cases))^2))/mean(cases_C)+sum(sqrt((cases_F-F_)^2))/mean(cases_F)
#ssq=sum(sqrt((active_cases-(I_2+I_4))^2))+sum(sqrt((cases_F-F_)^2))+sum(sqrt((cases_R-R_2)^2))
return(ssq)
}
#intervention is the number of the day when interventions started, starting from the beginning of the data in the datasets
fit_to_SEIR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_IFR=0.01, pop, beta_type="different", roll_size=1, intervention=NULL){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
cases_R=rollmean(cases_R, roll_size)
active_cases=cases_C-(cases_R+cases_F)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=active_cases[1], I_3=0, I_4=0, R_1=0, R_2=cases_R[1], F_=cases_F[1])
N=pop
if(beta_type=="different"){
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1)
}
else if(beta_type=="equal"){
par=c(beta=0.38)
} else if(beta_type=="time-dep"){
#par=c(beta_b=0.38, beta_a=0.38, rho=0.55)
par=c(beta_b=0.38, beta_a=0.38)
}
#scale on parameters is different depending on how many pars there are - fix this!
#ODE_fit=optim(par=par, fn=ssq_SEIR, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, control=list(parscale=c(1,1, 1, 1, 1)))
ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, beta_type=beta_type, intervention=intervention, mu_CFR=mu_CFR, method="L-BFGS-B", lower=c(0, 0), upper=c(1, 1))
fit_par=ODE_fit$par
return(fit_par)
}
fit_par2=fit_to_SEIR(region=117, pop=66990000, beta_type="time-dep", intervention=56)
ssq_SEIR=function(par, region, cases_C, cases_F, cases_R, mu_IFR=0.01, phi, times, start, fit, S0, pop, N, beta_type, intervention, mu_CFR){
if(beta_type=="different"){
names=c("beta_1", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], par[2], par[3], rho=1-mu_CFR, a=1,
kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
} else if(beta_type=="equal"){
names=c("beta", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
} else if(beta_type=="time-dep"){
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
par=c(par[1], par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(par)=names
}
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=par, fit=fit, N=N, phi=phi, beta_type=beta_type, intervention=intervention)
I_2=ode_soln[,"I_2"]
I_4=ode_soln[,"I_4"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
total_cases=I_2+I_4+R_2+F_
#ssq=sum(sqrt((active_cases-(I_2+I_4))^2))/mean(active_cases)+sum(sqrt((cases_F-F_)^2))/mean(cases_F)+sum(sqrt((cases_R-R_2)^2))/mean(cases_R)
#ssq=sum(sqrt((active_cases-(I_2+I_4))^2))/mean(active_cases)
# ssq=sum(sqrt((active_cases-(I_2+I_4))^2))+sum(sqrt((cases_F-F_)^2))
ssq=sum(sqrt((cases_C-(total_cases))^2))/mean(cases_C)+sum(sqrt((cases_F-F_)^2))/mean(cases_F)
#ssq=sum(sqrt((active_cases-(I_2+I_4))^2))+sum(sqrt((cases_F-F_)^2))+sum(sqrt((cases_R-R_2)^2))
return(ssq)
}
fit_par2=fit_to_SEIR(region=117, pop=66990000, beta_type="time-dep", intervention=56)
fit_par2
#compartment is "A" (active cases), "F" (deaths), or "R" (recovered)
#fit_param is output from fit_to_SEIR. If no parameters are passed, fit_to_SEIR will run
plot_SEIR_fit=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_IFR=0.01, pop, beta_type="different",fit_par=NULL, compartment, roll_size=1, intervention=NULL){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type, roll_size=roll_size, intervention=intervention)
}
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
C_df=data.frame(times, cases_C)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
F_df=data.frame(times, cases_F)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
cases_R=rollmean(cases_R, roll_size)
R_df=data.frame(times, cases_R)
active_cases=cases_C-(cases_R+cases_F)
active_cases_df=data.frame(times, active_cases)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=active_cases[1], I_3=0, I_4=0, R_1=0, R_2=cases_R[1], F_=cases_F[1])
N=pop
if(beta_type=="different"){
names=c("beta_1", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(par[1], par[2], par[3], rho=1-mu_CFR, a=1,
kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names
} else if(beta_type=="equal"){
names=c("beta", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names
} else if(beta_type=="time-dep"){
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(par[1], par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names  }
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=fit_par, fit=fit, N=N, phi=phi, beta_type=beta_type, intervention=intervention)
I_2=ode_soln[,"I_2"]
I_4=ode_soln[,"I_4"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
sim_cases_C=I_2+I_4+R_2+F_
sim_C_df=data.frame(times, sim_cases_C)
sim_F_df=data.frame(times, F_)
sim_R_df=data.frame(times, R_2)
if(compartment=="C"){
plot=ggplot(data=C_df, aes(x=times, y=cases_C))+geom_point()+geom_line(data=sim_C_df, aes(x=times, y=sim_cases_C))+labs(title=region_name)
print(plot)
}
else if(compartment=="F"){
plot=ggplot(data=F_df, aes(x=times, y=cases_F))+geom_point()+geom_line(data=sim_F_df, aes(x=times, y=F_))+labs(title=region_name)
print(plot)
}
else if(compartment=="R"){
plot=ggplot(data=R_df, aes(x=times, y=cases_R))+geom_point()+geom_line(data=sim_R_df, aes(x=times, y=R_2))+labs(title=region_name)
print(plot)
}
}
plot_SEIR_fit(region=117, pop=66990000, beta_type="time-dep", fit_par=fit_par2, compartment="C", intervention=56)
plot_SEIR_fit(region=117, pop=66990000, beta_type="time-dep", fit_par=fit_par2, compartment="F", intervention=56)
fit_par2
for(x in seq(.5, 1.3, 0.2)){
print(total_infected(117, JHU_C_data, JHU_F_data, x))
}
for(x in seq(.5, 1.3, 0.2)){
total=total_infected(117, JHU_C_data, JHU_F_data, x)
print(total/8859000)
}
for(x in seq(.5, 1.3, 0.2)){
total=total_infected(17, JHU_C_data, JHU_F_data, x)
print(total/8859000)
}
for(x in seq(.5, 1.3, 0.2)){
total=total_infected(17, C_data_May_4, F_data_May_4, x)
print(total/8859000)
}
for(x in seq(.005, 0.013, 0.002)){
total=total_infected(17, C_data_May_4, F_data_May_4, x)
print(total/8859000)
}
for(x in seq(.005, 0.013, 0.002)){
total=total_infected(24, C_data_May_4, F_data_May_4, x)
print(total/11460000)
}
for(x in seq(.005, 0.013, 0.002)){
total=total_infected(95, C_data_May_4, F_data_May_4, x)
print(total/5806000)
}
for(x in seq(.005, 0.013, 0.002)){
total=total_infected(117, C_data_May_4, F_data_May_4, x)
print(total/66990000)
}
for(x in seq(.005, 0.013, 0.002)){
total=total_infected(121, C_data_May_4, F_data_May_4, x)
print(total/83020000)
}
for(x in seq(.005, 0.013, 0.002)){
total=total_infected(138, C_data_May_4, F_data_May_4, x)
print(total/60360000)
}
for(x in seq(.005, 0.013, 0.002)){
total=total_infected(176, C_data_May_4, F_data_May_4, x)
print(total/5368000)
}
for(x in seq(.005, 0.013, 0.002)){
total=total_infected(202, C_data_May_4, F_data_May_4, x)
print(total/46940000)
}
for(x in seq(.005, 0.013, 0.002)){
total=total_infected(206, C_data_May_4, F_data_May_4, x)
print(total/10230000)
}
for(x in seq(.005, 0.013, 0.002)){
total=total_infected(207, C_data_May_4, F_data_May_4, x)
print(total/8570000)
}
for(x in seq(.005, 0.013, 0.002)){
total=total_infected(224, C_data_May_4, F_data_May_4, x)
print(total/66650000)
}
