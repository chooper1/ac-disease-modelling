exercise_6_19 <- read.csv("C:/Users/mjiho/Desktop/2019-20 work/MATH 3273/exercise_6_19.txt", sep="")
View(exercise_6_19)
options(contrasts = c("contr.sum","contr.poly"))
for (i in 1:4){
turbine[,i] = factor(turbine[,i])
contrasts(turbine[,i]) = c(-1,1)
}
turbine <- read.csv("C:/Users/mjiho/Desktop/2019-20 work/MATH 3273/exercise_6_19.txt", sep="")
View(turbine)
options(contrasts = c("contr.sum","contr.poly"))
for (i in 1:4){
turbine[,i] = factor(turbine[,i])
contrasts(turbine[,i]) = c(-1,1)
}
aov1=aov(Y~A*B*C*D, data=turbine)
model.tables(aov1)
2*confint(aov1)
2*model.tables
2*model.tables(aov1)
with(turbine, mean(Y[A=="1"]))-with(turbine, mean(Y[A=="-1"]))
aov2=aov(Y~A+B+C+D+A:B+A:C+B:C+A:B:C, data=turbine)
anova(aov2)
model.tables(aov2)
summary.lm(aov2)
hist(resid(aov2))
plot(resid(a0v2), predict(aov2))
plot(resid(aov2), predict(aov2))
qqplot(aov2)
qqnorm(aov2)
qqnorm(resid(aov2))
qqline(resid(aov2))
predict(aov2)
cbind(turbine, predict(aov2))
silicone <- read.delim("C:/Users/mjiho/Desktop/2019-20 work/MATH 3273/exercise_6_40.txt")
View(silicone)
options(contrasts = c("contr.sum","contr.poly"))
for (i in 1:4){
silicone[,i] = factor(silicone[,i])
contrasts(silicone[,i]) = c(-1,1)
}
aov3=aov(Resistivity~A*B*C*D, data=silicone)
anova(aov3)
qqnorm(2*coef(aov3)[-1], datax=TRUE, ylab='Effect', xlab='normal quantiles')
qqline(2*coef(aov3)[-1], datax=TRUE, ylab='Effect', xlab='normal quantiles')
round(2*coef(aov3)[-1],1)
aov4=aov(Resistivity~A*B, data=silicone)
anova(aov4)
hist(resid(aov4))
plot(resid(aov4), predict(aov4))
qqnorm(resid(aov4))
qqline(resid(aov4))
plot(predict(aov2), resid(aov2))
plot(predict(aov4), resid(aov4))
aov5=aov(ln(Resistivity)~A*B*C*D, data=silicone)
aov5=aov(log(Resistivity)~A*B*C*D, data=silicone)
qqnorm(2*coef(aov5)[-1], datax=TRUE, ylab='Effect', xlab='normal quantiles')
qqline(2*coef(aov5)[-1], datax=TRUE, ylab='Effect', xlab='normal quantiles')
round(2*coef(aov5)[-1],1)
aov6=aov(log(Resistivity)~A*B, data=silicone)
anova(aov5)
anova(aov6)
hist(resid(aov6))
qqnorm(resid(aov6))
qqline(resid(aov6))
plot(predict(aov6), resid(aov6))
summary.lm(aov6)
aov6=aov(log(Resistivity)~A+B, data=silicone)
anova(aov6)
hist(resid(aov6))
qqnorm(resid(aov6))
qqline(resid(aov6))
plot(predict(aov6), resid(aov6))
summary.lm(aov6)
turbine <- read.csv("C:/Users/mjiho/Desktop/2019-20 work/MATH 3273/exercise_6_19.txt", sep="")
View(turbine)
options(contrasts = c("contr.sum","contr.poly"))
for (i in 1:4){
turbine[,i] = factor(turbine[,i])
contrasts(turbine[,i]) = c(-1,1)
}
aov1=aov(Y~A*B*C*D, data=turbine)
model.tables(aov1)
2*confint(aov1)
with(turbine, mean(Y[A=="1"]))-with(turbine, mean(Y[A=="-1"]))
aov2=aov(Y~A+B+C+D+A:B+A:C+B:C+A:B:C, data=turbine)
anova(aov2)
model.tables(aov2)
summary.lm(aov2)
hist(resid(aov2))
plot(predict(aov2), resid(aov2))
qqnorm(resid(aov2))
qqline(resid(aov2))
predict(aov2)
cbind(turbine, predict(aov2))
robots_numerical <- read.csv("C:/Users/mjiho/Desktop/2019-20 work/MATH 3273/Project/robots_numerical.txt", sep="")
View(robots_numerical)
aov1=aov(response~speed*method+block, data=robots_numerical)
anova(aov1)
anova(aov1, aov(response~1, data=robots_numerical))
aov1=aov(response~speed*method+block, data=robots_numerical)
anova(aov1)
anova(aov1, aov(response~1, data=robots_numerical))
model.tables(aov1)
response = response, lty = 1, lwd=2)
with(robots_numerical, interaction.plot(x.factor = speed, trace.factor = method, response = response, lty = 1, lwd=2)
with(robots_numerical,
tempx = expand.grid(method = as.factor(1:2),
speed = as.factor(c(15,50,100)))
with(tempx,
tempx = expand.grid(method = as.factor(1:2),
speed = as.factor(c(15,50,100)))
aov2=aov(response~., data=robots_numerical)
with(tempx,
interaction.plot(method, speed, predict(aov2, newdata=tempx)))
tempx = expand.grid(method = as.factor(1:2),
speed = as.factor(c(15,50,100)))
aov2=aov(response~speed+method, data=robots_numerical)
with(tempx,
interaction.plot(method, speed, predict(aov2, newdata=tempx)))
aov2=aov(response~as.factor(speed)+as.factor(method), data=robots_numerical)
with(tempx,
interaction.plot(method, speed, predict(aov2, newdata=tempx)))
aov1=aov(response~speed*as.factor(method)+block, data=robots_numerical)
anova(aov1)
anova(aov1, aov(response~1, data=robots_numerical))
aov2=aov(response~speed+as.factor(method), data=robots_numerical)
with(tempx,
interaction.plot(method, speed, predict(aov2, newdata=tempx)))
aov1=aov(response~speed*as.factor(method)+block, data=robots_numerical)
anova(aov1)
anova(aov1, aov(response~1, data=robots_numerical))
model.tables(aov1)
tempx = expand.grid(method = as.factor(1:2),
speed = as.factor(c(15,50,100)))
aov1=aov(response~speed*as.factor(method)+block, data=robots_numerical)
anova(aov1)
anova(aov1, aov(response~1, data=robots_numerical))
model.tables(aov1)
tempx = expand.grid(method = as.factor(1:2),
speed = c(15,50,100))
aov2=aov(response~speed+as.factor(method), data=robots_numerical)
with(tempx,
interaction.plot(method, speed, predict(aov2, newdata=tempx)))
aov2=aov(response~speed*as.factor(method), data=robots_numerical)
with(tempx,
interaction.plot(method, speed, predict(aov2, newdata=tempx)))
plot(resid(aov1), predict(aov1))
stripchart(resid(aov1)~method, data=robots_numerical, vertical=TRUE, method="stack")
stripchart(resid(aov1)~method, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov1)~speed, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. speed")
qqnorm(aov1)
qqnorm(resid(aov1))
qqline(resid(aov1))
model.tables(aov1)
2*confint(aov1)
summary.lm(aov1)
aov1=aov(response~speed*as.factor(method)+factor(block), data=robots_numerical)
anova(aov1)
anova(aov1, aov(response~1+factor(block), data=robots_numerical))
model.tables(aov1)
tempx = expand.grid(method = as.factor(1:2),
speed = c(15,50,100))
aov2=aov(response~speed*as.factor(method), data=robots_numerical)
with(tempx,
interaction.plot(method, speed, predict(aov2, newdata=tempx)))
aov1=aov(response~factor(speed)*as.factor(method)+factor(block), data=robots_numerical)
anova(aov1)
anova(aov1, aov(response~speed*as.factor(method)+factor(block), data=robots_numerical))
aov1=aov(response~(speed+I(speed^2))*as.factor(method)+factor(block), data=robots_numerical)
anova(aov1, aov(response~speed*as.factor(method)+factor(block), data=robots_numerical))
anova(aov1, aov(response~1+factor(block), data=robots_numerical))
model.tables(aov1)
tempx = expand.grid(method = as.factor(1:2),
speed = c(15,50,100))
aov2=aov(response~speed*as.factor(method), data=robots_numerical)
with(tempx,
interaction.plot(method, speed, predict(aov2, newdata=tempx)))
plot(resid(aov1), predict(aov1))
plot(predict(aov1), resid(aov1))
stripchart(resid(aov1)~method, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov1)~speed, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. speed")
aov3=aov(response~speed*as.factor(method)+factor(block), data=robots_numerical)
anova(a0v1, a0v3)
anova(aov1, aov3)
aov1=aov(response~(speed+I(speed^2))*as.factor(method)+factor(block), data=robots_numerical)
aov3=aov(response~speed*as.factor(method)+factor(block), data=robots_numerical)
anova(aov1, aov3)
aov1=aov(response~(speed+I(speed^2))*as.factor(method)+factor(block), data=robots_numerical)
anova(aov1)
aov4=aov(response~speed*as.factor(method)+I(speed^2)+factor(blcok), data=robots_numerical)
aov4=aov(response~speed*as.factor(method)+I(speed^2)+factor(block), data=robots_numerical)
aov4=aov(response~speed*as.factor(method)+I(speed^2)+factor(block), data=robots_numerical)
anova(aov4)
with(tempx,
interaction.plot(method, speed, predict(aov2, newdata=tempx)))
plot(predict(aov1), resid(aov1))
aov2=aov(response~speed*as.factor(method), data=robots_numerical)
with(tempx,
interaction.plot(method, speed, predict(aov2, newdata=tempx)))
with(robots_numerical, interaction.plot(method, speed, y))
with(robots_numerical, interaction.plot(method, speed, response))
2*coef(aov4)[-1]
2*coef(aov4)
summary.lm(aov4)
coef(aov4)
plot(predict(aov3), resid(aov3))
plot(predict(aov4), resid(aov4))
stripchart(resid(aov3)~method, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov4)~method, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov3)~speed, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. speed")
stripchart(resid(aov4)~speed, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. speed")
qqnorm(resid(aov3))
qqline(resid(aov3))
qqnorm(resid(aov4))
qqline(resid(aov4))
stripchart(resid(aov3)[1:6]~c(1, 2, 3, 4, 5, 6), data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov3)[1:6, 19:24]~c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov3)[c(1:6, 19:24)]~c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov3)[c(1:6, 19:24)]~c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. run order block 1")
stripchart(resid(aov3)[c(7:12, 25:30)]~c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. run order block 1")
stripchart(resid(aov3)[c(7:12, 25:30)]~c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. run order block 2")
stripchart(resid(aov3)[c(13:18, 31:36)]~c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. run order block 1")
stripchart(resid(aov3)[c(13:18, 31:36)]~c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. run order block 3")
aov5=aov(log(response)~speed*as.factor(method)+I(speed^2)+factor(block), data=robots_numerical)
anova(aov5)
plot(predict(aov5), resid(aov5))
stripchart(resid(aov5)~method, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov5)~speed, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. speed")
qqnorm(resid(aov5))
qqline(resid(aov5))
aov5=aov(log(response, base=47)~speed*as.factor(method)+I(speed^2)+factor(block), data=robots_numerical)
anova(aov5)
plot(predict(aov5), resid(aov5))
stripchart(resid(aov5)~method, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov5)~speed, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. speed")
qqnorm(resid(aov5))
qqline(resid(aov5))
aov5=aov(log(response, base=47)~speed*as.factor(method)+I(speed^2)+factor(block), data=robots_numerical)
anova(aov5)
plot(predict(aov5), resid(aov5))
stripchart(resid(aov5)~method, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov5)~speed, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. speed")
qqnorm(resid(aov5))
qqline(resid(aov5))
aov5=aov(log(response, base=48)~speed*as.factor(method)+I(speed^2)+factor(block), data=robots_numerical)
anova(aov5)
plot(predict(aov5), resid(aov5))
stripchart(resid(aov5)~method, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov5)~speed, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. speed")
qqnorm(resid(aov5))
qqline(resid(aov5))
plot(predict(aov5), resid(aov5))
stripchart(resid(aov5)~method, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov5)~speed, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. speed")
qqnorm(resid(aov5))
qqline(resid(aov5))
aov6=aov(sqrt(response)~speed*as.factor(method)+I(speed^2)+factor(block), data=robots_numerical)
plot(predict(aov6), resid(aov6))
stripchart(resid(aov6)~method, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov6)~speed, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. speed")
qqnorm(resid(aov6))
qqline(resid(aov6))
plot(predict(aov6), resid(aov6))
stripchart(resid(aov6)~method, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. braking method")
stripchart(resid(aov6)~speed, data=robots_numerical, vertical=TRUE, method="stack", main="Residuals vs. speed")
qqnorm(resid(aov6))
qqline(resid(aov6))
summary.lm(aov4)
install.packages(c("deSolve", "GillespieSSA"))
# load the libraries
# the gillespie algorithms
library("GillespieSSA")
# the ode solvers
library("deSolve")
# the plots in the libraries make use of a simulation name
simName <- "SLIAR epidemic model"
# one possible stochastic simulation (SSA) model for this uses
# five events (or transitions)
# the model consists of specifying
# the changes in the state variables (transitions)
# and the rates for each event
rates <- c("beta*S*(epsilon*L + I + delta*A)/(S+L+I+A+R)",
"p*kappa*L",
"(1-p)*kappa*L",
"eta*A",
"f*alpha*I",
"(1-f)*alpha*I")
# The State-change matrix
# has one column for each transition and one row for each state variable
nu  <- matrix(c(-1,  0, 0,   0,  0,  0,
+1, -1, -1,  0,  0,  0,
0, +1,  0,  0, -1, -1,
0,  0, +1, -1,  0,  0,
0,  0,  0, +1, +1,  0),
nrow=5,byrow=TRUE)
# ODE model
# set up the right hand side for the ode solver
# using `with` is the prefered method, but allowing
# for missing parameters allows use of global variables
# note the switch to log variables to avoid numerical problems near zero populations
SLIARrhs <- function(t,x, parms=NULL) {
with(as.list(c(x,parms)),{
dS = -beta*S*(epsilon*L + I + delta*A)/(S+L+I+A+R);
dL = beta*S*(epsilon*L + I + delta*A)/(S+L+I+A+R) - kappa*L;
dI = p*kappa*L - alpha*I;
dA = (1-p)*kappa*L - eta*A;
dR = f*alpha*I + eta*A;
list(c(dS,dL,dI,dA,dR))
})
}
Ro = function(param) {
with(param, beta*(epsilon/kappa + p/alpha + (1-p)*delta/eta))
}
repsim = function(S0,rates,nu,param, tf, simName, runs, method = ssa.d()) {
A = data.frame(NULL)
for (run in seq(1,runs)) {
res_ssa <- ssa(x0 = S0,
a=rates,nu,parms = param,tf,
method=method,simName,
verbose=FALSE)
# ssa.otl for taul leaping, dt for
# output of ssa includes $data, which has t, S, L, ... for each event
# append a fourth column with run number to ssa$data
# bind result to A (add it as additional rows to bottom)
A = rbind(A,data.frame(res_ssa$data,run=as.factor(run)))
}
return(A)
}
pluckrun = function(data, sim, col = 3:5) {
wide = subset(data, run==sim)
long = stack(wide[,col])
long$t = rep(wide$t,times=length(col))
return(long)
}
k=10^8
glm=function(par, t, init){
alpha=1
k=10^8
}
alpha
glm=function(par, t, init){
alpha=1
k=10^8
T=max(t)
tn=length(t)
ODEfun<-function(t, y, parms=NULL) {
with(as.list(c(x, parms)),{
z=r*(y^p)*1-(y/K)^alpha;
list(c(z))
})
}
solODE=ode(y=init, t, func=ODEfun, par)
}
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
NSnewcases=c(7,13,10,17,5,17,20,12,5,20,23,23,14,29,26,31,17,32,31,34,21,17,29,43,30,32)
length(NScases)
length(NSnewcases)
x=c(1:length(NScases))
x
df=data.frame(x, NScases)
df
res_ode<-ode(y=S0, times, func=rhs, param)
library("ggplot2")
#set this to your working directory
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
#source file
source("SEIAR_Teismann.R")
#read in parameter values
paramset<-read.csv("params_Teismann.csv")
#initial states
S0<-c(S=1000, E=0, B=0, A=0, I_p=20, I_m=0, J=0, H=0, F=0, Q_m=0, Q_J=0, R=0)
#choose parameter sets
param=paramset[1, 2:17]
#control reproduction number, when control measures are in place
Rc=with(param, (mu_E/(mu_E+kappa))*((beta_p/(mu_1+kappa))+(phi*mu_1+beta_m)/((mu_1+kappa)*(mu_2+lambda))+((1-phi)*mu_1*beta_A)/((mu_1+kappa)*(mu_A+lambda))))
Rc
#final time for SSA
tf<-60
#output times for ODE solver
times<-seq(0, tf, by=0.01)
#number of simulations
A=repsim(S0, rates, nu, param=param, tf=360, simName, runs=20)
res_ode<-ode(y=S0, times, func=rhs, param)
res_ode
