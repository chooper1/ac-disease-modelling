plot_underreporting_vs_mu_CFR=function(factor, mu_CFR, region, C_data, F_data){
regions=regions(C_data)
ratios=c()
for(x in mu_CFR){
ratio=x/factor
ratios=append(ratios, ratio)
}
df=data.frame(mu_CFR, ratios)
print(df)
plot=ggplot(data=df, aes(x=mu_CFR, y=ratios))+geom_line()+ labs(title=regions[region])
print(plot)
}
#for this function, factor is the estimate for mu_CFR returned from fit_tau_mu_CFR, and mu_CFR is a sequence of guesses for the true mu_CFR
#function plots the proportion of cases reported vs. actual mu_CFR
plot_underreporting_vs_mu_CFR=function(factor, mu_CFR, region, C_data, F_data){
regions=regions(C_data)
ratios=c()
for(x in mu_CFR){
ratio=x/factor
ratios=append(ratios, ratio)
}
df=data.frame(mu_CFR, ratios)
plot=ggplot(data=df, aes(x=mu_CFR, y=ratios))+geom_line()+ labs(title=regions[region])
print(plot)
}
plot_underreporting_vs_mu_CFR(0.05919941, seq(0.001, 0.01, 0.0001), 7, JHU_C_data, JHU_F_data)
#for this function, factor is the estimate for mu_CFR returned from fit_tau_mu_CFR, and mu_CFR is a sequence of guesses for the true mu_CFR
#function plots the proportion of cases reported vs. actual mu_CFR
plot_underreporting_vs_mu_CFR=function(factor, mu_CFR, region, C_data, F_data){
regions=regions(C_data)
ratios=c()
for(x in mu_CFR){
ratio=x/factor
ratios=append(ratios, ratio)
}
df=data.frame(mu_CFR, ratios)
print(ratios[1])
print(ratios[length(ratios)])
plot=ggplot(data=df, aes(x=mu_CFR, y=ratios))+geom_line()+ labs(title=regions[region])
print(plot)
}
plot_underreporting_vs_mu_CFR(0.05919941, seq(0.001, 0.01, 0.0001), 7, JHU_C_data, JHU_F_data)
par=fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
plot_shifted_scaled_cases(par, 42, JHU_C_data, JHU_F_data)
#par is returned from fit_tau_mu_CFR
plot_shifted_scaled_cases=function(par, region, C_data, F_data){
regions=regions(C_data)
tau=par[1]
factor=par[2]
F_parest=fit_param_F(region, F_data)
r_tilde=F_parest[1]
p=F_parest[2]
alpha=F_parest[3]
K_tilde=F_parest[4]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#shift times for cumulative cases by tau
times_C=c(1:length(cases_C))+tau
C_df=data.frame(times_C, cases_C)
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_df=generate_F(times_C, init, start, F_parest)
plot=ggplot(data=C_df, aes(x=times_C, y=cases_C, color="red"))+geom_line()+geom_line(data=F_df, aes(x=times, y=y, color="green"))+geom_line()+labs(title=regions[region])
print(plot)
}
plot_shifted_scaled_cases(par, 42, JHU_C_data, JHU_F_data)
#par is returned from fit_tau_mu_CFR
plot_shifted_scaled_cases=function(par, region, C_data, F_data){
regions=regions(C_data)
tau=par[1]
factor=par[2]
F_parest=fit_param_F(region, F_data)
r_tilde=F_parest[1]
p=F_parest[2]
alpha=F_parest[3]
K_tilde=F_parest[4]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#shift times for cumulative cases by tau
times_C=c(1:length(cases_C))+tau
C_df=data.frame(times_C, cases_C)
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_df=generate_F(times_C, init, start, F_parest)
plot=ggplot(data=C_df, aes(x=times_C, y=cases_C*factor, color="red"))+geom_line()+geom_line(data=F_df, aes(x=times, y=y, color="green"))+geom_line()+labs(title=regions[region])
print(plot)
}
plot_shifted_scaled_cases(par, 42, JHU_C_data, JHU_F_data)
par
par=fit_tau_mu_CFR(7, JHU_C_data, JHU_F_data)
plot_shifted_scaled_cases(par, 7, JHU_C_data, JHU_F_data)
par
plot_shifted_scaled_cases(c(0, 0.05919941), 7, JHU_C_data, JHU_F_data)
par=fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
plot_shifted_scaled_cases(par, 7, JHU_C_data, JHU_F_data)
plot_shifted_scaled_cases(par, 42, JHU_C_data, JHU_F_data)
plot_shifted_cases(42, JHU_C_data, JHU_F_data)
plot_scaled_cases(42, JHU_C_data, JHU_F_data)
plot_cases_scaled(42, JHU_C_data, JHU_F_data)
#for this function, factor is the estimate for mu_CFR returned from fit_tau_mu_CFR, and mu_CFR is a sequence of guesses for the true mu_CFR
#function plots the proportion of cases reported vs. actual mu_CFR
plot_underreporting_vs_mu_CFR=function(factor, mu_CFR, region, C_data, F_data){
regions=regions(C_data)
ratios=c()
for(x in mu_CFR){
ratio=x/factor
ratios=append(ratios, ratio)
}
df=data.frame(mu_CFR, ratios)
#print(ratios[1])
#print(ratios[length(ratios)])
plot=ggplot(data=df, aes(x=mu_CFR, y=ratios))+geom_line()+ labs(title=regions[region])
print(plot)
}
par
plot_underreporting_vs_mu_CFR(0.104745, seq(0.001, .01, 0.0001), 42, JHU_C_data, JHU_F_data)
par_sweden=fit_tau_mu_CFR(206, JHU_C_data, JHU_F_data)
plot_cases_scaled(206, JHU_C_data, JHU_F_data, 0.01)
plot_cases_scaled(206, JHU_C_data, JHU_F_data, 0.001)
plot_cases_scaled(206, JHU_C_data, JHU_F_data, 0.1)
par_sweden=fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
plot_underreporting_vs_mu_CFR(0.104745, seq(0.1, .2, 0.001), 42, JHU_C_data, JHU_F_data)
par=fit_tau_mu_CFR(42, JHU_C_data, JHU_F_data)
par
ratio_vs_time=function(region, C_data, F_data, mu_CFR){
parest=fit_tau_mu_CFR(region, C_data, F_data)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_df=generate_F(times_C, init, start, F_parest)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
ratios=F_df$y/C_df$y
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_df=generate_F(times_C, init, start, F_parest)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
ratios=F_df$y/C_df$y
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
F_df=generate_F(times_C, init, start, F_parest)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
ratios=F_df$y/C_df$y
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
ratios=F_df$y/C_df$y
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
ratios=F_df$y/C_df$y
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
ratios=F_df$y/C_df$cases_C
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
print(C_df, F_df)
ratios=F_df$y/C_df$cases_C
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
print(C_df)
print(F_df)
ratios=F_df$y/C_df$cases_C
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
start=min(which(cases_C>0, arr.ind=TRUE))
F_df=F_df[-1:start-1,]
C_df=C_df[-1:start-1,]
print(C_df)
print(F_df)
ratios=F_df$y/C_df$cases_C
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
start=min(which(cases_C>0, arr.ind=TRUE))
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
print(C_df)
print(F_df)
ratios=F_df$y/C_df$cases_C
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
start=min(which(cases_C>0, arr.ind=TRUE))
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[!x %in% 1:start-1]
print(C_df)
print(F_df)
ratios=F_df$y/C_df$cases_C
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
start=min(which(cases_C>0, arr.ind=TRUE))
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[!times %in% 1:start-1]
print(C_df)
print(F_df)
ratios=F_df$y/C_df$cases_C
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
start=min(which(cases_C>0, arr.ind=TRUE))
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[!times %in% 1:start-1]
print(C_df)
print(F_df)
ratios=F_df$y/C_df$cases_C
length(ratios)
length(times)
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
start=min(which(cases_C>0, arr.ind=TRUE))
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[!times %in% 1:start-1]
print(C_df)
print(F_df)
ratios=F_df$y/C_df$cases_C
print(length(ratios))
print(length(times))
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
times=c(1:30)
times=times[!times %in% 1:12]
times
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
start=min(which(cases_C>0, arr.ind=TRUE))
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[!times %in% (1:start-1)]
print(C_df)
print(F_df)
ratios=F_df$y/C_df$cases_C
df=data.frame(times, ratios)
return(df)
}
times
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
start=min(which(cases_C>0, arr.ind=TRUE))
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
print(C_df)
print(F_df)
ratios=F_df$y/C_df$cases_C
df=data.frame(times, ratios)
return(df)
}
ratio_vs_time(7, JHU_C_data, JHU_F_data)
ratio_vs_time=function(region, C_data, F_data, mu_CFR=1){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
C_df=data.frame(times, cases_C)
F_df=generate_F(times, init, start, F_parest)
start=min(which(cases_C>0, arr.ind=TRUE))
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=F_df$y/C_df$cases_C
df=data.frame(times, ratios)
return(df)
}
ratios=ratio_vs_time(7, JHU_C_data, JHU_F_data)
plot_ratios_vs_time=function(region, C_data, F_data, mu_CFR=1){
regions=regions(C_data)
df=ratio_vs_time(region, C_data, F_data, mu_CRF)
plot=ggplot(data=df, aes(x=times, y=ratios))+geom_line()+labs(title=regions[region])+theme(legend.position="none")
print(plot)
}
plot_ratios_vs_time(7, JHU_C_data, JHU_F_data)
