#formatting the plots
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
source("parameter_fitting.R")
#format case data for a given region
cases=as.integer(JHU_F_data[5:nrow(JHU_F_data), 2])
cases=cases[!is.na(cases)]
#discards data for days before initial outbreak
start=min(which(cases>0, arr.ind=TRUE))
cases=c(cases[start:length(cases)])
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#performs the fit
fit=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
parest=fit$par
init=c(c(cases[1]))
times=(start:111)
out=ode(y=init, times=times, func=F_rate, parms=parest)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
df=data.frame(c(1:111), as.integer(JHU_F_data[5:nrow(JHU_F_data), 2]))
colnames(df)=c("t", "cases")
#formatting the plots
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
parest
#set to your working directory
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
#load libraries
library(deSolve)
library(minpack.lm)
library(ggplot2)
#load data
data <- read.csv("total_cases.csv")
#modify this line to choose region
cases=data$NScases
#format data
cases=cases[!is.na(cases)]
t=c(1:length(cases))
df=data.frame(t, cases)
init=c(cases[1])
#define the ODE
rate=function(t, C, par){
#parameters (alpha and K set)
r=par[1]
p=par[2]
alpha=par[3]
K=par[4]
#c is total cases
dC=r*C^p*(1-(C/K)^alpha)
return(list(dC))
}
#calculates the sum of squared residuals, use with optim optimization
ssq2=function(par, cases){
par=c(r=par[1],p=par[2], alpha=par[3], K=par[4])
times=seq(0, length(cases), 0.1)
t=c(1:length(cases))
times=sort(union(times, t))
df=data.frame(t, cases)
init=c(cases[1])
#solves the ODE for times in t
out=ode(y=init, times=times, func=rate, parms=par)
#formats predicted data from ODE
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#calculates residuals from ODE
ssqr=sum((outdf$pred[outdf$t %in% t]-df$cases)^2)
return(ssqr)
}
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#minimize residuals with optim function
fit2=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
#simulating data based on estimated parameters
#parest=coef(fitval)
parest2=fit2$par
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=rate, parms=parest2)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#formatting the plots
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
#read data from JHU
JHU_F_data <- read.csv("JHU_data/time_series_covid19_deaths_global.csv")
JHU_F_data<-t(JHU_F_data)
#format case data for a given region
cases=as.integer(JHU_F_data[5:nrow(JHU_F_data), 2])
cases=cases[!is.na(cases)]
#minimize residuals with optim function
fit2=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
#simulating data based on estimated parameters
#parest=coef(fitval)
parest2=fit2$par
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=rate, parms=parest2)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#formatting the plots
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
#format data
#cases=cases[!is.na(cases)]
t=c(1:length(cases))
df=data.frame(t, cases)
#formatting the plots
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
parest2
#minimize residuals with optim function
fit2=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
ffit2
fit2
ssq2(c(2, 1, 1, 5000), cases)
#minimize residuals with optim function
fit2=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
#simulating data based on estimated parameters
#parest=coef(fitval)
parest2=fit2$par
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=rate, parms=parest2)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#formatting the plots
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
#simulating data based on estimated parameters
parest=coef(fitval)
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=rate, parms=parest)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#formatting the plots
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
#load data
data <- read.csv("total_cases.csv")
#modify this line to choose region
cases=data$NScases
#format data
cases=cases[!is.na(cases)]
t=c(1:length(cases))
df=data.frame(t, cases)
init=c(cases[1])
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#minimize residuals with optim function
fit2=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
#simulating data based on estimated parameters
#parest=coef(fitval)
parest2=fit2$par
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=rate, parms=parest2)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#formatting the plots
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
#read data from JHU
JHU_F_data <- read.csv("JHU_data/time_series_covid19_deaths_global.csv")
JHU_F_data<-t(JHU_F_data)
#format case data for a given region
cases=as.integer(JHU_F_data[5:nrow(JHU_F_data), 2])
cases=cases[!is.na(cases)]
#discards data for days before initial outbreak
start=min(which(cases>0, arr.ind=TRUE))
cases=c(cases[start:length(cases)])
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#minimize residuals with optim function
fit2=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
#simulating data based on estimated parameters
#parest=coef(fitval)
parest2=fit2$par
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=rate, parms=parest2)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#formatting the plots
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
#format data
#cases=cases[!is.na(cases)]
t=c(1:length(cases))
#minimize residuals with optim function
fit2=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
#simulating data based on estimated parameters
#parest=coef(fitval)
parest2=fit2$par
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=rate, parms=parest2)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#formatting the plots
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
df=data.frame(t, cases)
init=c(cases[1])
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#minimize residuals with optim function
fit2=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
#simulating data based on estimated parameters
#parest=coef(fitval)
parest2=fit2$par
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=rate, parms=parest2)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#formatting the plots
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
source=("fit_datasets_F.R")
source=("fit_datasets_F.R")
source("fit_datasets_F.R")
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting_F.R")
#read data from JHU
JHU_F_data <- read.csv("JHU_data/time_series_covid19_deaths_global.csv")
JHU_F_data<-t(JHU_F_data)
JHU_C_data<-read.csv("JHU_data/time_series_covid19_confirmed_global.csv")
JHU_C_data<-t(JHU_C_data)
#format case data for a given region
cases=as.integer(JHU_F_data[5:nrow(JHU_F_data), 2])
cases=cases[!is.na(cases)]
#discards data for days before initial outbreak
start=min(which(cases>0, arr.ind=TRUE))
cases=c(cases[start:length(cases)])
#starting guess for parameters
par=c(r_tilde=2, p=1, alpha=1, K_tilde=5000)
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10000)))
parest=fit$par
init=c(c(cases[1]))
init=c(cases[1])
t=c(1:length(cases))
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=rate, parms=parest2)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
library(ggplot2)
out=ode(y=init, times=times, func=rate, parms=parest2)
out=ode(y=init, times=times, func=F_rate, parms=parest2)
df=data.frame(t, cases)
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=F_rate, parms=parest2)
out=ode(y=init, times=times, func=F_rate, parms=parest)
parest
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
#starting guess for parameters
par=c(r_tilde=2, p=1, alpha=1, K_tilde=30)
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10)))
parest=fit$par
parest
init=c(cases[1])
t=c(1:length(cases))
df=data.frame(t, cases)
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=F_rate, parms=parest)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
#starting guess for parameters
par=c(r_tilde=2, p=1, alpha=1, K_tilde=cases[length(cases)])
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10)))
parest=fit$par
init=c(cases[1])
t=c(1:length(cases))
df=data.frame(t, cases)
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=F_rate, parms=parest)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10^(ceiling(log10(cases[length(cases)]))))))
parest=fit$par
return(parest)
10^ceiling(log10(cases[length(cases)]))
10^floor(log10(cases[length(cases)]))
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10^floor(log10(cases[length(cases)])))))
parest=fit$par
return(parest)
parest
#starting guess for parameters
par=c(r_tilde=2, p=1, alpha=1, K_tilde=cases[length(cases)])
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10)))
parest=fit$par
parest
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting_F.R")
#read data from JHU
JHU_F_data <- read.csv("JHU_data/time_series_covid19_deaths_global.csv")
JHU_F_data<-t(JHU_F_data)
JHU_C_data<-read.csv("JHU_data/time_series_covid19_confirmed_global.csv")
JHU_C_data<-t(JHU_C_data)
#generates a vector of region labels for the estimates (JHU data)
regions=function(data){
regions=c()
for(x in seq(1, ncol(data))){
#combines label from first and second row (region and country)
regions=append(regions, paste(data[1, x], data[2, x]))
}
return(regions)
}
#fits r, p, alpha, and K for a given region
fit_param_F=function(region, data){
#format case data for a given region
cases=as.integer(data[5:nrow(data), region])
cases=cases[!is.na(cases)]
#discards data for days before initial outbreak
start=min(which(cases>0, arr.ind=TRUE))
cases=c(cases[start:length(cases)])
#starting guess for parameters
par=c(r_tilde=2, p=1, alpha=1, K_tilde=cases[length(cases)])
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10^floor(log10(cases[length(cases)])))))
parest=fit$par
return(parest)
}
fit_multiple_F=function(data){
#removes columns for countries with no cases
no_cases=c()
for(x in seq(1, ncol(data))){
cases=as.integer(data[5:nrow(data), x])
cases=cases[!is.na(cases)]
if(sum(cases)==0){
no_cases=append(no_cases, x)
}
}
data=subset(data, select=-c(no_cases))
#generates labels
regions=regions(data)
#performs the fit for the first element in the dataframe (assumption: the dataframe has at least 2 columns)
paramdf=data.frame(fit_param_F(1, data))
colnames(paramdf)=c(regions[1])
#performs the fit for the rest of the regions, adds results to the dataframe
#if all the data were working, the loop would be for seq(2, ncol(data))
for(x in seq(2, ncol(data))){
print(x)
p=data.frame(fit_param_F(x, data))
colnames(p)=c(regions[x])
paramdf=cbind(paramdf, p)
print(p)
}
return(paramdf)
}
fit_tau_mu_CFR=function(region, C_data, F_data){
#estimates paramters for fatality data
F_parest=fit_param_F(region, F_data)
F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
#format case data for a given region
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
#discards data for days before initial outbreak
# start=min(which(cases_C>0, arr.ind=TRUE))
#  cases_C=c(cases_C[start:length(cases_C)])
#format fatality data for a given region
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#discards data for days before initial outbreak
# cases_F=c(cases_F[start:length(cases_F)])
par=c(tau=20)
# par=c(tau=1, mu_CFR=0.005)
#use this if just fitting tau
fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, method="Brent", lower=0, upper=1)
#fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, control=list(parscale=c(1,.5)))
parest=fit$par
return(parest)
}
#plot=ggplot(data=cdf, aes(x=x, y=cases_C))+geom_point(data=cdf, aes(x=x, y=.0375*cases_C, color="red"))+geom_point(data=fdf, aes(x=x, y=cases_F, color="green"))
#print(plot)
fit_multiple_F(JHU_F_data)
fit_multiple_F=function(data){
#removes columns for countries with no cases
few_cases=c()
for(x in seq(1, ncol(data))){
cases=as.integer(data[5:nrow(data), x])
cases=cases[!is.na(cases)]
if(sum(cases)<=10){
few_cases=append(few_cases, x)
}
}
data=subset(data, select=-c(few_cases))
#generates labels
regions=regions(data)
#performs the fit for the first element in the dataframe (assumption: the dataframe has at least 2 columns)
paramdf=data.frame(fit_param_F(1, data))
colnames(paramdf)=c(regions[1])
#performs the fit for the rest of the regions, adds results to the dataframe
#if all the data were working, the loop would be for seq(2, ncol(data))
for(x in seq(2, ncol(data))){
print(x)
p=data.frame(fit_param_F(x, data))
colnames(p)=c(regions[x])
paramdf=cbind(paramdf, p)
print(p)
}
return(paramdf)
}
fit_multiple_F(JHU_F_data)
fit_multiple_F=function(data){
#removes columns for countries with no cases
few_cases=c()
for(x in seq(1, ncol(data))){
cases=as.integer(data[5:nrow(data), x])
cases=cases[!is.na(cases)]
if(cases[length(cases)]<=10){
few_cases=append(few_cases, x)
}
}
data=subset(data, select=-c(few_cases))
#generates labels
regions=regions(data)
#performs the fit for the first element in the dataframe (assumption: the dataframe has at least 2 columns)
paramdf=data.frame(fit_param_F(1, data))
colnames(paramdf)=c(regions[1])
#performs the fit for the rest of the regions, adds results to the dataframe
#if all the data were working, the loop would be for seq(2, ncol(data))
for(x in seq(2, ncol(data))){
print(x)
p=data.frame(fit_param_F(x, data))
colnames(p)=c(regions[x])
paramdf=cbind(paramdf, p)
print(p)
}
return(paramdf)
}
fit_multiple_F(JHU_F_data)
#format case data for a given region
cases=as.integer(JHU_F_data[5:nrow(JHU_F_data), 99])
cases=cases[!is.na(cases)]
#discards data for days before initial outbreak
start=min(which(cases>0, arr.ind=TRUE))
cases=c(cases[start:length(cases)])
#starting guess for parameters
par=c(r_tilde=2, p=1, alpha=1, K_tilde=cases[length(cases)])
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10)))
parest=fit$par
init=c(cases[1])
t=c(1:length(cases))
df=data.frame(t, cases)
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=F_rate, parms=parest)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
parest
cases
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10^floor(log10(cases[length(cases)])))))
parest=fit$par
init=c(cases[1])
t=c(1:length(cases))
df=data.frame(t, cases)
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=F_rate, parms=parest)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
parest
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10)))
parest=fit$par
init=c(cases[1])
t=c(1:length(cases))
df=data.frame(t, cases)
times=seq(min(t), max(t), 0.1)
out=ode(y=init, times=times, func=F_rate, parms=parest)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
plot=ggplot(data=outdf, aes(x=t, y=pred, color="red"))+geom_line()+geom_point(data=df, aes(x=t, cases, color="green"))+theme(legend.position="none")+labs(x="time (days)", y="Total cases")
print(plot)
parest
#fits r, p, alpha, and K for a given region
fit_param_F=function(region, data){
#format case data for a given region
cases=as.integer(data[5:nrow(data), region])
cases=cases[!is.na(cases)]
#discards data for days before initial outbreak
start=min(which(cases>0, arr.ind=TRUE))
cases=c(cases[start:length(cases)])
#starting guess for parameters
par=c(r_tilde=2, p=1, alpha=1, K_tilde=cases[length(cases)])
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10)))
parest=fit$par
return(parest)
}
fit_tau_mu_CFR(2, JHU_C_data, JHU_F_data)
