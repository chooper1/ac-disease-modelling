plot(c(1:length(cases_F)), cases_F)
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
par_C=c(r=2, p=1, alpha=1, K=5000)
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
C_df
F_df
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
start
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
F_df
F_df$y/C_df$cases_C
*100
F_df$y/C_df$cases_C*100
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting_F.R")
#read data from JHU
JHU_F_data <- read.csv("JHU_data/time_series_covid19_deaths_global.csv")
JHU_F_data<-t(JHU_F_data)
JHU_C_data<-read.csv("JHU_data/time_series_covid19_confirmed_global.csv")
JHU_C_data<-t(JHU_C_data)
JHU_R_data<-read.csv("JHU_data/time_series_covid19_recovered_global.csv")
JHU_R_data<-t(JHU_R_data)
#this data goes up to May 4, for comparison with Flaxman et. al
C_data_May_4<-read.csv("JHU_data/time_series_covid19_confirmed_global - to May 4.csv")
C_data_May_4<-t(C_data_May_4)
F_data_May_4 <- read.csv("JHU_data/time_series_covid19_deaths_global - to May 4.csv")
F_data_May_4<-t(F_data_May_4)
#generates a vector of region labels for the estimates (JHU data)
regions=function(data){
regions=c()
for(x in seq(1, ncol(data))){
#combines label from first and second row (region and country)
regions=append(regions, paste(data[1, x], data[2, x]))
}
return(regions)
}
#fits r_tilde, p, alpha, and K_tilde for a given region
fit_param_F=function(region, data){
#format case data for a given region
cases=as.integer(data[5:nrow(data), region])
cases=cases[!is.na(cases)]
#discards data for days before initial outbreak
start=min(which(cases>0, arr.ind=TRUE))
cases=c(cases[start:length(cases)])
#starting guess for parameters
par=c(r_tilde=2, p=1, alpha=1, K_tilde=cases[length(cases)])
#performs the fit
fit=optim(par=par, fn=ssq_F, cases=cases, control=list(parscale=c(1,1,1,10^floor(log10(cases[length(cases)])))))
parest=fit$par
return(parest)
}
fit_multiple_F=function(data){
#removes columns for countries with no cases
few_cases=c()
for(x in seq(1, ncol(data))){
cases=as.integer(data[5:nrow(data), x])
cases=cases[!is.na(cases)]
if(cases[length(cases)]<=10){
few_cases=append(few_cases, x)
}
}
data=subset(data, select=-c(few_cases))
#generates labels
regions=regions(data)
#performs the fit for the first element in the dataframe (assumption: the dataframe has at least 2 columns)
paramdf=data.frame(fit_param_F(1, data))
colnames(paramdf)=c(regions[1])
#performs the fit for the rest of the regions, adds results to the dataframe
#if all the data were working, the loop would be for seq(2, ncol(data))
for(x in seq(2, ncol(data))){
print(x)
p=data.frame(fit_param_F(x, data))
colnames(p)=c(regions[x])
paramdf=cbind(paramdf, p)
print(p)
}
return(paramdf)
}
fit_tau_mu_CFR=function(region, C_data=JHU_C_data, F_data=JHU_F_data){
#estimates paramters for fatality data (discarding days before outbreak)
F_parest=fit_param_F(region, F_data)
#F_parest=c(F_parest[1], F_parest[2], F_parest[3], F_parest[4])
#format case data for a given region
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
#format fatality data for a given region
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#use this if just fitting tau
#par=c(tau=20)
# fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, method="Brent", lower=-30, upper=30)
#for fitting tau and mu_CFR
par=c(tau=20, mu_CFR=0.05)
fit=optim(par=par, fn=ssq_C_F, cases_C=cases_C, cases_F=cases_F, F_parest=F_parest, control=list(parscale=c(1,.5)))
parest=fit$par
return(parest)
}
#plots the unfitted case data scaled down to visualize the curves in comparison to one another
plot_cases_scaled=function(region, C_data=JHU_C_data, F_data=JHU_F_data, factor=0.05){
regions=regions(C_data)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
times=c(1:length(cases_C))
C_df=data.frame(times, cases_C)
F_df=data.frame(times, cases_F)
plot=ggplot(data=C_df, aes(x=times, y=cases_C*factor, color="green"))+geom_line()+geom_line(data=F_df, aes(x=times, y=cases_F, color="red"))+theme(legend.position="none")+labs(title=regions[region])
print(plot)
}
#plots the shifted and scaled fitted curves to see how good the tau and mu_CFR fit is
#par is returned from fit_tau_mu_CFR
plot_shifted_scaled_cases=function(region, par=NULL, C_data=JHU_C_data, F_data=JHU_F_data){
if(is.null(par)==TRUE){
par=fit_tau_mu_CFR(region, C_data, F_data)
}
regions=regions(C_data)
tau=par[1]
factor=par[2]
#fits parameters to generate values for F
F_parest=fit_param_F(region, F_data)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#shift times for cumulative cases by tau
times_C=c(1:length(cases_C))+tau
#C_df=data.frame(times_C, cases_C)
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
#generates values for F from fit
F_df=generate_F(times_C, init, start, F_parest)
#generates values for C from fit
par_C=c(r=2, p=1, alpha=1, K=5000)
C_df=generate_C(par_C, cases_C, times_C)
plot=ggplot(data=C_df, aes(x=times, y=cases_C*factor, color="red"))+geom_line()+geom_line(data=F_df, aes(x=times, y=y, color="green"))+geom_line()+theme(legend.position="none")+labs(title=regions[region])
print(plot)
}
#for this function, factor is the estimate for mu_CFR returned from fit_tau_mu_CFR, and mu_CFR is a sequence of guesses for the true mu_CFR
#function plots the proportion of cases reported vs. actual mu_CFR
plot_underreporting_vs_mu_CFR=function(factor, mu_CFR, region, C_data=JHU_C_data, F_data=JHU_F_data){
regions=regions(C_data)
ratios=c()
for(x in mu_CFR){
ratio=x/factor
ratios=append(ratios, ratio)
}
df=data.frame(mu_CFR, ratios)
#print(ratios[1])
#print(ratios[length(ratios)])
plot=ggplot(data=df, aes(x=mu_CFR, y=ratios))+geom_line()+ labs(title=regions[region])
print(plot)
}
#returns the "underreporting ratio" vs time
phi_vs_time=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
parest=fit_tau_mu_CFR(region, C_data, F_data)
tau=parest[1]
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
start=min(which(cases_F>0, arr.ind=TRUE))
init=cases_F[start]
F_parest=fit_param_F(region, F_data)
#shift times for cumulative cases by tau
times=c(1:length(cases_C))+tau
#generates C and F curves from the fits
par_C=c(r=2, p=1, alpha=1, K=5000)
C_df=generate_C(par_C, cases_C, times)
F_df=generate_F(times, init, start, F_parest)
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
#use the fit instead of the data?
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
#removes the zeroes before "start"
F_df=F_df[-(1:start-1),]
C_df=C_df[-(1:start-1),]
times=times[-(1:start-1)]
ratios=((1/mu_CFR)*F_df$y)/C_df$cases_C
df=data.frame(times, ratios)
return(df)
}
#plots the ratios calculated in ratios_vs_time()
plot_phi_vs_time=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=.01){
regions=regions(C_data)
df=phi_vs_time(region, C_data, F_data, mu_CFR=mu_CFR)
plot=ggplot(data=df, aes(x=times, y=ratios))+geom_line()+labs(title=regions[region])+theme(legend.position="none")
print(plot)
}
#returns an estimate for total number of people infected in a region to date, accounting for underreporting
total_infected=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
regions=regions(C_data)
df=phi_vs_time(region, C_data, F_data, mu_CFR=mu_CFR)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
#starts calculating the ratio at the point where both C and F become nonzero (should be very close together, since they have been shifted)
start=max(min(which(cases_C>0, arr.ind=TRUE)), min(which(cases_F>0, arr.ind=TRUE)))
pre_start_cases=cases_C[start-1]
cases_C=c(cases_C[start:length(cases_C)])
new_cases=c(cases_C[1])
for(x in c(2:length(cases_C))){
new_case=cases_C[x]-cases_C[x-1]
new_cases=append(new_cases, new_case)
}
true_new_cases=new_cases*df$ratios
total_cases=sum(true_new_cases)+pre_start_cases
print(regions[region])
return(total_cases)
}
total_infected_multiple_regions=function(C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01){
#removes columns for countries with no cases
few_cases=c()
for(x in seq(1, ncol(C_data))){
cases=as.integer(C_data[5:nrow(C_data), x])
cases=cases[!is.na(cases)]
if(cases[length(cases)]<=10){
few_cases=append(few_cases, x)
}
}
C_data=subset(C_data, select=-c(few_cases))
F_data=subset(F_data, select=-c(few_cases))
#generates labels
regions=regions(C_data)
totals=c()
for(x in seq(1, ncol(C_data))){
print(x)
total=total_infected(region=x, C_data=C_data, F_data=F_data, mu_CFR=mu_CFR)
totals=append(totals, total)
print(total)
}
return(totals)
}
plot_shifted_scaled_cases(24)
total_infected(24)
plot_shifted_scaled_cases(25)
plot_cases_scaled(25)
plot_shifted_scaled_cases(26)
plot_shifted_scaled_cases(27)
total_infected(27)
plot_shifted_scaled_cases(28)
total_infected(28)
plot_shifted_scaled_cases(29)
total_infected(29)
plot_shifted_scaled_cases(12)
plot_cases_scaled(18, JHU_C_data, JHU_F_data)
plot_cases_scaled(25)
plot_cases_scaled(26)
plot_shifted_scaled_cases(30)
total_infected(30)
plot_shifted_scaled_cases(31)
total_infected(31)
plot_shifted_scaled_cases(32)
total_infected(32)
plot_shifted_scaled_cases(33)
plot_cases_scaled(33)
plot_cases_scaled(33, factor=0.01)
plot_shifted_scaled_cases(34)
plot_shifted_scaled_cases(35)
total_infected(35)
plot_shifted_scaled_cases(36)
total_infected(36)
plot_shifted_scaled_cases(37)
total_infected(37)
plot_shifted_scaled_cases(38)
plot_shifted_scaled_cases(39)
total_infected(39)
plot_shifted_scaled_cases(40)
plot_cases_scaled(40)
plot_cases_scaled(40, factor=1)
plot_shifted_scaled_cases(41)
plot_cases_scaled(41, factor=1)
total_infected(41)
plot_shifted_scaled_cases(42)
total_infected(42)
plot_shifted_scaled_cases(43)
total_infected(43)
plot_shifted_scaled_cases(44)
plot_cases_scaled(44)
plot_shifted_scaled_cases(45)
total_infected(45)
plot_shifted_scaled_cases(46)
total_infected(46)
plot_shifted_scaled_cases(47)
total_infected(47)
plot_shifted_scaled_cases(48)
total_infected(48)
plot_shifted_scaled_cases(49)
total_infected(49)
plot_shifted_scaled_cases(50)
plot_cases_scaled(50)
plot_cases_scaled(50, factor = .01)
plot_cases_scaled(50, factor = .005)
plot_shifted_scaled_cases(51)
plot_cases_scaled(51)
plot_shifted_scaled_cases(52)
plot_cases_scaled(52)
plot_cases_scaled(52, factor = .01)
plot_shifted_scaled_cases(53)
plot_cases_scaled(53)
plot_shifted_scaled_cases(54)
total_infected(54)
plot_shifted_scaled_cases(55)
plot_cases_scaled(55)
plot_shifted_scaled_cases(56)
plot_cases_scaled(56)
fit_Belgium=fit_to_SEIR(region=24, pop=11460000, intervention=57)
fit_Belgium=fit_to_SEIR(region=17, pop=8859000, intervention=55)
fit_Austria=fit_to_SEIR(region=17, pop=8859000, intervention=55)
fit_Austria
plot_SEIR_fit(region=17, pop=8859000, fit_par=fit_Austria, compartment = "C", intervention=55)
plot_SEIR_fit(region=17, pop=8859000, fit_par=fit_Austria, compartment = "R", intervention=55)
plot_SEIR_fit(region=17, pop=8859000, fit_par=fit_Austria, compartment = "F", intervention=55)
#intervention is the number of the day when interventions started, starting from the beginning of the data in the datasets
fit_to_SEIR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_IFR=0.01, pop, beta_type="time-dep", roll_size=1, intervention=NULL){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
cases_R=rollmean(cases_R, roll_size)
#active_cases=cases_C-(cases_R+cases_F)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=cases_C[1], I_3=0, I_4=0, R_1=0, R_2=0, F_=cases_F[1])
N=pop
if(beta_type=="different"){
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1)
}
else if(beta_type=="equal"){
par=c(beta=0.38)
} else if(beta_type=="time-dep"){
#par=c(beta_b=0.38, beta_a=0.38, rho=0.55)
par=c(beta_b=0.38, beta_a=0.38)
}
#scale on parameters is different depending on how many pars there are - fix this!
#ODE_fit=optim(par=par, fn=ssq_SEIR, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, control=list(parscale=c(1,1, 1, 1, 1)))
# ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, beta_type=beta_type, intervention=intervention, mu_CFR=mu_CFR, method="L-BFGS-B", lower=c(0, 0), upper=c(1, 1))
ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, beta_type=beta_type, intervention=intervention, mu_CFR=mu_CFR)
fit_par=ODE_fit$par
return(fit_par)
}
plot_SEIR_fit(region=17, pop=8859000, fit_par=fit_Austria, compartment = "R", intervention=55)
#intervention is the number of the day when interventions started, starting from the beginning of the data in the datasets
fit_to_SEIR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_IFR=0.01, pop, beta_type="time-dep", roll_size=1, intervention=NULL){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
# regions_R=regions(R_data)
#index_R=which(regions_R==region_name, arr.ind=TRUE)
#cases_R=as.integer(R_data[5:nrow(R_data), index_R])
#cases_R=cases_R[!is.na(cases_R)]
#cases_R=c(cases_R[start:length(cases_R)])
#cases_R=rollmean(cases_R, roll_size)
#active_cases=cases_C-(cases_R+cases_F)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=cases_C[1], I_3=0, I_4=0, R_1=0, R_2=0, F_=cases_F[1])
N=pop
if(beta_type=="different"){
par=c(beta_l=0.1, beta_1=0.1, beta_2=0.1)
}
else if(beta_type=="equal"){
par=c(beta=0.38)
} else if(beta_type=="time-dep"){
#par=c(beta_b=0.38, beta_a=0.38, rho=0.55)
par=c(beta_b=0.38, beta_a=0.38)
}
#scale on parameters is different depending on how many pars there are - fix this!
#ODE_fit=optim(par=par, fn=ssq_SEIR, region=region, active_cases=active_cases, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, control=list(parscale=c(1,1, 1, 1, 1)))
# ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, beta_type=beta_type, intervention=intervention, mu_CFR=mu_CFR, method="L-BFGS-B", lower=c(0, 0), upper=c(1, 1))
ODE_fit=optim(par=par, fn=ssq_SEIR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, cases_R=cases_R, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, S0=S0, pop=pop, N=N, beta_type=beta_type, intervention=intervention, mu_CFR=mu_CFR)
fit_par=ODE_fit$par
return(fit_par)
}
#compartment is "A" (active cases), "F" (deaths), or "R" (recovered)
#fit_param is output from fit_to_SEIR. If no parameters are passed, fit_to_SEIR will run
plot_SEIR_fit=function(region, C_data=JHU_C_data, F_data=JHU_F_data, R_data=JHU_R_data, mu_IFR=0.01, pop, beta_type="time-dep",fit_par=NULL, compartment, roll_size=1, intervention=NULL){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type, roll_size=roll_size, intervention=intervention)
}
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
#start=times[1]
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=min(which(cases_C>0, arr.ind=TRUE))
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C=rollmean(cases_C, roll_size)
times=rollmean(times, roll_size)
C_df=data.frame(times, cases_C)
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F=rollmean(cases_F, roll_size)
F_df=data.frame(times, cases_F)
regions_R=regions(R_data)
index_R=which(regions_R==region_name, arr.ind=TRUE)
cases_R=as.integer(R_data[5:nrow(R_data), index_R])
cases_R=cases_R[!is.na(cases_R)]
cases_R=c(cases_R[start:length(cases_R)])
cases_R=rollmean(cases_R, roll_size)
R_df=data.frame(times, cases_R)
# active_cases=cases_C-(cases_R+cases_F)
#active_cases_df=data.frame(times, active_cases)
S0=c(S=pop, E=0, L=0, I_1=0, I_2=cases_C[1], I_3=0, I_4=0, R_1=0, R_2=0, F_=cases_F[1])
N=pop
if(beta_type=="different"){
names=c("beta_l", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(fit_par[1], fit_par[2], fit_par[3], rho=1-mu_CFR, a=1,
kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names
} else if(beta_type=="equal"){
names=c("beta", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(fit_par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names
} else if(beta_type=="time-dep"){
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(fit_par[1], fit_par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names  }
ode_soln=ode(y=S0, times, func=rhs_SEIR, par=fit_par, fit=fit, N=N, phi=phi, beta_type=beta_type, intervention=intervention)
I_2=ode_soln[,"I_2"]
I_4=ode_soln[,"I_4"]
R_2=ode_soln[,"R_2"]
F_=ode_soln[,"F_"]
sim_cases_C=I_2+I_4+R_2+F_
sim_C_df=data.frame(times, sim_cases_C)
sim_F_df=data.frame(times, F_)
sim_R_df=data.frame(times, R_2)
if(compartment=="C"){
plot=ggplot(data=C_df, aes(x=times, y=cases_C))+geom_point()+geom_line(data=sim_C_df, aes(x=times, y=sim_cases_C))+labs(title=region_name)
print(plot)
}
else if(compartment=="F"){
plot=ggplot(data=F_df, aes(x=times, y=cases_F))+geom_point()+geom_line(data=sim_F_df, aes(x=times, y=F_))+labs(title=region_name)
print(plot)
}
else if(compartment=="R"){
plot=ggplot(data=R_df, aes(x=times, y=cases_R))+geom_point()+geom_line(data=sim_R_df, aes(x=times, y=R_2))+labs(title=region_name)
print(plot)
}
}
plot_SEIR_fit(region=17, pop=8859000, fit_par=fit_Austria, compartment = "R", intervention=55)
fit_France=fit_to_SEIR(region=117, pop=66990000, intervention=56)
plot_SEIR_fit(region=117, pop=66990000, fit_par=fit_France, compartment = "C", intervention=56)
plot_SEIR_fit(region=117, pop=66990000, fit_par=fit_France, compartment = "F", intervention=56)
plot_SEIR_fit(region=117, pop=66990000, fit_par=fit_France, compartment = "R", intervention=56)
fit_Denmark=fit_to_SEIR(region=95, pop=5806000, intervention=52)
plot_SEIR_fit(region=95, pop=5806000, fit_par=fit_Denmark, compartment = "C", intervention=52)
plot_SEIR_fit(region=95, pop=5806000, fit_par=fit_Denmark, compartment = "F", intervention=52)
plot_SEIR_fit(region=95, pop=5806000, fit_par=fit_Denmark, compartment = "R", intervention=52)
R0(region=95, fit_par=fit_Denmark, intervention=52)
fit_Germany=fit_to_SEIR(region=121, pop=83020000, intervention=61)
plot_SEIR_fit(region=121, pop=83020000, fit_par=fit_Germany, compartment = "C", intervention=61)
plot_SEIR_fit(region=121, pop=83020000, fit_par=fit_Germany, compartment = "F", intervention=61)
plot_SEIR_fit(region=121, pop=83020000, fit_par=fit_Germany, compartment = "R", intervention=61)
R0(region=121, fit_par=fit_Germany, intervention=61)
fit_Italy=fit_to_SEIR(region=138, pop=60360000, intervention=48)
fit_Norway=fit_to_SEIR(region=176, pop=5368000, intervention=51)
plot_SEIR_fit(region=176, pop=5368000, fit_par=fit_Norway, compartment = "C", intervention=51)
plot_SEIR_fit(region=176, pop=5368000, fit_par=fit_Norway, compartment = "F", intervention=51)
plot_SEIR_fit(region=176, pop=5368000, fit_par=fit_Norway, compartment = "R", intervention=51)
