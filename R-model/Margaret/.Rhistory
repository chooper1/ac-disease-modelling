fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#solODE=(y=21, x, func=ODEfun, )
library("ggplot2")
library(deSolve)
library(hydroGOF)
library(minpack.lm)
library(reshape2)
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
NSnewcases=c(7,13,10,17,5,17,20,12,5,20,23,23,14,29,26,31,17,32,31,34,21,17,29,43,30,32)
t=c(1:length(NScases))
df=data.frame(t, NScases)
rate=function(t, C, par){
#constants
r=par[1]
p=par[2]
alpha=1
K=10^8
#c is total cases
dC=r*(C^p)*(1-(C/K)^alpha)
return(list(dC))
}
init=c(NScases[1])
par=c(r=2, p=2, alpha=1, K=10^8)
out=ode(y=init, times=t, func=rate, parms=par)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
ssqpar=function(par){
r=par[1]
p=par[2]
alpha=1
K=10^8
out=ode(y=init, times=t, func=rate, parms=par)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
ssqr=outdf$pred-df$NScases
return(ssqr)
}
par=c(r=0.5, p=0.5)
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#load libraries
library(deSolve)
library(minpack.lm)
#load and format data
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
NSnewcases=c(7,13,10,17,5,17,20,12,5,20,23,23,14,29,26,31,17,32,31,34,21,17,29,43,30,32)
t=c(1:length(NScases))
df=data.frame(t, NScases)
init=c(NScases[1])
#define the ODE
rate=function(t, C, par){
#constants
r=par[1]
p=par[2]
alpha=1
K=10^8
#c is total cases
dC=r*(C^p)*(1-(C/K)^alpha)
return(list(dC))
}
#function that calculates residuals (to be minimized)
ssqpar=function(par){
r=par[1]
p=par[2]
alpha=1
K=10^8
out=ode(y=init, times=t, func=rate, parms=par)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
ssqr=outdf$pred-df$NScases
return(ssqr)
}
#starting guess for parameters
par=c(r=0.5, p=0.5)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#load libraries
library(deSolve)
library(minpack.lm)
#load and format data
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
NSnewcases=c(7,13,10,17,5,17,20,12,5,20,23,23,14,29,26,31,17,32,31,34,21,17,29,43,30,32)
t=c(1:length(NScases))
df=data.frame(t, NScases)
init=c(NScases[1])
#define the ODE
rate=function(t, C, par){
#parameters (alpha and K set)
r=par[1]
p=par[2]
alpha=1
K=10^8
#c is total cases
dC=r*(C^p)*(1-(C/K)^alpha)
return(list(dC))
}
#function that calculates residuals (to be minimized)
ssqpar=function(par){
r=par[1]
p=par[2]
alpha=1
K=10^8
#solves the ODE for times in t
out=ode(y=init, times=t, func=rate, parms=par)
#formats predicted data from ODE
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#calculates residuals from ODE
ssqr=outdf$pred-df$NScases
return(ssqr)
}
#starting guess for parameters
par=c(r=0.5, p=0.5)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#load libraries
library(deSolve)
library(minpack.lm)
#load and format data
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
#load libraries
library(deSolve)
library(minpack.lm)
#load and format data
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
NSnewcases=c(7,13,10,17,5,17,20,12,5,20,23,23,14,29,26,31,17,32,31,34,21,17,29,43,30,32)
t=c(1:length(NScases))
df=data.frame(t, NScases)
init=c(NScases[1])
#define the ODE
rate=function(t, C, par){
#parameters (alpha and K set)
r=par[1]
p=par[2]
alpha=1
K=10^8
#c is total cases
dC=r*(C^p)*(1-(C/K)^alpha)
return(list(dC))
}
#function that calculates residuals (to be minimized)
ssqpar=function(par){
r=par[1]
p=par[2]
alpha=1
K=10^8
#solves the ODE for times in t
out=ode(y=init, times=t, func=rate, parms=par)
#formats predicted data from ODE
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#calculates residuals from ODE
ssqr=outdf$pred-df$NScases
return(ssqr)
}
#starting guess for parameters
par=c(r=0.5, p=0.5)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#starting guess for parameters
par=c(r=2, p=0.5)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#starting guess for parameters
par=c(r=1.94, p=0.45)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#load libraries
library(deSolve)
library(minpack.lm)
#load and format data
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
NSnewcases=c(7,13,10,17,5,17,20,12,5,20,23,23,14,29,26,31,17,32,31,34,21,17,29,43,30,32)
t=c(1:length(NScases))
df=data.frame(t, NScases)
init=c(NScases[1])
#define the ODE
rate=function(t, C, par){
#parameters (alpha and K set)
r=par[1]
p=par[2]
alpha=1
K=10^8
#c is total cases
dC=r*(C^p)*(1-(C/K)^alpha)
return(list(dC))
}
#function that calculates residuals (to be minimized)
ssqpar=function(par){
r=par[1]
p=par[2]
alpha=1
K=10^8
#solves the ODE for times in t
out=ode(y=init, times=t, func=rate, parms=par)
#formats predicted data from ODE
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#calculates residuals from ODE
ssqr=outdf$pred-df$NScases
return(ssqr)
}
#starting guess for parameters
par=c(r=1.94, p=0.45)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
SEIR_data<-read.csv("SSA runs.csv")
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting.R")
SEIR_data<-read.csv("SSA runs.csv")
View(SEIR_data)
t[nrow(SEIR_data)]
SEIR_data[nrow(SEIR_data)]
SEIR_data$t
SEIR_data$t[length(SEIR_data[t])]
SEIR_data$t[length(SEIR_data$t[t])]
SEIR_data$t[length(SEIR_data$t)]
nrow(SEIR_data)
SEIR_data$t[13805]
times=c(seq(0, floor(SEIR_data$t[nrow(SEIR_data)])))
times
intersect(times, SEIR_data$t)
SEIR_data$t
intersect(SEIR_data$t, 6)
intersect(SEIR_data$t, 6.0)
SEIR_data %in% times
times
SEIR_data$time %in% times
SEIR_data$t %in% times
which(c(SEIR_data %in% times), arr.ind = FALSE)
which(SEIR_data %in% times, arr.ind = FALSE)
which(c(SEIR_data$t %in% times), arr.ind = FALSE)
SEIR_data[which(c(SEIR_data$t %in% times), arr.ind = FALSE)]
SEIR_data$t[which(c(SEIR_data$t %in% times), arr.ind = FALSE)]
SEIR_data$run[1]
which(SEIR_data$run==3, arr.ind=FALSE)
paste("run", toString(1))
SEIR_data[1]
SEIR_data[1,]
paste("run", toString(1))=SEIR_data[which(SEIR_data$run==1, arr.ind=FALSE),]
toString(1)=SEIR_data[which(SEIR_data$run==1, arr.ind=FALSE),]
obj[[x]]=SEIR_data[which(SEIR_data$run==1, arr.ind=FALSE),]
x=list(2)
X[[1]]
x[[1]]
x[1]
name=list(paste("run", toString(3), sep=""))
name
name[[1]]=SEIR_data[which(SEIR_data$run==3, arr.ind=FALSE), 1]
run3
name[[1]]
name=list(paste("run", toString(3), sep=""))
name[[1]]
name=list(name=paste("run", toString(x), sep=""))
name=list(name=paste("run", toString(3), sep=""))
name[["name"]]<-SEIR_data[which(SEIR_data$run==3, arr.ind=FALSE), 1]
run3
name[["name"]]
name=list(name=paste("run", toString(3), sep=""))
name[["name"]]
df=split(SEIR_data, f=SEIR_data$run)
d
df
df[[1]]
length(df)
df[[1]][1]
df[[1]][1,]
nrow(df[[1]])
2%%8
3%%2
x=which(df[[run]][1]%%10==0)
x=which(df[[1]][1]%%10==0)
x
df[[1]][1,1]
df[[1]][1,5:15]
df[[1]][1,5:14]
sum(df[[1]][1,5:14])
df[[1]][2]
df[[1]][2, x]
x=which(df[[1]][1]%%10==0)
df[[1]][2, x]
cases<-function(SEIR_data, run){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%10==0)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
data.frame(totals)
}
cases(SEIR_data, 1)
sum(df[[run]][0,5:14])
sum(df[[1]][0,5:14])
df=split(SEIR_data, f=SEIR_data$run)
sum(df[[1]][0,5:14])
x=which(df[[1]][1]%%10==0)
x
df[[1]][1]
cases<-function(SEIR_data, run){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%10==1)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
data.frame(totals)
}
cases(SEIR_data, 1)
cases=cases(SEIR_data, 1)
cases
cases<-function(SEIR_data, run){
cases<-function(SEIR_data, run){
u
klhblhv
cases<-function(SEIR_data, run){
cases<-function(SEIR_data, run){
cases<-function(SEIR_data, run){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%10==1)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
data.frame(totals)
}
cases<-function(SEIR_data, run){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%10==1)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
return(data.frame(totals))
}
cases<-function(SEIR_data, run){
cases<-function(SEIR_data, run){
cases<-function(SEIR_data, run){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%10==1)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
return(data.frame(seq(1, length(totals), totals)))
}
cases=cases(SEIR_data, 1)
cases<-function(SEIR_data, run){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%10==1)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
return(data.frame(seq(1, length(totals)), totals))
}
cases(SEIR_data, 1)
cases<-function(SEIR_data, run){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%10==1)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
df=data.frame(seq(1, length(totals)), totals)
colnames(df)=(c("day", "total"))
return(df)
}
cases=cases(SEIR_data, 1)
cases
cases<-function(SEIR_data, run){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%10==1)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
#df=data.frame(seq(1, length(totals)), totals)
#colnames(df)=(c("day", "total"))
#return(df)
return(totals)
}
#fits r, p, alpha, and K for a given run
fit_param=function(SEIR_data, run){
#format case data for a given region
cases=cases(SEIR_data=SEIR_data, run)
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#performs the fit
fit=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
parest=fit$par
return(parest)
}
fit_param(SEIR_data, 1)
fit_multiple_SEIR=function(SEIR_data, run){
df=data.frame(fit_param_SEIR(SEIR_data, 1))
for(x in seq(2, length(split(SEIR_data, f=SEIR_data$run)))){
params=data.frame(fit_param_SEIR(SEIR_data, x))
cbind(df, params)
}
return(df)
}
fit_multiple_SEIR=function(SEIR_data, run){
df=data.frame(fit_param_SEIR(SEIR_data, 1))
for(x in seq(2, length(split(SEIR_data, f=SEIR_data$run)))){
print(x)
params=data.frame(fit_param_SEIR(SEIR_data, x))
cbind(df, params)
print(params)
}
return(df)
}
fit_multiple_SEIR=function(SEIR_data){
df=data.frame(fit_param_SEIR(SEIR_data, 1))
for(x in seq(2, length(split(SEIR_data, f=SEIR_data$run)))){
print(x)
params=data.frame(fit_param_SEIR(SEIR_data, x))
cbind(df, params)
print(params)
}
return(df)
}
fitted=fit_multiple_SEIR(SEIR_data)
#fits r, p, alpha, and K for a given run
fit_param_SEIR=function(SEIR_data, run){
#format case data for a given region
cases=cases(SEIR_data=SEIR_data, run)
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#performs the fit
fit=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
parest=fit$par
return(parest)
}
fit_multiple_SEIR=function(SEIR_data){
df=data.frame(fit_param_SEIR(SEIR_data, 1))
for(x in seq(2, length(split(SEIR_data, f=SEIR_data$run)))){
print(x)
params=data.frame(fit_param_SEIR(SEIR_data, x))
cbind(df, params)
print(params)
}
return(df)
}
#fits r, p, alpha, and K for a given run
fit_param_SEIR=function(SEIR_data, run){
#format case data for a given region
cases=cases(SEIR_data=SEIR_data, run)
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#performs the fit
fit=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
parest=fit$par
return(parest)
}
fitted=fit_multiple_SEIR(SEIR_data)
fit_multiple_SEIR=function(SEIR_data){
df=data.frame(fit_param_SEIR(SEIR_data, 1))
colnames(df)="1"
for(x in seq(2, length(split(SEIR_data, f=SEIR_data$run)))){
print(x)
params=data.frame(fit_param_SEIR(SEIR_data, x))
colnames(params)="x"
cbind(df, params)
print(params)
}
return(df)
}
fitted=fit_multiple_SEIR(SEIR_data)
fit_multiple_SEIR=function(SEIR_data){
df=data.frame(fit_param_SEIR(SEIR_data, 1))
colnames(df)="1"
for(x in seq(2, length(split(SEIR_data, f=SEIR_data$run)))){
print(x)
params=data.frame(fit_param_SEIR(SEIR_data, x))
colnames(params)=x
cbind(df, params)
print(params)
}
return(df)
}
fitted=fit_multiple_SEIR(SEIR_data)
fitted
fit_multiple_SEIR=function(SEIR_data){
df=data.frame(fit_param_SEIR(SEIR_data, 1))
colnames(df)="1"
for(x in seq(2, length(split(SEIR_data, f=SEIR_data$run)))){
print(x)
params=data.frame(fit_param_SEIR(SEIR_data, x))
colnames(params)=x
df=cbind(df, params)
print(params)
}
return(df)
}
fitted=fit_multiple_SEIR(SEIR_data)
write.csv(fit, "4_param_fit_SEIR.csv", row.names=TRUE)
write.csv(fitted, "4_param_fit_SEIR.csv", row.names=TRUE)
