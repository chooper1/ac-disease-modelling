plot_shifted_scaled_cases(129)
total_infected(129)
plot_shifted_scaled_cases(130)
total_infected(130)
plot_shifted_scaled_cases(131)
plot_cases_scaled(131)
total_infected(131)
plot_shifted_scaled_cases(132)
plot_cases_scaled(132)
total_infected(132)
plot_shifted_scaled_cases(133)
total_infected(133)
plot_shifted_scaled_cases(134)
plot_cases_scaled(134)
total_infected(134)
plot_shifted_scaled_cases(135)
plot_cases_scaled(135)
total_infected(135)
plot_shifted_scaled_cases(136)
total_infected(136)
plot_shifted_scaled_cases(137)
total_infected(137)
plot_shifted_scaled_cases(138)
plot_cases_scaled(138)
total_infected(138)
plot_shifted_scaled_cases(139)
plot_cases_scaled(139, factor=.01)
total_infected(139)
plot_shifted_scaled_cases(140)
plot_cases_scaled(140)
plot_shifted_scaled_cases(141)
plot_cases_scaled(141)
total_infected(141)
plot_cases_scaled(142)
plot_shifted_scaled_cases(142)
total_infected(142)
plot_shifted_scaled_cases(143)
total_infected(143)
plot_shifted_scaled_cases(144)
plot_cases_scaled(144)
total_infected(144)
plot_shifted_scaled_cases(145)
total_infected(145)
plot_shifted_scaled_cases(146)
total_infected(146)
plot_shifted_scaled_cases(147)
total_infected(147)
plot_shifted_scaled_cases(148)
plot_cases_scaled(140)
plot_cases_scaled(148)
total_infected(148)
plot_shifted_scaled_cases(149)
plot_cases_scaled(149)
total_infected(149)
plot_shifted_scaled_cases(150)
total_infected(150)
plot_shifted_scaled_cases(151)
plot_cases_scaled(151)
total_infected(151)
plot_shifted_scaled_cases(152)
total_infected(152)
plot_shifted_scaled_cases(153)
total_infected(153)
plot_shifted_scaled_cases(154)
plot_cases_scaled(154)
total_infected(154)
plot_shifted_scaled_cases(155)
total_infected(155)
plot_shifted_scaled_cases(156)
total_infected(156)
plot_shifted_scaled_cases(157)
plot_cases_scaled(157)
total_infected(157)
plot_shifted_scaled_cases(158)
total_infected(158)
plot_shifted_scaled_cases(159)
total_infected(159)
plot_shifted_scaled_cases(160)
total_infected(160)
plot_shifted_scaled_cases(161)
plot_cases_scaled(161)
total_infected(161)
plot_shifted_scaled_cases(162)
plot_shifted_scaled_cases(163)
total_infected(163)
plot_shifted_scaled_cases(164)
total_infected(164)
plot_shifted_scaled_cases(165)
plot_shifted_scaled_cases(166)
total_infected(166)
plot_shifted_scaled_cases(167)
total_infected(167)
plot_shifted_scaled_cases(168)
plot_cases_scaled(168)
total_infected(168)
plot_shifted_scaled_cases(169)
total_infected(169)
plot_shifted_scaled_cases(170)
total_infected(170)
plot_shifted_scaled_cases(171)
total_infected(171)
plot_shifted_scaled_cases(172)
plot_cases_scaled(172)
plot_shifted_scaled_cases(173)
total_infected(173)
plot_shifted_scaled_cases(174)
plot_cases_scaled(174)
total_infected(174)
plot_shifted_scaled_cases(175)
plot_cases_scaled(175)
total_infected(175)
plot_shifted_scaled_cases(176)
total_infected(176)
plot_shifted_scaled_cases(177)
total_infected(177)
plot_shifted_scaled_cases(178)
total_infected(178)
plot_shifted_scaled_cases(179)
total_infected(179)
plot_shifted_scaled_cases(180)
plot_shifted_scaled_cases(181)
plot_cases_scaled(181)
total_infected(181)
plot_shifted_scaled_cases(182)
total_infected(182)
plot_shifted_scaled_cases(183)
total_infected(183)
plot_shifted_scaled_cases(184)
total_infected(184)
plot_shifted_scaled_cases(185)
total_infected(185)
plot_shifted_scaled_cases(186)
plot_cases_scaled(186)
total_infected(186)
plot_shifted_scaled_cases(187)
total_infected(187)
plot_shifted_scaled_cases(188)
total_infected(188)
plot_shifted_scaled_cases(189)
plot_cases_scaled(189)
total_infected(189)
plot_shifted_scaled_cases(190)
plot_shifted_scaled_cases(192)
plot_cases_scaled(192)
total_infected(192)
plot_shifted_scaled_cases(193)
total_infected(193)
plot_cases_scaled(193)
plot_shifted_scaled_cases(194)
plot_cases_scaled(194)
total_infected(194)
plot_shifted_scaled_cases(195)
total_infected(195)
plot_shifted_scaled_cases(196)
plot_shifted_scaled_cases(197)
total_infected(197)
plot_shifted_scaled_cases(198)
plot_cases_scaled(198)
total_infected(198)
plot_shifted_scaled_cases(199)
total_infected(199)
plot_shifted_scaled_cases(200)
total_infected(200)
Rt_data(17)
df=Rt_data(17)
df2=df[!is.na(df)]
df2
df
df[,1]
which(is.infinite(df[1,])
q
which(is.infinite(df[1,]), arr.ind=TRUE)
is.infinite(df[1, 2])
which(is.infinite(c(df[1,]), arr.ind=TRUE)
which(is.infinite(c(df[1,])), arr.ind=TRUE)
length(Rt_df)
length(df)
length(df[,1])
df[2, 1]
df[2, 2]
df[40, 2]
is.na(df[2, 2])
plot_Rt_data=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01, tau_SI=9, roll_size=1){
Rt_df=Rt_data(regsion, C_data, F_data, mu_CFR, tau_SI)
remove=c()
for(x in c(1:length(Rt_df[,1]))){
if(is.na(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
else if(is.infinite(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
}
Rt_df=subset(Rt_df, select=-c(remove))
return(Rt_df)
}
plot_Rt_data(17)
plot_Rt_data=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01, tau_SI=9, roll_size=1){
Rt_df=Rt_data(region, C_data, F_data, mu_CFR, tau_SI)
remove=c()
for(x in c(1:length(Rt_df[,1]))){
if(is.na(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
else if(is.infinite(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
}
Rt_df=subset(Rt_df, select=-c(remove))
return(Rt_df)
}
plot_Rt_data(17)
df[1]
df[1,]
plot_Rt_data=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01, tau_SI=9, roll_size=1){
Rt_df=Rt_data(region, C_data, F_data, mu_CFR, tau_SI)
remove=c()
for(x in c(1:length(Rt_df[,1]))){
if(is.na(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
else if(is.infinite(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
}
Rt_df=R_df[-c(remove),]
return(Rt_df)
}
plot_Rt_data(17)
plot_Rt_data=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01, tau_SI=9, roll_size=1){
Rt_df=Rt_data(region, C_data, F_data, mu_CFR, tau_SI)
remove=c()
for(x in c(1:length(Rt_df[,1]))){
if(is.na(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
else if(is.infinite(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
}
Rt_df=Rt_df[-c(remove),]
return(Rt_df)
}
plot_Rt_data(17)
plot_Rt_data=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01, tau_SI=9, roll_size=1){
Rt_df=Rt_data(region, C_data, F_data, mu_CFR, tau_SI)
remove=c()
for(x in c(1:length(Rt_df[,1]))){
if(is.na(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
else if(is.infinite(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
}
Rt_df=Rt_df[-c(remove),]
Rt_df$times=rollmean(Rt_df$times, roll_size)
Rt_df$Rt=rollmean(Rt_df$Rt, roll_size)
return(Rt_df)
}
plot_Rt_data(17)
plot_Rt_data(17, roll_size = 5)
plot_Rt_data=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01, tau_SI=9, roll_size=1){
Rt_df=Rt_data(region, C_data, F_data, mu_CFR, tau_SI)
remove=c()
for(x in c(1:length(Rt_df[,1]))){
if(is.na(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
else if(is.infinite(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
}
Rt_df=Rt_df[-c(remove),]
times=rollmean(Rt_df$times, roll_size)
Rt=rollmean(Rt_df$Rt, roll_size)
Rt_df=data.frame(times, Rt)
return(Rt_df)
}
plot_Rt_data(17, roll_size = 5)
plot_Rt_data=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_CFR=0.01, tau_SI=9, roll_size=1){
Rt_df=Rt_data(region, C_data, F_data, mu_CFR, tau_SI)
remove=c()
for(x in c(1:length(Rt_df[,1]))){
if(is.na(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
else if(is.infinite(Rt_df[x, 2])==TRUE){
remove=append(remove, x)
}
}
Rt_df=Rt_df[-c(remove),]
times=rollmean(Rt_df$times, roll_size)
Rt=rollmean(Rt_df$Rt, roll_size)
Rt_df=data.frame(times, Rt)
plot=ggplot(data=Rt_df, aes(x=times, y=Rt))+geom_line()
print(plot)
}
plot_Rt_data(17, roll_size = 5)
plot_Rt_data(17)
fit_Austria=fit_to_SEIR(region=17, pop=8859000, intervention = 55)
fit_Austria
#right now only set up to work for
Rt_model=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, fit_par=NULL, intervention){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type="time-dep", roll_size=roll_size, intervention=intervention)
}
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2", "phi")
fit_par=c(fit_par[1], fit_par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5, phi=phi)
names(fit_par)=names
tau=fit_tau_mu_CFR(region)[1]
phi=phi_vs_time(region, C_data, F_data, mu_CFR=mu_CFR)
phi$times=phi$times-tau
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
Rt_list=c()
with(as.list(fit_par), {
for(t in (1:(ratios-floor(1/kappa)))){
t2=t+1/kappa
if(t2>=phi$times[1]){
newdata=data.frame(times=as.numeric(t2))
phi2=as.numeric(predict(fit, newdata=newdata))
}
else{
phi2=mean(phi$ratios)
}
if(t<intervention){
Rt=beta_b/kappa+(1/phi2)*beta_b/mu_2+(1-phi2)*beta_b/(mu_2+eta)
Rt_list=append(Rt_list, Rt)
}else{
Rt=beta_a/kappa+(1/phi2)*beta_a/mu_2+(1-phi2)*beta_a/(mu_2+eta)
Rt_list=append(Rt_list, Rt)
}
}
})
return(Rt_list)
}
Rt_Austria=Rt_model(region=17, fit_par=fit_Austria, intervention=55)
#right now only set up to work for
Rt_model=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, fit_par=NULL, intervention){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type="time-dep", roll_size=roll_size, intervention=intervention)
}
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2", "phi")
fit_par=c(fit_par[1], fit_par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5, phi=phi)
names(fit_par)=names
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi=phi_vs_time(region, C_data, F_data, mu_CFR=mu_CFR)
phi$times=phi$times-tau
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
Rt_list=c()
with(as.list(fit_par), {
for(t in (1:(ratios-floor(1/kappa)))){
t2=t+1/kappa
if(t2>=phi$times[1]){
newdata=data.frame(times=as.numeric(t2))
phi2=as.numeric(predict(fit, newdata=newdata))
}
else{
phi2=mean(phi$ratios)
}
if(t<intervention){
Rt=beta_b/kappa+(1/phi2)*beta_b/mu_2+(1-phi2)*beta_b/(mu_2+eta)
Rt_list=append(Rt_list, Rt)
}else{
Rt=beta_a/kappa+(1/phi2)*beta_a/mu_2+(1-phi2)*beta_a/(mu_2+eta)
Rt_list=append(Rt_list, Rt)
}
}
})
return(Rt_list)
}
Rt_Austria=Rt_model(region=17, fit_par=fit_Austria, intervention=55)
#right now only set up to work for
Rt_model=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, fit_par=NULL, intervention){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type="time-dep", roll_size=roll_size, intervention=intervention)
}
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2", "phi")
fit_par=c(fit_par[1], fit_par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5, phi=phi)
names(fit_par)=names
phi=phi_vs_time(region, C_data, F_data, mu_CFR=mu_CFR)
phi$times=phi$times-tau
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
Rt_list=c()
with(as.list(fit_par), {
for(t in (1:(ratios-floor(1/kappa)))){
t2=t+1/kappa
if(t2>=phi$times[1]){
newdata=data.frame(times=as.numeric(t2))
phi2=as.numeric(predict(fit, newdata=newdata))
}
else{
phi2=mean(phi$ratios)
}
if(t<intervention){
Rt=beta_b/kappa+(1/phi2)*beta_b/mu_2+(1-phi2)*beta_b/(mu_2+eta)
Rt_list=append(Rt_list, Rt)
}else{
Rt=beta_a/kappa+(1/phi2)*beta_a/mu_2+(1-phi2)*beta_a/(mu_2+eta)
Rt_list=append(Rt_list, Rt)
}
}
})
return(Rt_list)
}
Rt_Austria=Rt_model(region=17, fit_par=fit_Austria, intervention=55)
R0_model=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, fit_par=NULL, beta_type="time-dep", intervention=NULL){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type, roll_size=roll_size, intervention=intervention)
}
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
mu_CFR=tau_mu_CFR[2]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
phi=mean(phi$ratios)
if(beta_type=="different"){
names=c("beta_l", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2", "phi")
fit_par=c(fit_par[1], fit_par[2], fit_par[3], rho=1-mu_CFR, a=1,
kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5, phi=phi)
names(fit_par)=names
} else if(beta_type=="equal"){
names=c("beta_l", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2", "phi")
fit_par=c(fit_par[1], fit_par[1], fit_par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5, phi=phi)
names(fit_par)=names
} else if(beta_type=="time-dep"){
names=c("beta_l", "beta_1", "beta_2", "rho", "a", "kappa", "eta", "mu_E", "mu_2", "phi")
fit_par=c(fit_par[1], fit_par[1], fit_par[1], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5, phi=phi)
names(fit_par)=names  }
with(as.list(fit_par), {
R0=beta_l/kappa+beta_2/(phi*mu_2)+(1-1/phi)*beta_1/(mu_2+eta)
list(R0)
})
}
#right now only set up to work for
Rt_model=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, fit_par=NULL, intervention){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type="time-dep", roll_size=roll_size, intervention=intervention)
}
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(fit_par[1], fit_par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names
phi=phi_vs_time(region, C_data, F_data, mu_CFR=mu_CFR)
phi$times=phi$times-tau
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
Rt_list=c()
with(as.list(fit_par), {
for(t in (1:(ratios-floor(1/kappa)))){
t2=t+1/kappa
if(t2>=phi$times[1]){
newdata=data.frame(times=as.numeric(t2))
phi2=as.numeric(predict(fit, newdata=newdata))
}
else{
phi2=mean(phi$ratios)
}
if(t<intervention){
Rt=beta_b/kappa+(1/phi2)*beta_b/mu_2+(1-phi2)*beta_b/(mu_2+eta)
Rt_list=append(Rt_list, Rt)
}else{
Rt=beta_a/kappa+(1/phi2)*beta_a/mu_2+(1-phi2)*beta_a/(mu_2+eta)
Rt_list=append(Rt_list, Rt)
}
}
})
return(Rt_list)
}
Rt_Austria=Rt_model(region=17, fit_par=fit_Austria, intervention=55)
#right now only set up to work for
Rt_model=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, fit_par=NULL, intervention){
if(is.null(fit_par)==TRUE){
fit_par=fit_to_SEIR(region, C_data, F_data, R_data, mu_IFR, pop, beta_type="time-dep", roll_size=roll_size, intervention=intervention)
}
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
names=c("beta_b", "beta_a", "rho", "a", "kappa", "eta", "mu_E", "mu_2")
fit_par=c(fit_par[1], fit_par[2], rho=1-mu_CFR, a=1, kappa=1/1.2, eta=1/8, mu_E=1/4, mu_2=1/5)
names(fit_par)=names
phi=phi_vs_time(region, C_data, F_data, mu_CFR=mu_CFR)
phi$times=phi$times-tau
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
Rt_list=c()
with(as.list(fit_par), {
for(t in (1:(length(phi$times)-floor(1/kappa)))){
t2=t+1/kappa
if(t2>=phi$times[1]){
newdata=data.frame(times=as.numeric(t2))
phi2=as.numeric(predict(fit, newdata=newdata))
}
else{
phi2=mean(phi$ratios)
}
if(t<intervention){
Rt=beta_b/kappa+(1/phi2)*beta_b/mu_2+(1-phi2)*beta_b/(mu_2+eta)
Rt_list=append(Rt_list, Rt)
}else{
Rt=beta_a/kappa+(1/phi2)*beta_a/mu_2+(1-phi2)*beta_a/(mu_2+eta)
Rt_list=append(Rt_list, Rt)
}
}
})
return(Rt_list)
}
Rt_Austria=Rt_model(region=17, fit_par=fit_Austria, intervention=55)
Rt_Austria
