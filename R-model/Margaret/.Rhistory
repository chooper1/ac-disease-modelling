out=ode(y=init, times=t, func=rate, parms=par)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
ssqr=outdf$pred-df$NScases
return(ssqr)
}
par=c(r=1, p=2)
fitval=nls.lm(par=par, fn=ssqpar)
ssqpar(par)
par=c(r=0.5, p=0.5)
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#solODE=(y=21, x, func=ODEfun, )
library("ggplot2")
library(deSolve)
library(hydroGOF)
library(minpack.lm)
library(reshape2)
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
NSnewcases=c(7,13,10,17,5,17,20,12,5,20,23,23,14,29,26,31,17,32,31,34,21,17,29,43,30,32)
t=c(1:length(NScases))
df=data.frame(t, NScases)
rate=function(t, C, par){
#constants
r=par[1]
p=par[2]
alpha=1
K=10^8
#c is total cases
dC=r*(C^p)*(1-(C/K)^alpha)
return(list(dC))
}
init=c(NScases[1])
par=c(r=2, p=2, alpha=1, K=10^8)
out=ode(y=init, times=t, func=rate, parms=par)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
ssqpar=function(par){
r=par[1]
p=par[2]
alpha=1
K=10^8
out=ode(y=init, times=t, func=rate, parms=par)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
ssqr=outdf$pred-df$NScases
return(ssqr)
}
par=c(r=0.5, p=0.5)
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#load libraries
library(deSolve)
library(minpack.lm)
#load and format data
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
NSnewcases=c(7,13,10,17,5,17,20,12,5,20,23,23,14,29,26,31,17,32,31,34,21,17,29,43,30,32)
t=c(1:length(NScases))
df=data.frame(t, NScases)
init=c(NScases[1])
#define the ODE
rate=function(t, C, par){
#constants
r=par[1]
p=par[2]
alpha=1
K=10^8
#c is total cases
dC=r*(C^p)*(1-(C/K)^alpha)
return(list(dC))
}
#function that calculates residuals (to be minimized)
ssqpar=function(par){
r=par[1]
p=par[2]
alpha=1
K=10^8
out=ode(y=init, times=t, func=rate, parms=par)
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
ssqr=outdf$pred-df$NScases
return(ssqr)
}
#starting guess for parameters
par=c(r=0.5, p=0.5)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#load libraries
library(deSolve)
library(minpack.lm)
#load and format data
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
NSnewcases=c(7,13,10,17,5,17,20,12,5,20,23,23,14,29,26,31,17,32,31,34,21,17,29,43,30,32)
t=c(1:length(NScases))
df=data.frame(t, NScases)
init=c(NScases[1])
#define the ODE
rate=function(t, C, par){
#parameters (alpha and K set)
r=par[1]
p=par[2]
alpha=1
K=10^8
#c is total cases
dC=r*(C^p)*(1-(C/K)^alpha)
return(list(dC))
}
#function that calculates residuals (to be minimized)
ssqpar=function(par){
r=par[1]
p=par[2]
alpha=1
K=10^8
#solves the ODE for times in t
out=ode(y=init, times=t, func=rate, parms=par)
#formats predicted data from ODE
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#calculates residuals from ODE
ssqr=outdf$pred-df$NScases
return(ssqr)
}
#starting guess for parameters
par=c(r=0.5, p=0.5)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#load libraries
library(deSolve)
library(minpack.lm)
#load and format data
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
#load libraries
library(deSolve)
library(minpack.lm)
#load and format data
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
NSnewcases=c(7,13,10,17,5,17,20,12,5,20,23,23,14,29,26,31,17,32,31,34,21,17,29,43,30,32)
t=c(1:length(NScases))
df=data.frame(t, NScases)
init=c(NScases[1])
#define the ODE
rate=function(t, C, par){
#parameters (alpha and K set)
r=par[1]
p=par[2]
alpha=1
K=10^8
#c is total cases
dC=r*(C^p)*(1-(C/K)^alpha)
return(list(dC))
}
#function that calculates residuals (to be minimized)
ssqpar=function(par){
r=par[1]
p=par[2]
alpha=1
K=10^8
#solves the ODE for times in t
out=ode(y=init, times=t, func=rate, parms=par)
#formats predicted data from ODE
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#calculates residuals from ODE
ssqr=outdf$pred-df$NScases
return(ssqr)
}
#starting guess for parameters
par=c(r=0.5, p=0.5)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#starting guess for parameters
par=c(r=2, p=0.5)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#starting guess for parameters
par=c(r=1.94, p=0.45)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#load libraries
library(deSolve)
library(minpack.lm)
#load and format data
NScases=c(21,28,41,51,68,73,90,110,122,127,147,170,193,207,236,262,293,310,342,373,407,428,445,474,517,547,579)
NSnewcases=c(7,13,10,17,5,17,20,12,5,20,23,23,14,29,26,31,17,32,31,34,21,17,29,43,30,32)
t=c(1:length(NScases))
df=data.frame(t, NScases)
init=c(NScases[1])
#define the ODE
rate=function(t, C, par){
#parameters (alpha and K set)
r=par[1]
p=par[2]
alpha=1
K=10^8
#c is total cases
dC=r*(C^p)*(1-(C/K)^alpha)
return(list(dC))
}
#function that calculates residuals (to be minimized)
ssqpar=function(par){
r=par[1]
p=par[2]
alpha=1
K=10^8
#solves the ODE for times in t
out=ode(y=init, times=t, func=rate, parms=par)
#formats predicted data from ODE
outdf=data.frame(out)
colnames(outdf)=c("t", "pred")
#calculates residuals from ODE
ssqr=outdf$pred-df$NScases
return(ssqr)
}
#starting guess for parameters
par=c(r=1.94, p=0.45)
#modified Levenberg-Marquardt algorithm to minimize residuals
fitval=nls.lm(par=par, fn=ssqpar)
summary(fitval)
#set this to your working directory
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
#source file
source("SEIAR_Teismann.R")
#read in parameter values
paramset<-read.csv("params_Teismann.csv")
#initial states
S0<-c(S=1000, E=0, B=0, A=0, I_p=20, I_m=0, J=0, H=0, F=0, Q_m=0, Q_J=0, R=0)
#choose parameter sets
param=paramset[1, 2:17]
#control reproduction number, when control measures are in place
Rc=with(param, (mu_E/(mu_E+kappa))*((beta_p/(mu_1+kappa))+(phi*mu_1+beta_m)/((mu_1+kappa)*(mu_2+lambda))+((1-phi)*mu_1*beta_A)/((mu_1+kappa)*(mu_A+lambda))))
Rc
#final time for SSA
tf<-60
#output times for ODE solver
times<-seq(0, tf, by=0.01)
#number of simulations
A=repsim(S0, rates, nu, param=param, tf=360, simName, runs=20)
#returns a vector of total cases per day
total_cases=function(data){
}
#source file
source("SEIAR_Teismann.R")
#number of simulations
A=repsim(S0, rates, nu, param=param, tf=360, simName, runs=20)
#number of simulations
A=repsim(S0, rates, nu, param=param, tf=360, simName, runs=20)
#source file
source("SEIAR_Teismann.R")
#number of simulations
A=repsim(S0, rates, nu, param=param, tf=360, simName, runs=20)
View(A)
write.csv(A, "SSA runs tau=0.005")
write.csv(A, "SSA runs tau=0.005.csv")
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting.R")
#read data generated from SEIR SSA
SEIR_data<-read.csv("SSA runs.csv")
cases<-function(SEIR_data, run, tau){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%1/tau==1)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
#df=data.frame(seq(1, length(totals)), totals)
#colnames(df)=(c("day", "total"))
#return(df)
return(totals)
}
#fits r, p, alpha, and K for a given run
fit_param_SEIR=function(SEIR_data, run, tau){
#format case data for a given region
cases=cases(SEIR_data=SEIR_data, run, tau)
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#performs the fit
fit=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
parest=fit$par
return(parest)
}
fit_multiple_SEIR=function(SEIR_data, tau){
df=data.frame(fit_param_SEIR(SEIR_data, 1))
colnames(df)="1"
for(x in seq(2, length(split(SEIR_data, f=SEIR_data$run)))){
print(x)
params=data.frame(fit_param_SEIR(SEIR_data, x, tau))
colnames(params)=x
df=cbind(df, params)
print(params)
}
return(df)
}
write.csv(fitted, "4_param_fit_SEIR.csv", row.names=TRUE)
#read data generated from SEIR SSA
SEIR_data<-read.csv("SSA runs tau=0.005.csv.csv")
fit_multiple_SEIR(SEIR_data, 0.005)
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting.R")
#read data generated from SEIR SSA
SEIR_data<-read.csv("SSA runs tau=0.005.csv.csv")
cases<-function(SEIR_data, run, tau){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%(1/tau)==1)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
#df=data.frame(seq(1, length(totals)), totals)
#colnames(df)=(c("day", "total"))
#return(df)
return(totals)
}
#fits r, p, alpha, and K for a given run
fit_param_SEIR=function(SEIR_data, run, tau){
#format case data for a given region
cases=cases(SEIR_data=SEIR_data, run, tau)
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#performs the fit
fit=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
parest=fit$par
return(parest)
}
fit_multiple_SEIR=function(SEIR_data, tau){
df=data.frame(fit_param_SEIR(SEIR_data, 1, tau))
colnames(df)="1"
for(x in seq(2, length(split(SEIR_data, f=SEIR_data$run)))){
print(x)
params=data.frame(fit_param_SEIR(SEIR_data, x, tau))
colnames(params)=x
df=cbind(df, params)
print(params)
}
return(df)
}
#write.csv(fitted, "4_param_fit_SEIR.csv", row.names=TRUE)
fit_multiple_SEIR(SEIR_data, 0.005)
#plot E for every simulation
sampleruns<-ggplot(A, aes(x=t, y=R))+geom_line(aes(color=run))
print(sampleruns)
#plot L, I, A for one simulation
B=pluckrun(A, 16)
singlerun<-ggplot(B, aes(x=t, y=values))+geom_line(aes(color=ind))
print(singlerun)
#plot L, I, A for one simulation
B=pluckrun(A, 3)
singlerun<-ggplot(B, aes(x=t, y=values))+geom_line(aes(color=ind))
print(singlerun)
split(SEIR_data, f=SEIR_data$run))[18]
split(SEIR_data, f=SEIR_data$run)[18]
length(split(SEIR_data, f=SEIR_data$run))
fit_multiple_SEIR(SEIR_data, 0.005)
cases=cases(SEIR_data=SEIR_data, 18, 0.005)
times=seq(0, length(cases), 0.1)
t=c(1:length(cases))
times=sort(union(times, t))
df=data.frame(t, cases)
times
t
cases
cases=cases(SEIR_data=SEIR_data, 17, 0.005)
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting.R")
#read data generated from SEIR SSA
SEIR_data<-read.csv("SSA runs tau=0.005.csv.csv")
cases<-function(SEIR_data, run, tau){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%(1/tau)==1)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
#df=data.frame(seq(1, length(totals)), totals)
#colnames(df)=(c("day", "total"))
#return(df)
return(totals)
}
#fits r, p, alpha, and K for a given run
fit_param_SEIR=function(SEIR_data, run, tau){
#format case data for a given region
cases=cases(SEIR_data, run, tau)
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#performs the fit
fit=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
parest=fit$par
return(parest)
}
fit_multiple_SEIR=function(SEIR_data, tau){
df=data.frame(fit_param_SEIR(SEIR_data, 1, tau))
colnames(df)="1"
for(x in seq(2, length(split(SEIR_data, f=SEIR_data$run)))){
print(x)
params=data.frame(fit_param_SEIR(SEIR_data, x, tau))
colnames(params)=x
df=cbind(df, params)
print(params)
}
return(df)
}
#write.csv(fitted, "4_param_fit_SEIR.csv", row.names=TRUE)
cases=cases(SEIR_data=SEIR_data, 17, 0.005)
cases
#plot E for every simulation
sampleruns<-ggplot(A, aes(x=t, y=R))+geom_line(aes(color=run))
print(sampleruns)
cases=cases(SEIR_data=SEIR_data, 1, 0.005)
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting.R")
#read data generated from SEIR SSA
SEIR_data<-read.csv("SSA runs tau=0.005.csv.csv")
cases<-function(SEIR_data, run, tau){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%(1/tau)==1)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
#df=data.frame(seq(1, length(totals)), totals)
#colnames(df)=(c("day", "total"))
#return(df)
return(totals)
}
#fits r, p, alpha, and K for a given run
fit_param_SEIR=function(SEIR_data, run, tau){
#format case data for a given region
cases=cases(SEIR_data, run, tau)
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#performs the fit
fit=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
parest=fit$par
return(parest)
}
fit_multiple_SEIR=function(SEIR_data, tau){
df=data.frame(fit_param_SEIR(SEIR_data, 1, tau))
colnames(df)="1"
for(x in seq(2, length(split(SEIR_data, f=SEIR_data$run)))){
print(x)
params=data.frame(fit_param_SEIR(SEIR_data, x, tau))
colnames(params)=x
df=cbind(df, params)
print(params)
}
return(df)
}
#write.csv(fitted, "4_param_fit_SEIR.csv", row.names=TRUE)
cases1=cases(SEIR_data=SEIR_data, 1, 0.005)
cases1
df=split(SEIR_data, f=SEIR_data$run)
df
#number of simulations
A=repsim(S0, rates, nu, param=param, tf=360, simName, runs=20)
#read data generated from SEIR SSA
SEIR_data<-read.csv("SSA runs tau=0.005.csv.csv")
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting.R")
#read data generated from SEIR SSA
SEIR_data<-read.csv("SSA runs tau=0.005.csv.csv")
#read data generated from SEIR SSA
SEIR_data<-read.csv("SSA runs tau=0.005.csv")
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("parameter_fitting.R")
#read data generated from SEIR SSA
SEIR_data<-read.csv("SSA runs tau=0.005.csv")
cases<-function(SEIR_data, run, tau){
df=split(SEIR_data, f=SEIR_data$run)
x=which(df[[run]][1]%%(1/tau)==1)
totals=c()
for(y in x){
total=sum(df[[run]][y,5:14])
totals=append(totals, total)
}
#df=data.frame(seq(1, length(totals)), totals)
#colnames(df)=(c("day", "total"))
#return(df)
return(totals)
}
#fits r, p, alpha, and K for a given run
fit_param_SEIR=function(SEIR_data, run, tau){
#format case data for a given region
cases=cases(SEIR_data, run, tau)
#starting guess for parameters
par=c(r=2, p=1, alpha=1, K=5000)
#performs the fit
fit=optim(par=par, fn=ssq2, cases=cases, control=list(parscale=c(1,1,1,10000)))
parest=fit$par
return(parest)
}
fit_multiple_SEIR=function(SEIR_data, tau){
df=data.frame(fit_param_SEIR(SEIR_data, 1, tau))
colnames(df)="1"
for(x in seq(2, length(split(SEIR_data, f=SEIR_data$run)))){
print(x)
params=data.frame(fit_param_SEIR(SEIR_data, x, tau))
colnames(params)=x
df=cbind(df, params)
print(params)
}
return(df)
}
#write.csv(fitted, "4_param_fit_SEIR.csv", row.names=TRUE)
fit_multiple_SEIR(SEIR_data, 0.005)
