revealed=to_open
}
if(strategy=="change"){
choice2=doors[!doors %in% c(revealed, choice1)]
}
else if(strategy=="keep"){
choice2=choice1
}
if(choice2==true_answer){
result="success"
}
else{
result="failure"
}
return(result)
}
many_runs=function(reps){
results=c()
for(x in c(1:reps)){
choice1=sample(c(1:3), 1)
keep_run=one_run(strategy = "keep", choice1=choice1)
change_run=one_run(strategy = "change", choice1=choice1)
if(change_run=="success"){
results=append(results, 0)
}
if(keep_run=="success"){
results=append(results, 1)
}
}
hist(results)
}
many_runs(10000)
many_runs(100)
many_runs(1000)
many_runs(5000)
many_runs(10)
one_run=function(strategy, choice1){
doors=c(1, 2, 3)
true_answer=sample(doors, 1)
if(true_answer==choice1){
to_open=doors[!doors %in% choice1]
revealed=sample(to_open, 1)
}
else{
to_open=doors[!doors %in% c(true_answer, choice1)]
revealed=to_open
}
if(strategy=="change"){
choice2=doors[!doors %in% c(revealed, choice1)]
}
else if(strategy=="keep"){
choice2=choice1
}
if(choice2==true_answer){
result="success"
}
else{
result="failure"
}
return(result)
}
many_runs=function(reps){
results=c()
for(x in c(1:reps)){
choice1=sample(c(1:3), 1)
keep_run=one_run(strategy = "keep", choice1=choice1)
change_run=one_run(strategy = "change", choice1=choice1)
if(change_run=="success"){
results=append(results, 0)
}
if(keep_run=="success"){
results=append(results, 1)
}
}
hist(results)
}
many_runs(10000)
install.packages(devtools)
install.packages("devtools")
install.packages("rstan")
install.packages(devtools)
install.packages("devtools")
library(devtools)
Sys.setenv(PATH = paste("C:\\Rtools\\bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(PATH = paste("C:\\Rtools\\mingw_64\\bin",
Sys.setenv(PATH = paste("C:\\Rtools\\mingw_64\\bin", Sys.getenv("PATH"), sep=";"))
install.packages(rstan)
install.packages("rstan")
install.packages("rstan")
library("deSolve")
library("rootSolve")
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("fit_datasets_F.R")
rhs_SEIIAR=function(t, y, par, fit, N, phi){
with(as.list(c(y, par, fit)), {
#sets phi to the average for t before start, selects correct phi value if after start
if(t>=phi$times[1]){
newdata=data.frame(times=as.numeric(t))
phi=as.numeric(predict(fit, newdata=newdata))
}
else{
phi=mean(phi$ratios)
}
dS=-beta*(I_1+I_2+A)*S/N
dE=beta*(I_1+I_2+A)*S/N-mu_E*E
dI_1=mu_E*E-1.5*mu*I_1
dI_2=1.5*(1/phi)*mu*I_1-mu*I_2
dC=1.5*(1/phi)*mu*I_1
dA=1.5*(1-(1/phi))*mu*I_1-mu*A
dR_1=mu*A
dF_=(1-rho)*mu*I_2
dR_2=rho*mu*I_2
list(c(dS, dE, dI_1, dI_2, dC, dA, dR_1, dF_, dR_2))
})
}
ssq_SEIIAR=function(par, region, cases_C, cases_F, mu_IFR=0.01, phi, times, start, fit, pop, mu_CFR){
p_pre_0=par[3]
p_post_0=par[4]
names=c("beta", "mu_E", "mu", "p_pre_0", "p_post_0", "rho")
#par=c(par[1], par[2], par[3], par[4], par[5], rho=1-mu_CFR)
# par=c(par[1], par[2], 0.2, par[3], par[4], rho=1-mu_CFR)
par=c(par[1], 1/4, par[2], par[3], par[4], rho=1-mu_CFR)
names(par)=names
N=pop
if(phi$times[1]>start){
phi_start=mean(phi$ratios)
}else{
index=which(phi$times==start)
phi_start=phi$ratios[index]
}
names=c("S", "E", "I_1", "I_2", "C", "A", "R_1", "F_", "R_2")
S0=c(S=N, E=N*p_pre_0/2, I_1=N*p_pre_0/2, I_2=p_post_0*N/2, C=cases_C[1], A=p_post_0*N/2, R_1=0, F_=cases_F[1], R_2=0)
names(S0)=names
#p_post_0=(S0[5]+S0[4])/N
ode_soln=ode(y=S0, times, func=rhs_SEIIAR, par=par, fit=fit, N=N, phi=phi)
#I_2=ode_soln[,"I_2"]
#R_2=ode_soln[,"R_2"]
C=ode_soln[,"C"]
F_=ode_soln[,"F_"]
#total_cases=I_2+R_2+F_
ssq=sum(sqrt((cases_C-C)^2))/mean(cases_C)+sum(sqrt((cases_F-F_)^2))/mean(cases_F)
return(ssq)
}
fit_to_SEIIAR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, pop, intervention=1, final_size_guess=5000){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR, final_size_guess = final_size_guess)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
fit=lm(ratios~poly(times, 6, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=max(min(c(which(cases_C>0, arr.ind=TRUE))), intervention)
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
#par=c(beta=0.38, mu_E=1/4, mu=1/5, p_pre_0=0.0001, p_post=0.0001)
#par=c(beta=0.38, mu_E=1/4, p_pre_0=0.0001, p_post_0=0.0001)
par=c(beta=0.38, mu=1/5, p_pre_0=0.0001, p_post_0=0.0001)
ode_fit=optim(par=par, fn=ssq_SEIIAR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, pop=pop, mu_CFR=mu_CFR, method="L-BFGS-B", lower=c(0, 0, 0), upper=c(1, 1, 1))
fit_par=ode_fit$par
return(fit_par)
}
plot_SEIIAR_fit=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, pop, intervention=1, fit_par=NULL, final_size_guess=5000, compartment){
if(is.null(fit_par==TRUE)){
fit_par=fit_to_SEIIAR(region, C_data, F_data, mu_IFR, pop, intervention, final_size_guess)
}
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
fit=lm(ratios~poly(times, 4, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=max(min(c(which(cases_C>0, arr.ind=TRUE))), intervention)
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
p_pre_0=fit_par[3]
p_post_0=par[4]
N=pop
names=c("S", "E", "I_1", "I_2", "C", "A", "R_1", "F_", "R_2")
S0=c(S=N, E=N*p_pre_0/2, I_1=N*p_pre_0/2, I_2=p_post_0*N/2, C=cases_C[1], A=p_post_0*N/2, R_1=0, F_=cases_F[1], R_2=0)
names(S0)=names
names=c("beta", "mu_E", "mu", "p_pre_0", "p_post_0", "rho")
fit_par=c(fit_par[1], 1/4, fit_par[2], fit_par[3], fit_par[4], rho=1-mu_CFR)
names(fit_par)=names
ode_soln=ode(y=S0, times, func=rhs_SEIIAR, par=fit_par, fit=fit, N=N, phi=phi)
C=ode_soln[,"C"]
F_=ode_soln[,"F_"]
sim_C_df=data.frame(times, C)
sim_F_df=data.frame(times, F_)
C_df=data.frame(times, cases_C)
F_df=data.frame(times, cases_F)
if(compartment=="C"){
plot=ggplot(data=C_df, aes(x=times, y=cases_C))+geom_point()+geom_line(data=sim_C_df, aes(x=times, y=C))+labs(title=region_name)
print(plot)
}
else if(compartment=="F"){
plot=ggplot(data=F_df, aes(x=times, y=cases_F))+geom_point()+geom_line(data=sim_F_df, aes(x=times, y=F_))+labs(title=region_name)
print(plot)
}
}
fn<-function(z){
0.8654657*z+log(1-z)-log(1-0.0124321)
}
uniroot(fn, c(0, 1))
fit_par=fit_to_SEIIAR(117, pop=66990000, intervention=56)
plot_SEIIAR_fit(117, pop=66990000, intervention = 56, fit_par=fit_par, compartment="C")
fit_par
region=117
C_data=JHU_C_data
F_fata=JHU_F_data
mu_IFR=0.01
pop=66990000
intervention=56
final_size_guess=56
compartment="C"
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
F_data=JHU_F_data
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
phi
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau_mu_CFR
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
phi
times
fit=lm(ratios~poly(times, 6, raw=TRUE), data=phi)
fit
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=max(min(c(which(cases_C>0, arr.ind=TRUE))), intervention)
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_C
times
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
cases_F
length(cases_F)
length(cases_C)
length(times)
p_pre_0=fit_par[3]
p_post_0=par[4]
p_pre_0
p_post_0
fit_par
fit_par[4]
plot_SEIIAR_fit=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, pop, intervention=1, fit_par=NULL, final_size_guess=5000, compartment){
if(is.null(fit_par==TRUE)){
fit_par=fit_to_SEIIAR(region, C_data, F_data, mu_IFR, pop, intervention, final_size_guess)
}
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
fit=lm(ratios~poly(times, 6, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=max(min(c(which(cases_C>0, arr.ind=TRUE))), intervention)
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
p_pre_0=fit_par[3]
p_post_0=fit_par[4]
N=pop
names=c("S", "E", "I_1", "I_2", "C", "A", "R_1", "F_", "R_2")
S0=c(S=N, E=N*p_pre_0/2, I_1=N*p_pre_0/2, I_2=p_post_0*N/2, C=cases_C[1], A=p_post_0*N/2, R_1=0, F_=cases_F[1], R_2=0)
names(S0)=names
names=c("beta", "mu_E", "mu", "p_pre_0", "p_post_0", "rho")
fit_par=c(fit_par[1], 1/4, fit_par[2], fit_par[3], fit_par[4], rho=1-mu_CFR)
names(fit_par)=names
ode_soln=ode(y=S0, times, func=rhs_SEIIAR, par=fit_par, fit=fit, N=N, phi=phi)
C=ode_soln[,"C"]
F_=ode_soln[,"F_"]
sim_C_df=data.frame(times, C)
sim_F_df=data.frame(times, F_)
C_df=data.frame(times, cases_C)
F_df=data.frame(times, cases_F)
if(compartment=="C"){
plot=ggplot(data=C_df, aes(x=times, y=cases_C))+geom_point()+geom_line(data=sim_C_df, aes(x=times, y=C))+labs(title=region_name)
print(plot)
}
else if(compartment=="F"){
plot=ggplot(data=F_df, aes(x=times, y=cases_F))+geom_point()+geom_line(data=sim_F_df, aes(x=times, y=F_))+labs(title=region_name)
print(plot)
}
}
plot_SEIIAR_fit(117, pop=66990000, intervention = 56, fit_par=fit_par, compartment="C")
plot_SEIIAR_fit(117, pop=66990000, intervention = 56, fit_par=fit_par, compartment="F")
library("deSolve")
library("rootSolve")
setwd("C:/Users/mjiho/ac-disease-modelling/R-model/Margaret/")
source("fit_datasets_F.R")
rhs_SEIIAR=function(t, y, par, fit, N, phi, beta_type){
with(as.list(c(y, par, fit)), {
#sets phi to the average for t before start, selects correct phi value if after start
if(t>=phi$times[1]){
newdata=data.frame(times=as.numeric(t))
phi=as.numeric(predict(fit, newdata=newdata))
}
else{
phi=mean(phi$ratios)
}
if(beta_type=="equal"){
dS=-beta*(I_1+I_2+A)*S/N
dE=beta*(I_1+I_2+A)*S/N-mu_E*E
dI_1=mu_E*E-1.5*mu*I_1
dI_2=1.5*(1/phi)*mu*I_1-mu*I_2
dC=1.5*(1/phi)*mu*I_1
dA=1.5*(1-(1/phi))*mu*I_1-mu*A
dR_1=mu*A
dF_=(1-rho)*mu*I_2
dR_2=rho*mu*I_2
}else if(beta_type=="time-dep"){
if(t<intervention){
dS=-beta_b*(I_1+I_2+A)*S/N
dE=beta_b*(I_1+I_2+A)*S/N-mu_E*E
dI_1=mu_E*E-1.5*mu*I_1
dI_2=1.5*(1/phi)*mu*I_1-mu*I_2
dC=1.5*(1/phi)*mu*I_1
dA=1.5*(1-(1/phi))*mu*I_1-mu*A
dR_1=mu*A
dF_=(1-rho)*mu*I_2
dR_2=rho*mu*I_2
}else{
dS=-beta_a*(I_1+I_2+A)*S/N
dE=beta_a*(I_1+I_2+A)*S/N-mu_E*E
dI_1=mu_E*E-1.5*mu*I_1
dI_2=1.5*(1/phi)*mu*I_1-mu*I_2
dC=1.5*(1/phi)*mu*I_1
dA=1.5*(1-(1/phi))*mu*I_1-mu*A
dR_1=mu*A
dF_=(1-rho)*mu*I_2
dR_2=rho*mu*I_2
}
}
list(c(dS, dE, dI_1, dI_2, dC, dA, dR_1, dF_, dR_2))
})
}
ssq_SEIIAR=function(par, region, cases_C, cases_F, mu_IFR=0.01, phi, times, start, fit, pop, mu_CFR, beta_type){
if(beta_type=="equal"){
p_pre_0=par[3]
p_post_0=par[4]
names=c("beta", "mu_E", "mu", "p_pre_0", "p_post_0", "rho")
#par=c(par[1], par[2], par[3], par[4], par[5], rho=1-mu_CFR)
# par=c(par[1], par[2], 0.2, par[3], par[4], rho=1-mu_CFR)
par=c(par[1], 1/4, par[2], par[3], par[4], rho=1-mu_CFR)
names(par)=names
}else if(beta_type=="time-dep"){
p_pre_0=par[4]
p_post_0=par[5]
names=c("beta_b", "beta_a", "mu_E", "mu", "p_pre_0", "p_post_0", "rho")
par=c(par[1], par[2], 1/4, par[3], par[4], par[5], rho=1-mu_CFR)
names(par=names)
}
N=pop
if(phi$times[1]>start){
phi_start=mean(phi$ratios)
}else{
index=which(phi$times==start)
phi_start=phi$ratios[index]
}
names=c("S", "E", "I_1", "I_2", "C", "A", "R_1", "F_", "R_2")
S0=c(S=N, E=N*p_pre_0/2, I_1=N*p_pre_0/2, I_2=p_post_0*N/2, C=cases_C[1], A=p_post_0*N/2, R_1=0, F_=cases_F[1], R_2=0)
names(S0)=names
#p_post_0=(S0[5]+S0[4])/N
ode_soln=ode(y=S0, times, func=rhs_SEIIAR, par=par, fit=fit, N=N, phi=phi, beta_type=beta_type)
#I_2=ode_soln[,"I_2"]
#R_2=ode_soln[,"R_2"]
C=ode_soln[,"C"]
F_=ode_soln[,"F_"]
#total_cases=I_2+R_2+F_
ssq=sum(sqrt((cases_C-C)^2))/mean(cases_C)+sum(sqrt((cases_F-F_)^2))/mean(cases_F)
return(ssq)
}
fit_to_SEIIAR=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, pop, intervention=1, final_size_guess=5000, beta_type){
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR, final_size_guess = final_size_guess)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
fit=lm(ratios~poly(times, 6, raw=TRUE), data=phi)
if(beta_type=="equal"){
start=max(min(c(which(cases_C>0, arr.ind=TRUE))), intervention)
par=c(beta=0.38, mu=1/5, p_pre_0=0.0001, p_post_0=0.0001)
}else if(beta_type=="time-dep"){
start=min(which(cases_C>0, arr.ind=TRUE))
par=c(beta_b=0.38, beta_a=0.38, mu=1/5, p_pre_0=0.0001, p_post_0=0.0001)
}
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
#par=c(beta=0.38, mu_E=1/4, mu=1/5, p_pre_0=0.0001, p_post=0.0001)
#par=c(beta=0.38, mu_E=1/4, p_pre_0=0.0001, p_post_0=0.0001)
ode_fit=optim(par=par, fn=ssq_SEIIAR, gr=NULL, region=region, cases_C=cases_C, cases_F=cases_F, mu_IFR=mu_IFR, phi=phi, times=times, start=start, fit=fit, pop=pop, mu_CFR=mu_CFR, beta_type=beta_type, method="L-BFGS-B", lower=c(0, 0, 0), upper=c(1, 1, 1))
fit_par=ode_fit$par
return(fit_par)
}
plot_SEIIAR_fit=function(region, C_data=JHU_C_data, F_data=JHU_F_data, mu_IFR=0.01, pop, intervention=1, fit_par=NULL, final_size_guess=5000, compartment){
if(is.null(fit_par==TRUE)){
fit_par=fit_to_SEIIAR(region, C_data, F_data, mu_IFR, pop, intervention, final_size_guess)
}
region_name=regions(C_data)[region]
phi=phi_vs_time(region, C_data, F_data, mu_IFR)
tau_mu_CFR=fit_tau_mu_CFR(region, C_data, F_data)
tau=tau_mu_CFR[1]
mu_CFR=tau_mu_CFR[2]
phi$times=phi$times-tau
times=phi$times
fit=lm(ratios~poly(times, 6, raw=TRUE), data=phi)
cases_C=as.integer(C_data[5:nrow(C_data), region])
cases_C=cases_C[!is.na(cases_C)]
start=max(min(c(which(cases_C>0, arr.ind=TRUE))), intervention)
times=c(start:length(cases_C))
cases_C=c(cases_C[start:length(cases_C)])
cases_F=as.integer(F_data[5:nrow(F_data), region])
cases_F=cases_F[!is.na(cases_F)]
cases_F=c(cases_F[start:length(cases_F)])
p_pre_0=fit_par[3]
p_post_0=fit_par[4]
N=pop
names=c("S", "E", "I_1", "I_2", "C", "A", "R_1", "F_", "R_2")
S0=c(S=N, E=N*p_pre_0/2, I_1=N*p_pre_0/2, I_2=p_post_0*N/2, C=cases_C[1], A=p_post_0*N/2, R_1=0, F_=cases_F[1], R_2=0)
names(S0)=names
names=c("beta", "mu_E", "mu", "p_pre_0", "p_post_0", "rho")
fit_par=c(fit_par[1], 1/4, fit_par[2], fit_par[3], fit_par[4], rho=1-mu_CFR)
names(fit_par)=names
ode_soln=ode(y=S0, times, func=rhs_SEIIAR, par=fit_par, fit=fit, N=N, phi=phi)
C=ode_soln[,"C"]
F_=ode_soln[,"F_"]
sim_C_df=data.frame(times, C)
sim_F_df=data.frame(times, F_)
C_df=data.frame(times, cases_C)
F_df=data.frame(times, cases_F)
if(compartment=="C"){
plot=ggplot(data=C_df, aes(x=times, y=cases_C))+geom_point()+geom_line(data=sim_C_df, aes(x=times, y=C))+labs(title=region_name)
print(plot)
}
else if(compartment=="F"){
plot=ggplot(data=F_df, aes(x=times, y=cases_F))+geom_point()+geom_line(data=sim_F_df, aes(x=times, y=F_))+labs(title=region_name)
print(plot)
}
}
fn<-function(z){
0.8654657*z+log(1-z)-log(1-0.0124321)
}
uniroot(fn, c(0, 1))
fit_par=fit_to_SEIIAR(117, pop=66990000, intervention = 56, beta_type = "time-dep")
ssq_SEIIAR=function(par, region, cases_C, cases_F, mu_IFR=0.01, phi, times, start, fit, pop, mu_CFR, beta_type){
if(beta_type=="equal"){
p_pre_0=par[3]
p_post_0=par[4]
names=c("beta", "mu_E", "mu", "p_pre_0", "p_post_0", "rho")
#par=c(par[1], par[2], par[3], par[4], par[5], rho=1-mu_CFR)
# par=c(par[1], par[2], 0.2, par[3], par[4], rho=1-mu_CFR)
par=c(par[1], 1/4, par[2], par[3], par[4], rho=1-mu_CFR)
names(par)=names
}else if(beta_type=="time-dep"){
p_pre_0=par[4]
p_post_0=par[5]
names=c("beta_b", "beta_a", "mu_E", "mu", "p_pre_0", "p_post_0", "rho")
par=c(par[1], par[2], 1/4, par[3], par[4], par[5], rho=1-mu_CFR)
names(par)=names
}
N=pop
if(phi$times[1]>start){
phi_start=mean(phi$ratios)
}else{
index=which(phi$times==start)
phi_start=phi$ratios[index]
}
names=c("S", "E", "I_1", "I_2", "C", "A", "R_1", "F_", "R_2")
S0=c(S=N, E=N*p_pre_0/2, I_1=N*p_pre_0/2, I_2=p_post_0*N/2, C=cases_C[1], A=p_post_0*N/2, R_1=0, F_=cases_F[1], R_2=0)
names(S0)=names
#p_post_0=(S0[5]+S0[4])/N
ode_soln=ode(y=S0, times, func=rhs_SEIIAR, par=par, fit=fit, N=N, phi=phi, beta_type=beta_type)
#I_2=ode_soln[,"I_2"]
#R_2=ode_soln[,"R_2"]
C=ode_soln[,"C"]
F_=ode_soln[,"F_"]
#total_cases=I_2+R_2+F_
ssq=sum(sqrt((cases_C-C)^2))/mean(cases_C)+sum(sqrt((cases_F-F_)^2))/mean(cases_F)
return(ssq)
}
fit_par=fit_to_SEIIAR(117, pop=66990000, intervention = 56, beta_type = "time-dep")
fit_par
